package gov.georgia.dhr.dfcs.sacwis.service.person.impl;

import gov.georgia.dhr.dfcs.sacwis.core.constants.ArchitectureConstants;
import gov.georgia.dhr.dfcs.sacwis.core.constants.ServiceConstants;
import gov.georgia.dhr.dfcs.sacwis.core.exception.ServiceException;
import gov.georgia.dhr.dfcs.sacwis.core.message.Messages;
import gov.georgia.dhr.dfcs.sacwis.core.utility.DateHelper;
import gov.georgia.dhr.dfcs.sacwis.service.impl.BaseServiceImpl;
import gov.georgia.dhr.dfcs.sacwis.core.lookup.CodesTables;
import gov.georgia.dhr.dfcs.sacwis.core.pagination.PaginatedHibernateList;

import gov.georgia.dhr.dfcs.sacwis.dao.PlacementDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.PersonDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.ContactDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.ContactCbxDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.EventPersonLinkDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.EmployeeDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.LegalStatusDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.ContractServiceDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.FosterCareRateDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.CharacteristicsDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.PaymentOfCareDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.StagePersonLinkDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.PersonPhoneDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.UnitEmpLinkDAO;
import gov.georgia.dhr.dfcs.sacwis.dao.PortalUserVendorLinkDAO;

import gov.georgia.dhr.dfcs.sacwis.db.LegalStatus;
import gov.georgia.dhr.dfcs.sacwis.db.Person;
import gov.georgia.dhr.dfcs.sacwis.db.PersonPhone;
import gov.georgia.dhr.dfcs.sacwis.db.Placement;
import gov.georgia.dhr.dfcs.sacwis.db.PaymentOfCare;
import gov.georgia.dhr.dfcs.sacwis.db.Contact;
import gov.georgia.dhr.dfcs.sacwis.db.EventPersonLink;
import gov.georgia.dhr.dfcs.sacwis.db.Characteristics;
import gov.georgia.dhr.dfcs.sacwis.db.Employee;

import gov.georgia.dhr.dfcs.sacwis.structs.input.ArchInputStruct;
import gov.georgia.dhr.dfcs.sacwis.structs.input.PortalChildRetrieveSI;
import gov.georgia.dhr.dfcs.sacwis.service.person.RetrievePortalChildDetail;
import gov.georgia.dhr.dfcs.sacwis.structs.output.ArchOutputStruct;
import gov.georgia.dhr.dfcs.sacwis.structs.output.CFAD31SOG00;
import gov.georgia.dhr.dfcs.sacwis.structs.output.PortalChildRetrieveSO;
import gov.georgia.dhr.dfcs.sacwis.structs.output.PersonCharacteristicsBean;
import gov.georgia.dhr.dfcs.sacwis.structs.output.PortalContactBean;

import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Collections;
/**
* 
* <pre>
* Change History:
* Date      User              Description
* --------  ----------------  --------------------------------------------------
* 10/XX/09  Patrick Coogan    Created new service to support the Portal Child Detail
*                             page for the SHINES Vendor Portal
* 11/09/09  Ekemini Udofiah   SMS 39431: Call to personPhoneDAO.findNbrPersonPhoneByIdPersonAndPhoneType
*                             unsafe due to possibility of rows with same timestamp
*                             generated by conversion; noted during ECEM system test.  Replaced
*                             by safe method call personPhoneDAO.findPersonPhoneByIdPersonCdPersonPhoneTypeDtPersonPhoneEnd
*                             with the end date set to max java date.
*</pre>
*
*/



public class RetrievePortalChildDetailImpl extends BaseServiceImpl implements RetrievePortalChildDetail {

  private static final String CPA_FACILITY_TYPE = CodesTables.CFACTYP4_CP;
  
  private static final String RESPITE_NIGHT_PLACEMENT = CodesTables.CTMPLTYP_REN;
  
  private static final String RESPITE_DAY_PLACEMENT = CodesTables.CTMPLTYP_RED;
  
  private static final String CONCURRENT_PLACEMENT = CodesTables.CTMPLTYP_COR;
  
  private static final String CPA_PLACEMENT_TYPE = CodesTables.CPLMNTYP_CFH;
  
  private static final String CONTACT_PURPOSES = CodesTables.CCNTPURP;
  private static final String CASE_MANAGER_CHILD_VISIT = CodesTables.CCNTPURP_CMC;
  
  private static final int ID_CONTACT_EVENT_LOC = 0;
  private static final int ID_CONTACT_STAGE_LOC = 1;
  private static final int CONTACT_CD_STAGE_LOC = 2;
  private static final int DT_CONTACT_OCURRRED_LOC = 3;
  private static final int CD_CONTACT_METHOD_LOC = 4;
  private static final int NM_CONTACTED_BY_LOC = 5;
  private static final int NM_AGENCY_NAME_LOC = 6;
  private static final int ID_PORTAL_USER_ENTERED_LOC = 7; 
  
  private CharacteristicsDAO characteristicsDAO = null;
  private PlacementDAO placementDAO = null;
  private PersonDAO personDAO = null;
  private ContactDAO contactDAO = null;
  private ContactCbxDAO contactCbxDAO = null;
  private EventPersonLinkDAO eventPersonLinkDAO = null;
  private EmployeeDAO employeeDAO = null;
  private LegalStatusDAO legalStatusDAO = null;
  private ContractServiceDAO contractServiceDAO = null;
  private FosterCareRateDAO fosterCareRateDAO = null;
  private PaymentOfCareDAO paymentOfCareDAO = null;
  private StagePersonLinkDAO stagePersonLinkDAO = null;
  private PersonPhoneDAO personPhoneDAO = null;
  private UnitEmpLinkDAO unitEmpLinkDAO = null;
  private PortalUserVendorLinkDAO portalUserVendorLinkDAO = null;
  
  public void setCharacteristicsDAO(CharacteristicsDAO characteristicsDAO) {
    this.characteristicsDAO = characteristicsDAO;
  }
  
  public void setUnitEmpLinkDAO(UnitEmpLinkDAO unitEmpLinkDAO) {
    this.unitEmpLinkDAO = unitEmpLinkDAO;
  }
  
  public void setPersonPhoneDAO(PersonPhoneDAO personPhoneDAO) {
    this.personPhoneDAO = personPhoneDAO;
  }

  public void setStagePersonLinkDAO(StagePersonLinkDAO stagePersonLinkDAO) {
    this.stagePersonLinkDAO = stagePersonLinkDAO;
  }
  
  public void setPaymentOfCareDAO(PaymentOfCareDAO paymentOfCareDAO) {
    this.paymentOfCareDAO = paymentOfCareDAO;
  }

  
  public void setPlacementDAO(PlacementDAO placementDAO) {
    this.placementDAO = placementDAO;
  }
  
  public void setPersonDAO(PersonDAO personDAO) {
    this.personDAO = personDAO;
  }
  
  public void setContactDAO(ContactDAO contactDAO) {
    this.contactDAO = contactDAO;
  }
  
  public void setContactCbxDAO(ContactCbxDAO contactCbxDAO) {
    this.contactCbxDAO = contactCbxDAO;
  }
  
  public void setEventPersonLinkDAO(EventPersonLinkDAO eventPersonLinkDAO) {
    this.eventPersonLinkDAO = eventPersonLinkDAO;
  }
  
  public void setEmployeeDAO(EmployeeDAO employeeDAO) {
    this.employeeDAO = employeeDAO;
  }
  
  public void setLegalStatusDAO(LegalStatusDAO legalStatusDAO) {
    this.legalStatusDAO = legalStatusDAO;
  }
  
  public void setContractServiceDAO(ContractServiceDAO contractServiceDAO) {
    this.contractServiceDAO = contractServiceDAO;
  }
  
  public void setFosterCareRateDAO(FosterCareRateDAO fosterCareRateDAO) {
    this.fosterCareRateDAO = fosterCareRateDAO;
  }
  
  public void setPortalUserVendorLinkDAO(PortalUserVendorLinkDAO portalUserVendorLinkDAO) {
    this.portalUserVendorLinkDAO = portalUserVendorLinkDAO;
  }
  
  public PortalChildRetrieveSO retrievePortalChildDetail(
                                                                 PortalChildRetrieveSI portalChildRetrieveSI)
                                                                                                                           throws ServiceException {

    PortalChildRetrieveSO portalChildRetrieveSO = new PortalChildRetrieveSO();
    
    int idPlcmtEvent = portalChildRetrieveSI.getIdPlcmtEvent();    
    int idPerson = portalChildRetrieveSI.getIdPerson();
    int idCase = portalChildRetrieveSI.getIdCase();
    int idStage = portalChildRetrieveSI.getIdStage();
    
    ArchInputStruct archInputStruct = portalChildRetrieveSI.getArchInputStruct();
    int pageNbr = archInputStruct.getUsPageNbr();
    int pageSize = archInputStruct.getUlPageSizeNbr();
    
    //Get basic person demographics
    Person person = personDAO.findPersonByIdPerson(idPerson);
      
    if (person == null) {
      throw new ServiceException(Messages.SQL_NOT_FOUND); 
    } 
      
    portalChildRetrieveSO.setUlIdPerson(idPerson);
    portalChildRetrieveSO.setUlIdCase(idCase);
    portalChildRetrieveSO.setNmPersonFirst(person.getNmPersonFirst()!=null ? person.getNmPersonFirst():"");
    portalChildRetrieveSO.setNmPersonMiddle(person.getNmPersonMiddle()!=null ? person.getNmPersonMiddle():"");
    portalChildRetrieveSO.setNmPersonLast(person.getNmPersonLast()!=null ? person.getNmPersonLast():"");
    portalChildRetrieveSO.setCdGender(person.getCdPersonSex() !=null ? person.getCdPersonSex():"");
    portalChildRetrieveSO.setDtChildBirth(person.getDtPersonBirth() != null ? person.getDtPersonBirth() : null);
    portalChildRetrieveSO.setUlChildAge(person.getDtPersonBirth() != null ? (Integer) DateHelper.getAge(person.getDtPersonBirth()) : null);
    portalChildRetrieveSO.setCdPersonChar(person.getCdPersonChar()!= null ? person.getCdPersonChar(): "");
    
    //Get basic placement info including facility and agency ID
    Placement placement = placementDAO.findPlacementByIdPlcmtEvent(idPlcmtEvent);
    
    if (placement == null) {
      throw new ServiceException(Messages.SQL_NOT_FOUND); 
    }
    
    portalChildRetrieveSO.setUlIdResource(placement.getCapsResourceByIdRsrcFacil().getIdResource());
    int agency = placement.getCapsResourceByIdRsrcAgency() != null ? placement.getCapsResourceByIdRsrcAgency().getIdResource() : 0; 
    portalChildRetrieveSO.setDtPlcmtStart(placement.getDtPlcmtStart());
    portalChildRetrieveSO.setDtPlcmtEnd(placement.getDtPlcmtEnd());
    portalChildRetrieveSO.setCdRemovalRsn(placement.getCdPlcmtRemovalRsn()!= null ? placement.getCdPlcmtRemovalRsn():"");
    portalChildRetrieveSO.setCdPlcmtType(placement.getCdPlcmtType() != null ? placement.getCdPlcmtType() : "");
    String tempType = placement.getCdTempType() != null ? placement.getCdTempType() : "";
    portalChildRetrieveSO.setCdSiblingPlcmt(placement.getIndPlcmtSibling() != null ? placement.getIndPlcmtSibling() : "");
    portalChildRetrieveSO.setSzNmRsrcFacil(placement.getNmPlcmtFacil()!= null ? placement.getNmPlcmtFacil() : "");
    portalChildRetrieveSO.setUlIdRsrcAgency(agency);
    
    //Find the currently assigned primary case manager
    Integer idCaseManager = stagePersonLinkDAO.findIdCaseWorkerByIdStageAndCdStagePersRole(idStage);
    
    if (idCaseManager != null){
      
      Employee employee = employeeDAO.findEmployeeByIdPerson(idCaseManager.intValue());
      //If employee can be found, populate name, job title, office location, and business phone
      if (employee != null) {
        
        portalChildRetrieveSO.setNmCaseManager(employee.getPerson().getNmPersonFull()!=null ? employee.getPerson().getNmPersonFull(): "");
        portalChildRetrieveSO.setCdCaseManagerJobTitle(employee.getCdEmployeeClass() != null ? employee.getCdEmployeeClass() : "");
        portalChildRetrieveSO.setCdCaseManagerOfficeLoc(employee.getOffice() != null ? employee.getOffice().getIdOffice().toString() : "");
        
        PersonPhone personPhone = personPhoneDAO.findPersonPhoneByIdPersonCdPersonPhoneTypeDtPersonPhoneEnd(idCaseManager,
        		CodesTables.CPHNTYP_BS,
                DateHelper.MAX_JAVA_DATE);
        if (personPhone != null) {
        	portalChildRetrieveSO.setSzCaseManagerPhone(personPhone.getNbrPersonPhone()!=null ? personPhone.getNbrPersonPhone() : "");
          }
        
        //If we could find the case manager, try to find the supervisor
        Integer idSupervisor = unitEmpLinkDAO.findUnitSupervisorByIdPerson(idCaseManager.intValue());
        
        if (idSupervisor != null){
          
          employee = null;
          employee = employeeDAO.findEmployeeByIdPerson(idSupervisor.intValue());
          //If employee can be found, populate name, job title, office location, and business phone
          if (employee !=null){
            
            portalChildRetrieveSO.setNmSupervisor(employee.getPerson().getNmPersonFull()!=null ? employee.getPerson().getNmPersonFull(): "");
            portalChildRetrieveSO.setCdSupervisorJobTitle(employee.getCdEmployeeClass() != null ? employee.getCdEmployeeClass() : "");
            portalChildRetrieveSO.setCdSupervisorOfficeLoc(employee.getOffice() != null ? employee.getOffice().getIdOffice().toString() : "");
            
            PersonPhone personSupPhone = personPhoneDAO.findPersonPhoneByIdPersonCdPersonPhoneTypeDtPersonPhoneEnd(idSupervisor,
            		CodesTables.CPHNTYP_BS,
                    DateHelper.MAX_JAVA_DATE);
            if (personSupPhone != null) {
            	portalChildRetrieveSO.setSzSupervisorPhone(personSupPhone.getNbrPersonPhone()!=null ? personSupPhone.getNbrPersonPhone() : "");
              }
          }  
        }
      }    
    }
    
    //Find the child's current legal status county
    LegalStatus legalStatus = legalStatusDAO.findCurrentLegalStatusByIdPerson(idPerson);
    
    if (legalStatus != null) {    
      portalChildRetrieveSO.setCdLegalCnty(legalStatus.getCdLegalStatCnty()!=null ? legalStatus.getCdLegalStatCnty() : "");
    }
    
    //Perform logic to find the current approved payment of care if one exists
    String indTempType;
    String indCCI = "";
    
    String plcmtType = portalChildRetrieveSO.getCdPlcmtType();
    Date currentDate = new Date();
    Date dtActualEnd;
    
    if (DateHelper.MAX_JAVA_DATE.equals(portalChildRetrieveSO.getDtPlcmtEnd())){
      dtActualEnd = currentDate;
    }else {
      dtActualEnd = portalChildRetrieveSO.getDtPlcmtEnd();
    }
    
    List<String> conplcmtTypes = new ArrayList<String>();
    conplcmtTypes.add(RESPITE_NIGHT_PLACEMENT);
    conplcmtTypes.add(RESPITE_DAY_PLACEMENT);
    conplcmtTypes.add(CONCURRENT_PLACEMENT);

    List<String> cciPlcmtTypes = new ArrayList<String>();
    cciPlcmtTypes.add(CodesTables.CPLCMTRU_IFH);
    cciPlcmtTypes.add(CodesTables.CPLCMTRU_EMS);
    cciPlcmtTypes.add(CodesTables.CPLCMTRU_GRH);
    cciPlcmtTypes.add(CodesTables.CPLCMTRU_CCI);
    cciPlcmtTypes.add(CodesTables.CPLCMTRU_SFH);
    cciPlcmtTypes.add(CodesTables.CPLCMTRU_ICF);
    
    if (conplcmtTypes.contains(tempType)) {
      indTempType = ArchitectureConstants.Y;
    } 
    else{        
      indTempType = ArchitectureConstants.N ;
    }
    
    if (cciPlcmtTypes.contains(plcmtType)) {
      indCCI= ArchitectureConstants.Y;
    }
    else if (CPA_PLACEMENT_TYPE.equals(plcmtType)){
      indCCI = ArchitectureConstants.N;  
    }
    portalChildRetrieveSO.setCdIndCci(indCCI);
    
    if (cciPlcmtTypes.contains(plcmtType)||CPA_PLACEMENT_TYPE.equals(plcmtType)) {
      
      PaymentOfCare payOfCare = paymentOfCareDAO.findPaymentOfCareByIdPersonByIdStage(idPerson, idStage, dtActualEnd,indCCI,indTempType);
      
      if (payOfCare!= null){
        String rbwoProgram = (payOfCare.getCdRbwoProgram() != null ? payOfCare.getCdRbwoProgram() : "");
        
        portalChildRetrieveSO.setCdRbwoProg(rbwoProgram); 
        portalChildRetrieveSO.setDWaiverRate(payOfCare.getAmtSpecFcRbwoWaiver()!= null ? payOfCare.getAmtSpecFcRbwoWaiver() : 0.00);
        
        if (!("".equals(rbwoProgram))) {
          
          int idContractResource;
          
          if (agency > 0){
            idContractResource = agency;
          } else {
            idContractResource = portalChildRetrieveSO.getUlIdResource();
          }
      
          int ChildAge = DateHelper.getAge(portalChildRetrieveSO.getDtChildBirth(),dtActualEnd);
          portalChildRetrieveSO.setDPerDiem(calculatePerDiem(indCCI,idContractResource,dtActualEnd,ChildAge,rbwoProgram));
        } 
      }
    }
    
    List<Characteristics> personCharacteristicsList = new ArrayList<Characteristics>();
    List<PersonCharacteristicsBean> returnCharacteristics = new ArrayList<PersonCharacteristicsBean>();
    Date today = new Date();
     
    //Get the list of non end-dated person characteristics
    personCharacteristicsList = characteristicsDAO.findCharacteristicsByIdPerson(idPerson, today);
    
    if (personCharacteristicsList!=null && !personCharacteristicsList.isEmpty()){
      
      for (Iterator<Characteristics> it = personCharacteristicsList.iterator() ; it.hasNext();){
        
        Characteristics characteristic = it.next();
        PersonCharacteristicsBean characteristicBean = new PersonCharacteristicsBean();
        characteristicBean.setCdCharCategory(characteristic.getCdCharCategory());
        characteristicBean.setCdCharacteristic(characteristic.getCdCharacteristic());
        returnCharacteristics.add(characteristicBean);  
      }
    }
    
    portalChildRetrieveSO.setChildCharacteristicsList(returnCharacteristics);
    
    //Find all contacts relevant for portal: actual face to face within 60 days plus
    //all (attempted or real) made by agency within the current case.
    
    PaginatedHibernateList<Object[]> contacts = null;
    List<PortalContactBean> contactList = new ArrayList<PortalContactBean>();
    
    contacts = contactDAO.findContactsForPortal(idPerson, idCase, 
                                                portalChildRetrieveSI.getAssignedResources(), 
                                                pageNbr, pageSize);
    
    for (Iterator<Object[]> it = contacts.iterator(); it.hasNext();) {
      
      Object[] objs = it.next();
      
      PortalContactBean portalContactBean = new PortalContactBean();
      
      portalContactBean.setIdContactEvent((Integer) objs[ID_CONTACT_EVENT_LOC]);
      portalContactBean.setIdContactCase(idCase);
      portalContactBean.setIdContactStage((Integer) objs[ID_CONTACT_STAGE_LOC]);
      portalContactBean.setDtContactDate((Date) objs[DT_CONTACT_OCURRRED_LOC]);
      portalContactBean.setCdCntctMethod((String) objs[CD_CONTACT_METHOD_LOC]);
      portalContactBean.setCdStageType((String) objs[CONTACT_CD_STAGE_LOC]);
      portalContactBean.setSzContactAgency((String) objs[NM_AGENCY_NAME_LOC]);
      portalContactBean.setSzContactedBy((String) objs[NM_CONTACTED_BY_LOC]);
      
      List<String> purposes = contactCbxDAO.findContactCbxByIdEventAndCodeType(portalContactBean.getIdContactEvent(),CONTACT_PURPOSES);
      if (purposes.contains(CASE_MANAGER_CHILD_VISIT)){
        portalContactBean.setCdCntctPurpose(CASE_MANAGER_CHILD_VISIT);
      } else {
    	  if (purposes.size()>0){
    	    portalContactBean.setCdCntctPurpose(purposes.get(0)!= null ? purposes.get(0) : "");
          }else{
        	portalContactBean.setCdCntctPurpose("");
          }
      }
      
      portalContactBean.setSzIndAccess(ArchitectureConstants.N);
      
      Integer idPortalUser = (Integer) objs[ID_PORTAL_USER_ENTERED_LOC];
      
      if (idPortalUser != null) {
        
        long sharedResources = portalUserVendorLinkDAO.findCommonPortalUserVendorLinksbyIdUserAndDate(idPortalUser,portalContactBean.getDtContactDate(),portalChildRetrieveSI.getAssignedResources());
        
        if (sharedResources > 0) {
          portalContactBean.setSzIndAccess(ArchitectureConstants.Y);
        }
      }
      if (("".equals(portalContactBean.getSzContactAgency())||(portalContactBean.getSzContactAgency()==null))
                      &&((idPortalUser == null)||(idPortalUser == 0))){
        portalContactBean.setSzContactAgency("DFCS");  
      }
      
      
      contactList.add(portalContactBean);
    }

    
    ArchOutputStruct archOutputStruct = new ArchOutputStruct();
    archOutputStruct.setBMoreDataInd(contacts.getBMoreDataInd());
    
    
    portalChildRetrieveSO.setArchOutputStruct(archOutputStruct);
    portalChildRetrieveSO.setContactsList(contactList);
    
    return portalChildRetrieveSO;
 } 

  //The following helper method performs logic to calculate the per diem based off of the
  //resource and payment of care.
  
  private double calculatePerDiem(String indCci, int idContractResource,Date dtActualEnd,int childAge,String rbwoProgram) {
    
    // find base perdiem
    double baseRate = 0.00;


    if (ArchitectureConstants.Y.equals(indCci)) {

      String service = "60501"+rbwoProgram;
      
      baseRate = contractServiceDAO
                                   .findContractedRateByIdResourceByDateByService(idContractResource,dtActualEnd, service);
    } else if (ArchitectureConstants.N.equals(indCci)) {
           
      String ageRange = "";
      if (childAge <= 5) {
        ageRange = "005";
      } else if (childAge > 5 && childAge < 13) {
        ageRange = "612";
      } else if (childAge >= 13) {
        ageRange = "13P";
      }
      
      String service = "60901"+rbwoProgram;
      
      double contractedRate = contractServiceDAO
                                                .findContractedRateByIdResourceByDateByService(idContractResource,
                                                                                               dtActualEnd, service);
      
      double tableRate = fosterCareRateDAO.findFosterCareRateByAgeDateRangeAndService(ageRange, dtActualEnd , service)
                                          .getAmtFcareRtUnitRate();
      baseRate = tableRate + contractedRate;
    }
   
    return baseRate;    
  }

}