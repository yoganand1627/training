--STGAP0001156 - Interface CPRS: Add addtional tiggers to populate CPRS_OUTBOUND table

/
create or replace TRIGGER CAPS.TIAR_PROFESSIONAL_ASSMT 
AFTER INSERT OR UPDATE
ON CAPS.PROFESSIONAL_ASSMT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  DATA_PRESENT VARCHAR2(1);
  DATA_MODIFIED VARCHAR2(1);
  UPD_FLAG VARCHAR2(1);
  xCD_EVENT_STATUS EVENT.CD_EVENT_STATUS%TYPE;
  xCD_COUNTY VARCHAR2(3);
  xID_CASE CAPS_CASE.ID_CASE%TYPE;
BEGIN
    -- DBMS_OUTPUT.put_line('IN TIAR_PROFESSIONAL_ASSMT');
    UPD_FLAG := 'N';
    DATA_PRESENT := 'N';
    DATA_MODIFIED := 'N';
    IF (:NEW.TXT_PROF_ASSMT_FINDINGS IS NOT NULL OR 
        :NEW.TXT_PROF_ASSMT_CMNTS IS NOT NULL)
    THEN
       DATA_PRESENT := 'Y';
     -- DBMS_OUTPUT.put_line('IN TIAR_PROFESSIONAL_ASSMT - DATA PRESENT');
    END IF;
    IF (INSERTING AND DATA_PRESENT='Y') 
  THEN
      UPD_FLAG := 'Y';
    -- DBMS_OUTPUT.put_line('IN TIAR_PROFESSIONAL_ASSMT - INSERT HAS DATA PRESENT');
    SELECT CD_EVENT_STATUS, ID_CASE
    INTO xCD_EVENT_STATUS, xID_CASE
      FROM EVENT
      WHERE ID_EVENT = :NEW.ID_EVENT;
    ELSIF (UPDATING AND DATA_PRESENT='Y') 
  THEN
      IF ((:NEW.TXT_PROF_ASSMT_FINDINGS IS NOT NULL AND (:OLD.TXT_PROF_ASSMT_FINDINGS IS NULL OR
            :NEW.TXT_PROF_ASSMT_FINDINGS <> :OLD.TXT_PROF_ASSMT_FINDINGS)) OR
          (:NEW.TXT_PROF_ASSMT_CMNTS IS NOT NULL AND (:OLD.TXT_PROF_ASSMT_CMNTS IS NULL OR
            :NEW.TXT_PROF_ASSMT_CMNTS <> :OLD.TXT_PROF_ASSMT_CMNTS))
            )
      THEN
             DATA_MODIFIED := 'Y';
             SELECT CD_EVENT_STATUS, ID_CASE
       INTO xCD_EVENT_STATUS, xID_CASE
             FROM EVENT
             WHERE ID_EVENT = :NEW.ID_EVENT;
        UPD_FLAG := 'Y';
      END IF;
    END IF;
    IF (UPD_FLAG = 'Y')
    THEN
         -- DBMS_OUTPUT.put_line('IN TIAR_PROFESSIONAL_ASSMT - Update CPRS is a go. Case is ' || xID_CASE);
         SELECT CD_CASE_COUNTY
           INTO   xCD_COUNTY
           FROM   CAPS_CASE C
           WHERE  C.ID_CASE = xID_CASE;
           IF (xCD_COUNTY IS NOT NULL)
           THEN
              UPDATE_CASEPLAN (xCD_COUNTY, xID_CASE);  
           END IF;     
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('IN TIAR_PROFESSIONAL_ASSMT, SQLCODE: '||SQLCODE);
      IF SQL%NOTFOUND THEN
          xCD_COUNTY := NULL;
    END IF;
END;
/

/
create or replace TRIGGER CAPS.TIAR_CAPS_CASE 
AFTER UPDATE
ON CAPS.CAPS_CASE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  DATA_PRESENT VARCHAR2(1);
  DATA_MODIFIED VARCHAR2(1);
  UPD_FLAG VARCHAR2(1);
  xCD_EVENT_STATUS EVENT.CD_EVENT_STATUS%TYPE;
  xCD_COUNTY VARCHAR2(3);
  xID_CASE CAPS_CASE.ID_CASE%TYPE;
BEGIN
    -- DBMS_OUTPUT.put_line('IN TIAR_CAPS_CASE');
    UPD_FLAG := 'N';
    DATA_PRESENT := 'N';
    DATA_MODIFIED := 'N';
  
      IF (:NEW.CD_CASE_COUNTY <> :OLD.CD_CASE_COUNTY)
      THEN
        DATA_MODIFIED := 'Y';     
        UPD_FLAG := 'Y';
      END IF;

    IF (UPD_FLAG = 'Y')
    THEN
              UPDATE_CASEPLAN (:NEW.CD_CASE_COUNTY, :NEW.ID_CASE);  
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('IN TIAR_CAPS_CASE, SQLCODE: '||SQLCODE);
      IF SQL%NOTFOUND THEN
          xCD_COUNTY := NULL;
    END IF;
END;
/

/
create or replace TRIGGER CAPS.TIAR_FCCP_FAMILY 
AFTER INSERT OR UPDATE
ON CAPS.FCCP_FAMILY
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  DATA_PRESENT VARCHAR2(1);
  DATA_MODIFIED VARCHAR2(1);
  UPD_FLAG VARCHAR2(1);
  xCD_EVENT_STATUS EVENT.CD_EVENT_STATUS%TYPE;
  xCD_COUNTY VARCHAR2(3);
BEGIN
    UPD_FLAG := 'N';
    DATA_PRESENT := 'N';
    DATA_MODIFIED := 'N';
    IF ((:NEW.DT_ORIG_SUB IS NOT NULL) OR
        (:NEW.CD_PRIM_PERM_PLAN IS NOT NULL) OR
        (:NEW.CD_SECND_PERM_PLAN IS NOT NULL) OR
        (:NEW.CD_PLAN_TYPE IS NOT NULL) OR
        (:NEW.TXT_HARM IS NOT NULL) OR
        (:NEW.TXT_RSNS_PROT IS NOT NULL) OR
        (:NEW.NM_ASSGN_JUDGE IS NOT NULL))
    THEN
       DATA_PRESENT := 'Y';
    END IF;
    IF (INSERTING AND DATA_PRESENT='Y') 
  THEN
      UPD_FLAG := 'Y';
    ELSIF (UPDATING AND DATA_PRESENT='Y') 
  THEN
      IF ((:NEW.DT_ORIG_SUB IS NOT NULL AND (:OLD.DT_ORIG_SUB IS NULL OR
            :NEW.DT_ORIG_SUB <> :OLD.DT_ORIG_SUB)) OR
          (:NEW.CD_PRIM_PERM_PLAN IS NOT NULL  AND (:OLD.CD_PRIM_PERM_PLAN IS NULL OR
            :NEW.CD_PRIM_PERM_PLAN <> :OLD.CD_PRIM_PERM_PLAN)) OR
          (:NEW.CD_SECND_PERM_PLAN IS NOT NULL  AND (:OLD.CD_SECND_PERM_PLAN IS NULL OR
            :NEW.CD_SECND_PERM_PLAN <> :OLD.CD_SECND_PERM_PLAN)) OR
          (:NEW.CD_PLAN_TYPE IS NOT NULL AND (:OLD.CD_PLAN_TYPE IS NULL OR
            :NEW.CD_PLAN_TYPE <> :OLD.CD_PLAN_TYPE))  OR
          (:NEW.TXT_HARM IS NOT NULL AND (:OLD.TXT_HARM IS NULL OR
            :NEW.TXT_HARM <> :OLD.TXT_HARM)) OR
          (:NEW.NM_ASSGN_JUDGE IS NOT NULL AND (:OLD.NM_ASSGN_JUDGE IS NULL OR
            :NEW.NM_ASSGN_JUDGE <> :OLD.NM_ASSGN_JUDGE)) OR
          (:NEW.TXT_RSNS_PROT IS NOT NULL  AND (:OLD.TXT_RSNS_PROT IS NULL OR
            :NEW.TXT_RSNS_PROT <> :OLD.TXT_RSNS_PROT)) )
      THEN
             DATA_MODIFIED := 'Y';
             SELECT CD_EVENT_STATUS
       INTO xCD_EVENT_STATUS
             FROM EVENT
             WHERE ID_EVENT = :NEW.ID_EVENT;
             -- If Plan has not been approved yet, it may not have been sent down to CPRS.
             -- So we will update CPRS with data we have so far on these fields.
             IF (xCD_EVENT_STATUS <> 'APRV')
             THEN
                UPD_FLAG := 'Y';
             END IF;
      END IF;
    END IF;
    IF (UPD_FLAG = 'Y')
    THEN
         SELECT CD_CASE_COUNTY
           INTO   xCD_COUNTY
           FROM   CAPS_CASE C
           WHERE  C.ID_CASE = :NEW.ID_CASE;
           IF (xCD_COUNTY IS NOT NULL)
           THEN
              UPDATE_CASEPLAN (xCD_COUNTY, :NEW.ID_CASE);  
           END IF;     
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('IN TIAR_FCCP_FAMILY, SQLCODE: '||SQLCODE);
      IF SQL%NOTFOUND THEN
          xCD_COUNTY := NULL;
    END IF;
END;
/

/
create or replace TRIGGER CAPS.TIAR_LEGAL_STATUS 
AFTER INSERT OR UPDATE
ON CAPS.LEGAL_STATUS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  DATA_PRESENT VARCHAR2(1);
  DATA_MODIFIED VARCHAR2(1);
  UPD_FLAG VARCHAR2(1);
  xCD_EVENT_STATUS EVENT.CD_EVENT_STATUS%TYPE;
  xCD_COUNTY VARCHAR2(3);
  xID_CASE CAPS_CASE.ID_CASE%TYPE;
BEGIN
    -- DBMS_OUTPUT.put_line('IN TIAR_LEGAL_STATUS');
    UPD_FLAG := 'N';
    DATA_PRESENT := 'N';
    DATA_MODIFIED := 'N';
    IF (:NEW.CD_LEGAL_STAT_STATUS IS NOT NULL)
    THEN
       DATA_PRESENT := 'Y';
     -- DBMS_OUTPUT.put_line('IN TIAR_LEGAL_STATUS - DATA PRESENT');
    END IF;
    IF (INSERTING AND DATA_PRESENT='Y') 
  THEN
      UPD_FLAG := 'Y';
    -- DBMS_OUTPUT.put_line('IN TIAR_LEGAL_STATUS - INSERT HAS DATA PRESENT');
    SELECT CD_EVENT_STATUS, ID_CASE
    INTO xCD_EVENT_STATUS, xID_CASE
      FROM EVENT
      WHERE ID_EVENT = :NEW.ID_LEGAL_STAT_EVENT;
    ELSIF (UPDATING AND DATA_PRESENT='Y') 
  THEN
      IF (:NEW.CD_LEGAL_STAT_STATUS IS NOT NULL AND (:OLD.CD_LEGAL_STAT_STATUS IS NULL OR
            :NEW.CD_LEGAL_STAT_STATUS <> :OLD.CD_LEGAL_STAT_STATUS))
      THEN
             DATA_MODIFIED := 'Y';
             SELECT CD_EVENT_STATUS, ID_CASE
             INTO xCD_EVENT_STATUS, xID_CASE
             FROM EVENT
             WHERE ID_EVENT = :NEW.ID_LEGAL_STAT_EVENT;
             UPD_FLAG := 'Y';
      END IF;
    END IF;
    IF (UPD_FLAG = 'Y')
    THEN
         -- DBMS_OUTPUT.put_line('IN TIAR_LEGAL_STATUS - Update CPRS is a go. Case is ' || xID_CASE);
         SELECT CD_CASE_COUNTY
           INTO   xCD_COUNTY
           FROM   CAPS_CASE C
           WHERE  C.ID_CASE = xID_CASE;
           IF (xCD_COUNTY IS NOT NULL)
           THEN
              UPDATE_CASEPLAN (xCD_COUNTY, xID_CASE);  
           END IF;     
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('IN TIAR_LEGAL_STATUS, SQLCODE: '||SQLCODE);
      IF SQL%NOTFOUND THEN
          xCD_COUNTY := NULL;
    END IF;
END;
/

/
create or replace TRIGGER CAPS.TIAR_PLACEMENT 
AFTER INSERT OR UPDATE
ON CAPS.PLACEMENT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  DATA_PRESENT VARCHAR2(1);
  DATA_MODIFIED VARCHAR2(1);
  UPD_FLAG VARCHAR2(1);
  xCD_EVENT_STATUS EVENT.CD_EVENT_STATUS%TYPE;
  xCD_COUNTY VARCHAR2(3);
  xID_CASE CAPS_CASE.ID_CASE%TYPE;
BEGIN
    -- DBMS_OUTPUT.put_line('IN TIAR_PLACEMENT');
    UPD_FLAG := 'N';
    DATA_PRESENT := 'N';
    DATA_MODIFIED := 'N';
    IF (:NEW.ADDR_PLCMT_CITY IS NOT NULL)
    THEN
       DATA_PRESENT := 'Y';
     -- DBMS_OUTPUT.put_line('IN TIAR_PLACEMENT - DATA PRESENT');
    END IF;
    IF (INSERTING AND DATA_PRESENT='Y') 
  THEN
      UPD_FLAG := 'Y';
    -- DBMS_OUTPUT.put_line('IN TIAR_PLACEMENT - INSERT HAS DATA PRESENT');
    SELECT CD_EVENT_STATUS, ID_CASE
    INTO xCD_EVENT_STATUS, xID_CASE
      FROM EVENT
      WHERE ID_EVENT = :NEW.ID_PLCMT_EVENT;
    ELSIF (UPDATING AND DATA_PRESENT='Y') 
  THEN
      IF ((:NEW.ADDR_PLCMT_CITY IS NOT NULL AND (:OLD.ADDR_PLCMT_CITY IS NULL OR
            :NEW.ADDR_PLCMT_CITY <> :OLD.ADDR_PLCMT_CITY)) OR 
          (:NEW.ADDR_PLCMT_ST IS NOT NULL AND (:OLD.ADDR_PLCMT_ST IS NULL OR
            :NEW.ADDR_PLCMT_ST <> :OLD.ADDR_PLCMT_ST)) OR 
          (:NEW.ADDR_PLCMT_CNTY IS NOT NULL AND (:OLD.ADDR_PLCMT_CNTY IS NULL OR
            :NEW.ADDR_PLCMT_CNTY <> :OLD.ADDR_PLCMT_CNTY)) OR 
          (:NEW.ADDR_PLCMT_ZIP IS NOT NULL AND (:OLD.ADDR_PLCMT_ZIP IS NULL OR
            :NEW.ADDR_PLCMT_ZIP <> :OLD.ADDR_PLCMT_ZIP)) OR 
          (:NEW.ADDR_PLCMT_LN1 IS NOT NULL AND (:OLD.ADDR_PLCMT_LN1 IS NULL OR
            :NEW.ADDR_PLCMT_LN1 <> :OLD.ADDR_PLCMT_LN1)) OR 
          (:NEW.ADDR_PLCMT_LN2 IS NOT NULL AND (:OLD.ADDR_PLCMT_LN2 IS NULL OR
            :NEW.ADDR_PLCMT_LN2 <> :OLD.ADDR_PLCMT_LN2)))
      THEN
             DATA_MODIFIED := 'Y';
             SELECT CD_EVENT_STATUS, ID_CASE
             INTO xCD_EVENT_STATUS, xID_CASE
             FROM EVENT
             WHERE ID_EVENT = :NEW.ID_PLCMT_EVENT;
             UPD_FLAG := 'Y';
      END IF;
    END IF;
    IF (UPD_FLAG = 'Y')
    THEN
         -- DBMS_OUTPUT.put_line('IN TIAR_PLACEMENT - Update CPRS is a go. Case is ' || xID_CASE);
         SELECT CD_CASE_COUNTY
           INTO   xCD_COUNTY
           FROM   CAPS_CASE C
           WHERE  C.ID_CASE = xID_CASE;
           IF (xCD_COUNTY IS NOT NULL)
           THEN
              UPDATE_CASEPLAN (xCD_COUNTY, xID_CASE);  
           END IF;     
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('IN TIAR_PLACEMENT, SQLCODE: '||SQLCODE);
      IF SQL%NOTFOUND THEN
          xCD_COUNTY := NULL;
    END IF;
END;
/

/
create or replace TRIGGER CAPS.TIAR_DILIGENT_SEARCH 
AFTER INSERT OR UPDATE
ON CAPS.DILIGENT_SEARCH
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  DATA_PRESENT VARCHAR2(1);
  DATA_MODIFIED VARCHAR2(1);
  UPD_FLAG VARCHAR2(1);
  xCD_EVENT_STATUS EVENT.CD_EVENT_STATUS%TYPE;
  xCD_COUNTY VARCHAR2(3);
  xID_CASE CAPS_CASE.ID_CASE%TYPE;
BEGIN
    -- DBMS_OUTPUT.put_line('IN TIAR_DILIGENT_SEARCH');
    UPD_FLAG := 'N';
    DATA_PRESENT := 'Y';
    DATA_MODIFIED := 'N';
    IF (INSERTING AND DATA_PRESENT='Y') 
  THEN
      UPD_FLAG := 'Y';
    -- DBMS_OUTPUT.put_line('IN TIAR_DILIGENT_SEARCH - INSERT HAS DATA PRESENT');
    ELSIF (UPDATING AND DATA_PRESENT='Y') 
  THEN
             DATA_MODIFIED := 'Y';
             UPD_FLAG := 'Y';
    END IF;
    IF (UPD_FLAG = 'Y')
    THEN
         -- DBMS_OUTPUT.put_line('IN TIAR_DILIGENT_SEARCH - Update CPRS is a go. Case is ' || xID_CASE);
         SELECT CD_CASE_COUNTY
           INTO   xCD_COUNTY
           FROM   CAPS_CASE C
           WHERE  C.ID_CASE = :NEW.ID_CASE;
           IF (xCD_COUNTY IS NOT NULL)
           THEN
              UPDATE_CASEPLAN (xCD_COUNTY, :NEW.ID_CASE);  
           END IF;     
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('IN TIAR_DILIGENT_SEARCH, SQLCODE: '||SQLCODE);
      IF SQL%NOTFOUND THEN
          xCD_COUNTY := NULL;
    END IF;
END;
/

/
create or replace TRIGGER CAPS.TIAR_ADO_INFO 
AFTER INSERT OR UPDATE
ON CAPS.ADO_INFO
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  DATA_PRESENT VARCHAR2(1);
  DATA_MODIFIED VARCHAR2(1);
  UPD_FLAG VARCHAR2(1);
  xCD_EVENT_STATUS EVENT.CD_EVENT_STATUS%TYPE;
  xCD_COUNTY VARCHAR2(3);
  xID_CASE CAPS_CASE.ID_CASE%TYPE;
BEGIN
    -- DBMS_OUTPUT.put_line('IN TIAR_ADO_INFO');
    UPD_FLAG := 'N';
    DATA_PRESENT := 'Y';
    DATA_MODIFIED := 'N';
    IF (INSERTING AND DATA_PRESENT='Y') 
  THEN
      UPD_FLAG := 'Y';
    -- DBMS_OUTPUT.put_line('IN TIAR_ADO_INFO - INSERT HAS DATA PRESENT');
    SELECT CD_EVENT_STATUS, ID_CASE
    INTO xCD_EVENT_STATUS, xID_CASE
      FROM EVENT
      WHERE ID_EVENT = :NEW.ID_EVENT;
    ELSIF (UPDATING AND DATA_PRESENT='Y') 
  THEN
             DATA_MODIFIED := 'Y';
             SELECT CD_EVENT_STATUS, ID_CASE
             INTO xCD_EVENT_STATUS, xID_CASE
             FROM EVENT
             WHERE ID_EVENT = :NEW.ID_EVENT;
        UPD_FLAG := 'Y';
    END IF;
    IF (UPD_FLAG = 'Y')
    THEN
         -- DBMS_OUTPUT.put_line('IN TIAR_ADO_INFO - Update CPRS is a go. Case is ' || xID_CASE);
         SELECT CD_CASE_COUNTY
           INTO   xCD_COUNTY
           FROM   CAPS_CASE C
           WHERE  C.ID_CASE = xID_CASE;
           IF (xCD_COUNTY IS NOT NULL)
           THEN
              UPDATE_CASEPLAN (xCD_COUNTY, xID_CASE);  
           END IF;     
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('IN TIAR_ADO_INFO, SQLCODE: '||SQLCODE);
      IF SQL%NOTFOUND THEN
          xCD_COUNTY := NULL;
    END IF;
END;
/




insert into caps.schema_version (id_schema_version, application_version, comments)
                        values (430, 'SacwisRev3', 'Release 3.0 - DBCR 11156');

commit;


