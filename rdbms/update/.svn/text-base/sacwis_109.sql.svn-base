
-- Drop Constraint, Rename and Create Table SQL

CREATE TABLE CAPS.CONTACT_VISITATION_NARRATIVE
(
    ID_EVENT             NUMBER(16) NOT NULL,
    DT_LAST_UPDATE       DATE       NOT NULL,
    ID_CASE              NUMBER(16)     NULL,
    NARRATIVE            LONG RAW       NULL,
    ID_DOCUMENT_TEMPLATE NUMBER(16)     NULL,
    CONSTRAINT PK_CONTACT_VISITATION_NARR
    PRIMARY KEY (ID_EVENT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.CONTACT_VISITATION_NARRATIVE IS
'Table used to save data on the Contact Visitation Narrative'
;
COMMENT ON COLUMN CAPS.CONTACT_VISITATION_NARRATIVE.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSBAT
;
GRANT INSERT ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSBAT
;
GRANT SELECT ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSBAT
;
GRANT UPDATE ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSBAT
;
GRANT DELETE ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSON
;
GRANT INSERT ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSON
;
GRANT SELECT ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSON
;
GRANT UPDATE ON CAPS.CONTACT_VISITATION_NARRATIVE TO CAPSON
;
GRANT SELECT ON CAPS.CONTACT_VISITATION_NARRATIVE TO OPERATOR
;
CREATE TABLE CAPS.TEAM_MEET_REVIEW_NARRATIVE
(
    ID_EVENT             NUMBER(16) NOT NULL,
    DT_LAST_UPDATE       DATE       NOT NULL,
    ID_CASE              NUMBER(16)     NULL,
    NARRATIVE            LONG RAW       NULL,
    ID_DOCUMENT_TEMPLATE NUMBER(16)     NULL,
    CONSTRAINT PK_TEAM_MEET_REVIEW_NARR
    PRIMARY KEY (ID_EVENT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.TEAM_MEET_REVIEW_NARRATIVE IS
'Stores the team meeting narrative content'
;
COMMENT ON COLUMN CAPS.TEAM_MEET_REVIEW_NARRATIVE.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSBAT
;
GRANT INSERT ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSBAT
;
GRANT SELECT ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSBAT
;
GRANT UPDATE ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSBAT
;
GRANT DELETE ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSON
;
GRANT INSERT ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSON
;
GRANT SELECT ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSON
;
GRANT UPDATE ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO CAPSON
;
GRANT SELECT ON CAPS.TEAM_MEET_REVIEW_NARRATIVE TO OPERATOR
;

-- Add Referencing Foreign Keys SQL

ALTER TABLE CAPS.CONTACT_VISITATION_NARRATIVE 
    ADD CONSTRAINT FK_CONTACT_VISIT_NARR_EVENT
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.TEAM_MEET_REVIEW_NARRATIVE 
    ADD CONSTRAINT FK_TEAM_MEET_REV_NARR_EVENT
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;

-- Alter Trigger SQL
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_CONTACT_VISITATION_NARR
BEFORE UPDATE
ON CAPS.CONTACT_VISITATION_NARRATIVE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_CONTACT_VISITATION_NARR
BEFORE INSERT
ON CAPS.CONTACT_VISITATION_NARRATIVE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
	SELECT	ID_CASE
	INTO		:new.ID_CASE
	FROM		EVENT
	WHERE		ID_EVENT = :new.ID_EVENT;
EXCEPTION
	WHEN OTHERS THEN
		IF SQL%NOTFOUND THEN
			:new.ID_CASE := NULL;
		END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_TEAM_MEET_REVIEW_NARR
BEFORE UPDATE
ON CAPS.TEAM_MEET_REVIEW_NARRATIVE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_TEAM_MEET_REVIEW_NARR
BEFORE INSERT
ON CAPS.TEAM_MEET_REVIEW_NARRATIVE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
	SELECT	ID_CASE
	INTO		:new.ID_CASE
	FROM		EVENT
	WHERE		ID_EVENT = :new.ID_EVENT;
EXCEPTION
	WHEN OTHERS THEN
		IF SQL%NOTFOUND THEN
			:new.ID_CASE := NULL;
		END IF;
END;
/

-- Synonym Alter SQL

{ call dbms_utility.compile_schema('CAPS') };
{ call dbms_utility.compile_schema('CAPSBAT') };
{ call dbms_utility.compile_schema('CAPSON') };
{ call dbms_utility.compile_schema('OPERATOR') };

-- change 187 R2/R1
update CAPS.MESSAGE set TXT_MESSAGE = 'The Action you have entered requires approval to complete. Press Save and Submit to assign a supervisor.' 
    where NBR_MESSAGE = 60027 and TXT_MESSAGE_NAME = 'MSG_INVALID_SAVE_AND_COMPLETE';

-- change 188 R2 ONLY
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','FTM','FTM', SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','SPM','Safety Plan Meeting', SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','CMM','Community Meeting', SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','MAT','MATCH', SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','ADM','Administrative Review', SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','MDT','MDT', SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','PRM','Permanency Review Meeting', SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(CODE_TYPE,CODE,DECODE, DT_LAST_UPDATE) 
VALUES('CMEETTYP','URM','Utilization Review Meeting', SYSDATE);

-- change 189 R2/R1
INSERT INTO CAPS.CODES_TABLES 
(code_type, code, DECODE, dt_last_update) 
VALUES ('CREGDIV', '012', 'Region 12', SYSDATE);

-- change 193 R2/R1
update caps.codes_tables 
set decode = 'DFCS Office' 
where code = 'PRS' 
and code_type = 'CCNCTLOC';


insert into caps.schema_version (id_schema_version, application_version, comments)
                         values (110, 'SacwisRev2', 'static updates, new tables TEAM_MEET_REVIEW_NARRATIVE and CONTACT_VISITATION_NARRATIVE');
commit;                         
