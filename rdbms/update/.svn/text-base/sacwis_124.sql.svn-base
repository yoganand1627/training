
-- Sequence Alter SQL

CREATE SEQUENCE CAPS.SEQ_SP_SAFETY_FACTORS
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE SEQUENCE CAPS.SEQ_SP_PERSONS_RESPNSBL
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE SEQUENCE CAPS.SEQ_PGM_LCNSRE_TYPS
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE SEQUENCE CAPS.SEQ_RCA_PERSON
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;

-- Dictionary Object Alter SQL


-- Standard Alter Table SQL

ALTER TABLE CAPS.ADO_INFO ADD TXT_PREP_CMNTS VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.ADO_INFO ADD TXT_STATE_ACT VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.ADO_INFO ADD TXT_CNTY_ACT VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.ALLEGATION ADD IND_CRIM_CHRGS_FILED VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.ALLEGATION ADD CD_ALLEGED_MAL_LOCATION VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.ALLEGATION ADD DT_ALLEGED_INCIDENT DATE     NULL
;
ALTER TABLE CAPS.COLLEGE_EXAM ADD DT_EXAM DATE     NULL
;
ALTER TABLE CAPS.CONTACT ADD IND_PERM_CROSS_CNTY_LN VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.DILIGENT_SEARCH ADD ID_PERSON_SEARCH NUMBER(16) NOT NULL
;
ALTER TABLE CAPS.DILIGENT_SEARCH ADD ID_PERSON_DETAIL NUMBER(16) NOT NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD CD_CURR_GRADE VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_CURR_GRADE_LEVEL VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD CD_ATTENDANCE VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD CD_EDHIST_NEEDS_9 VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD CD_EDHIST_NEEDS_10 VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_SCH_REC VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_REC_BOARD VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_SCH_CHG VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD TXT_DSCPL_COMM VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_SPC_EDU_NEED VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_PREV_EDU_NEED VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD TXT_SPC_EDU VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD DT_SST_REF DATE     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD DT_EDU_PLAN DATE     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD NM_SURR_PRNT VARCHAR2(30)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_FSTR_PRNT VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_LEGAL_PRNT VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD TXT_SST VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_EIS VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD IND_PREV_EIS VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.EDUCATIONAL_HISTORY ADD TXT_EIS VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.FAMILY_PLAN ADD CD_OUTCOME VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.FCE_APPLICATION ADD TXT_PRIOR_REMOVAL_MONTHS VARCHAR2(100)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD TXT_MEDCTN_PRESC_PERSON VARCHAR2(80)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD NM_PHARMACY VARCHAR2(30)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD ADDR_PHARM_ST_LN_1 VARCHAR2(30)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD ADDR_PHARM_ST_LN_2 VARCHAR2(30)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD ADDR_PHARM_CITY VARCHAR2(20)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD CD_ADDR_PHARM_STATE VARCHAR2(2)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD ADDR_PHARM_ZIP VARCHAR2(10)     NULL
;
ALTER TABLE CAPS.MEDICATION ADD NBR_PHARM_PHONE VARCHAR2(10)     NULL
;
ALTER TABLE CAPS.PERSON ADD TXT_IDS_NUMBER VARCHAR2(13)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD TXT_IDS_NUMBER VARCHAR2(13)     NULL
;
ALTER TABLE CAPS.PLAN_STEP ADD CD_STEP_CODE VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.PLAN_STEP ADD IND_SELECTED VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PROFESSIONAL_ASSMT ADD IND_OUT_NETWORK_AUTH VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.WTLP_DETAIL ADD CD_PAR_STAT VARCHAR2(3)     NULL
;
ALTER TABLE CAPS.WTLP_DETAIL ADD IND_LIFE_SKILLS VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.WTLP_DETAIL ADD IND_EMP_SVC VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.WTLP_DETAIL ADD IND_HEALTH_SVC VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.WTLP_PLAN ADD YDP_COORD_INFO VARCHAR2(300)     NULL
;
ALTER TABLE CAPS.WTLP_PLAN ADD ID_YDP_COORD NUMBER(16)     NULL
;

-- Drop Referencing Constraint SQL

ALTER TABLE CAPS.ADOPTION_SUBSIDY DROP CONSTRAINT FK_ADPT_SUBSIDY_PLCMT
;
ALTER TABLE CAPS.FCE_REVIEW DROP CONSTRAINT FK_FCE_REVIEW_8
;
ALTER TABLE CAPS.FCE_REVIEW DROP CONSTRAINT FK_FCE_REVIEW_9
;

-- Drop Constraint, Rename and Create Table SQL

ALTER TABLE CAPS.PLACEMENT DROP CONSTRAINT FK_PLCMT_ADULT
;
ALTER TABLE CAPS.PLACEMENT DROP CONSTRAINT FK_PLCMT_AGENCY
;
ALTER TABLE CAPS.PLACEMENT DROP CONSTRAINT FK_PLCMT_CHILD
;
ALTER TABLE CAPS.PLACEMENT DROP CONSTRAINT FK_PLCMT_CONTRACT
;
ALTER TABLE CAPS.PLACEMENT DROP CONSTRAINT FK_PLCMT_FACIL
;
ALTER TABLE CAPS.PLACEMENT DROP PRIMARY KEY DROP INDEX
;
DROP INDEX CAPS.IND_PLACEMENT_1
;
DROP INDEX CAPS.IND_PLACEMENT_3
;
DROP INDEX CAPS.IND_PLACEMENT_5
;
DROP INDEX CAPS.IND_PLACEMENT_2
;
DROP INDEX CAPS.IND_PLACEMENT_8
;
DROP INDEX CAPS.IND_PLACEMENT_7
;
DROP INDEX CAPS.IND_PLACEMENT_4
;
DROP INDEX CAPS.IND_PLACEMENT_6
;
ALTER TABLE CAPS.PLACEMENT RENAME TO PLACEMENT_01192007045055000
;
CREATE TABLE CAPS.PLACEMENT
(
    ID_PLCMT_EVENT           NUMBER(16)    NOT NULL,
    DT_LAST_UPDATE           DATE          NOT NULL,
    ID_PLCMT_CHILD           NUMBER(16)    NOT NULL,
    DT_PLCMT_END             DATE          DEFAULT TO_DATE ('12/31/4712','MM/DD/YYYY') NOT NULL,
    ID_CASE                  NUMBER(16)        NULL,
    ID_PLCMT_ADULT           NUMBER(16)        NULL,
    ID_PLCMT_CONTRACT        NUMBER(16)        NULL,
    ID_RSRC_AGENCY           NUMBER(16)        NULL,
    ID_RSRC_FACIL            NUMBER(16)        NULL,
    ADDR_PLCMT_CITY          VARCHAR2(20)      NULL,
    ADDR_PLCMT_CNTY          VARCHAR2(3)       NULL,
    ADDR_PLCMT_LN1           VARCHAR2(30)      NULL,
    ADDR_PLCMT_LN2           VARCHAR2(30)      NULL,
    ADDR_PLCMT_ST            VARCHAR2(2)       NULL,
    ADDR_PLCMT_ZIP           VARCHAR2(10)      NULL,
    CD_PLCMT_INFO_1          VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_2          VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_3          VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_4          VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_5          VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_6          VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_7          VARCHAR2(3)       NULL,
    CD_PLCMT_LIV_ARR         VARCHAR2(3)       NULL,
    CD_PLCMT_REMOVAL_RSN     VARCHAR2(3)       NULL,
    CD_PLCMT_ACT_PLANNED     VARCHAR2(1)       NULL,
    CD_PLCMT_TYPE            VARCHAR2(4)       NULL,
    CD_PLCMT_SERVICE         VARCHAR2(3)       NULL,
    DT_PLCMT_CAREGVR_DISCUSS DATE              NULL,
    DT_PLCMT_CHILD_DISCUSS   DATE              NULL,
    DT_PLCMT_CHILD_PLAN      DATE              NULL,
    DT_PLCMT_EDUC_LOG        DATE              NULL,
    DT_PLCMT_MEDDEV_HISTORY  DATE              NULL,
    DT_PLCMT_PARENTS_NOTIF   DATE              NULL,
    DT_PLCMT_LAST_PREBILL    DATE          DEFAULT TO_DATE ('12/31/4712','MM/DD/YYYY') NOT NULL,
    DT_PLCMT_PREPLACE_VISIT  DATE              NULL,
    DT_PLCMT_SCHOOL_RECORDS  DATE              NULL,
    DT_PLCMT_START           DATE              NULL,
    IND_PLCMT_CONT_CNTCT     CHAR(1)           NULL,
    IND_PLCMT_EDUC_LOG       CHAR(1)           NULL,
    IND_PLCMT_EMERG          CHAR(1)           NULL,
    IND_PLCMT_NOT_APPLIC     CHAR(1)           NULL,
    IND_PLCMT_SCHOOL_DOC     CHAR(1)           NULL,
    IND_PLCMT_WRITE_HISTORY  CHAR(1)           NULL,
    NBR_PLCMT_PHONE_EXT      VARCHAR2(8)       NULL,
    NBR_PLCMT_TELEPHONE      VARCHAR2(10)      NULL,
    NM_PLCMT_AGENCY          VARCHAR2(30)      NULL,
    NM_PLCMT_CONTACT         VARCHAR2(25)      NULL,
    NM_PLCMT_FACIL           VARCHAR2(30)      NULL,
    NM_PLCMT_PERSON_FULL     VARCHAR2(25)      NULL,
    TXT_PLCMT_ADDR_COMMENT   VARCHAR2(300)     NULL,
    TXT_PLCMT_DISCUSSION     VARCHAR2(240)     NULL,
    TXT_PLCMT_DOCUMENTS      VARCHAR2(240)     NULL,
    TXT_PLCMT_REMOVAL_RSN    VARCHAR2(300)     NULL,
    CD_PLCMT_INFO_8          VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_9          VARCHAR2(3)       NULL,
    DT_PLCMT_PERM_EFF        DATE              NULL,
    CD_PLCMT_INFO_10         VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_11         VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_12         VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_13         VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_14         VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_15         VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_16         VARCHAR2(3)       NULL,
    CD_PLCMT_INFO_17         VARCHAR2(3)       NULL,
    ID_CONTACT_WRKR          NUMBER(16)    NOT NULL,
    CD_CONTACT_METHOD        VARCHAR2(3)   NOT NULL,
    CD_TEMP_TYPE             VARCHAR2(3)       NULL,
    TXT_TEMP_CMNTS           VARCHAR2(300)     NULL,
    IND_WAIVER_REQD          VARCHAR2(1)       NULL,
    CD_WAIVER_TYPE           VARCHAR2(1)       NULL,
    ID_WAIVER                NUMBER(16)        NULL,
    TXT_MATCH                VARCHAR2(3)       NULL,
    CD_BOARDING_CNTY         VARCHAR2(3)       NULL,
    IND_TRIAL_HOME           VARCHAR2(1)       NULL,
    DT_TRIAL_CO_START        DATE              NULL,
    DT_TRIAL_CO_END          DATE              NULL,
    CD_ADO_TYPE              VARCHAR2(3)       NULL,
    IND_PLCMT_SAFE           VARCHAR2(1)       NULL,
    IND_PLCMT_RESTR          VARCHAR2(1)       NULL,
    IND_PLCMT_FAM            VARCHAR2(1)       NULL,
    IND_PLCMT_APPR           VARCHAR2(1)       NULL,
    IND_PLCMT_PROX           VARCHAR2(1)       NULL,
    IND_PLCMT_SCH_DIST       VARCHAR2(1)       NULL,
    IND_PLCMT_CASE_PLAN      VARCHAR2(1)       NULL,
    TXT_PLCMT_CHECKLIST      VARCHAR2(300)     NULL,
    IND_PLCMT_TRAUMA         VARCHAR2(1)       NULL,
    TXT_PLCMT_TRAUMA         VARCHAR2(300)     NULL,
    IND_PLCMT_SIBLING        VARCHAR2(1)       NULL,
    NBR_PLCMT_SIB_CARE       NUMBER(3)         NULL,
    NBR_PLCMT_SIB_CHILD      NUMBER(3)         NULL,
    CD_PLCMT_SIBLING         VARCHAR2(3)       NULL,
    TXT_PLCMT_SIBLING        VARCHAR2(300)     NULL,
    IND_PLCMT_CCFA           VARCHAR2(1)       NULL,
    CD_PLCMT_CCFA            VARCHAR2(3)       NULL,
    TXT_PLCMT_CCFA           VARCHAR2(300)     NULL,
    IND_SPVSN                VARCHAR2(1)       NULL,
    TXT_SPVSN                VARCHAR2(300)     NULL,
    DT_PSY_INFO              DATE              NULL,
    TXT_PSY_INFO_CONTACT     VARCHAR2(50)      NULL,
    DT_PSY_CP                DATE              NULL,
    TXT_PSY_CP_CONTACT       VARCHAR2(50)      NULL,
    TXT_MED_INFO_CONTACT     VARCHAR2(50)      NULL,
    DT_MED_CP                DATE              NULL,
    TXT_MED_CP_CONTACT       VARCHAR2(50)      NULL,
    TXT_EDU_INFO_CONTACT     VARCHAR2(50)      NULL,
    TXT_EDU_CP_CONTACT       VARCHAR2(50)      NULL,
    TXT_DOC_CMNTS            VARCHAR2(300)     NULL,
    IND_AFCARS_DISCHARGE     VARCHAR2(1)       NULL,
    DT_AFCARS_DISCHARGE      DATE              NULL,
    CD_AFCARS_DISCHARGE      VARCHAR2(2)       NULL
)
TABLESPACE DATA01
NOLOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 3M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON COLUMN CAPS.PLACEMENT.CD_BOARDING_CNTY IS
'County Code'
;
GRANT DELETE ON CAPS.PLACEMENT TO CAPSBAT
;
GRANT INSERT ON CAPS.PLACEMENT TO CAPSBAT
;
GRANT SELECT ON CAPS.PLACEMENT TO CAPSBAT
;
GRANT UPDATE ON CAPS.PLACEMENT TO CAPSBAT
;
GRANT DELETE ON CAPS.PLACEMENT TO CAPSON
;
GRANT INSERT ON CAPS.PLACEMENT TO CAPSON
;
GRANT SELECT ON CAPS.PLACEMENT TO CAPSON
;
GRANT UPDATE ON CAPS.PLACEMENT TO CAPSON
;
GRANT SELECT ON CAPS.PLACEMENT TO OPERATOR
;
CREATE TABLE CAPS.DIVERSION_CONCLUSION
(
    ID_EVENT       NUMBER(16)  NOT NULL,
    ID_STAGE       NUMBER(16)  NOT NULL,
    ID_CASE        NUMBER(16)  NOT NULL,
    DT_LAST_UPDATE DATE        NOT NULL,
    DT_TASKS_COMP  DATE            NULL,
    CD_DIV_DSPSN   VARCHAR2(3)     NULL,
    DT_RESPONSE    DATE            NULL,
    CONSTRAINT PK_DIVERSION_CONCLUSION
    PRIMARY KEY (ID_EVENT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.DIVERSION_CONCLUSION IS
'The DIVERSION_CONCLUSION table captures concluding information regarding the Diversion stage.'
;
COMMENT ON COLUMN CAPS.DIVERSION_CONCLUSION.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.DIVERSION_CONCLUSION TO CAPSBAT
;
GRANT INSERT ON CAPS.DIVERSION_CONCLUSION TO CAPSBAT
;
GRANT SELECT ON CAPS.DIVERSION_CONCLUSION TO CAPSBAT
;
GRANT UPDATE ON CAPS.DIVERSION_CONCLUSION TO CAPSBAT
;
GRANT DELETE ON CAPS.DIVERSION_CONCLUSION TO CAPSON
;
GRANT INSERT ON CAPS.DIVERSION_CONCLUSION TO CAPSON
;
GRANT SELECT ON CAPS.DIVERSION_CONCLUSION TO CAPSON
;
GRANT UPDATE ON CAPS.DIVERSION_CONCLUSION TO CAPSON
;
GRANT SELECT ON CAPS.DIVERSION_CONCLUSION TO OPERATOR
;
CREATE TABLE CAPS.PAYMENT_OF_CARE
(
    ID_POC_EVENT       NUMBER(16)    NOT NULL,
    DT_LAST_UPDATE     DATE          NOT NULL,
    CD_POC_TYPE        VARCHAR2(3)       NULL,
    DT_START           DATE          NOT NULL,
    DT_END             DATE              NULL,
    DT_TERMINATE       DATE              NULL,
    NBR_PER_DIEM       NUMBER(6)         NULL,
    NBR_SPEC_PER_DIEM  NUMBER(4)         NULL,
    IND_CONCURRENT     VARCHAR2(1)       NULL,
    TXT_CONCUR_P_DIEM  VARCHAR2(300)     NULL,
    TXT_SPEC_PER_DIEM  VARCHAR2(300)     NULL,
    IND_RBWO_TYPE      VARCHAR2(1)       NULL,
    CD_RBWO            VARCHAR2(2)       NULL,
    DT_PACKET_COMP     DATE              NULL,
    ID_CM_PACKET_COMP  NUMBER(16)        NULL,
    DT_PACKET_APRV     DATE              NULL,
    ID_SPV_PACKET_APRV NUMBER(16)        NULL,
    DT_PACKET_SENT     DATE              NULL,
    DT_STAFF_COMPL     DATE              NULL,
    DT_SO_RESP         DATE              NULL,
    ID_SO_APRV         NUMBER(16)        NULL,
    DT_RBWO_APRV       DATE              NULL,
    ID_RBWO_REV_APRV   NUMBER(16)        NULL,
    DT_RBWO_SUM_REV    DATE              NULL,
    ID_RESOURCE        NUMBER(16)    NOT NULL,
    IND_RCS_TYPE       VARCHAR2(1)       NULL,
    DT_AGREEMENT       DATE              NULL,
    DT_ANN_REVIEW      DATE              NULL,
    DT_COURT           DATE              NULL,
    IND_INCOME         VARCHAR2(1)       NULL,
    IND_TERMINATE      VARCHAR2(1)       NULL,
    IND_SUSPEND        VARCHAR2(1)       NULL,
    TXT_TERMINATE      VARCHAR2(300)     NULL,
    CONSTRAINT PK_PAYMENT_OF_CARE
    PRIMARY KEY (ID_POC_EVENT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.PAYMENT_OF_CARE IS
'Records details of a client''s payment of care details for paid placements'
;
COMMENT ON COLUMN CAPS.PAYMENT_OF_CARE.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.PAYMENT_OF_CARE TO CAPSBAT
;
GRANT INSERT ON CAPS.PAYMENT_OF_CARE TO CAPSBAT
;
GRANT SELECT ON CAPS.PAYMENT_OF_CARE TO CAPSBAT
;
GRANT UPDATE ON CAPS.PAYMENT_OF_CARE TO CAPSBAT
;
GRANT DELETE ON CAPS.PAYMENT_OF_CARE TO CAPSON
;
GRANT INSERT ON CAPS.PAYMENT_OF_CARE TO CAPSON
;
GRANT SELECT ON CAPS.PAYMENT_OF_CARE TO CAPSON
;
GRANT UPDATE ON CAPS.PAYMENT_OF_CARE TO CAPSON
;
GRANT SELECT ON CAPS.PAYMENT_OF_CARE TO OPERATOR
;
CREATE TABLE CAPS.PGM_LCNSRE_TYPS
(
    ID_LCNSRE_TYPS NUMBER(16)  NOT NULL,
    DT_LAST_UPDATE DATE        NOT NULL,
    ID_FLOC        NUMBER(16)  NOT NULL,
    CD_PGM_TYPE    VARCHAR2(3)     NULL,
    CONSTRAINT PK_PGM_LCNSRE_TYPS
    PRIMARY KEY (ID_LCNSRE_TYPS)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.PGM_LCNSRE_TYPS IS
'Stores Program licensure Types for Facility Detail.'
;
COMMENT ON COLUMN CAPS.PGM_LCNSRE_TYPS.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.PGM_LCNSRE_TYPS TO CAPSBAT
;
GRANT INSERT ON CAPS.PGM_LCNSRE_TYPS TO CAPSBAT
;
GRANT SELECT ON CAPS.PGM_LCNSRE_TYPS TO CAPSBAT
;
GRANT UPDATE ON CAPS.PGM_LCNSRE_TYPS TO CAPSBAT
;
GRANT DELETE ON CAPS.PGM_LCNSRE_TYPS TO CAPSON
;
GRANT INSERT ON CAPS.PGM_LCNSRE_TYPS TO CAPSON
;
GRANT SELECT ON CAPS.PGM_LCNSRE_TYPS TO CAPSON
;
GRANT UPDATE ON CAPS.PGM_LCNSRE_TYPS TO CAPSON
;
GRANT SELECT ON CAPS.PGM_LCNSRE_TYPS TO OPERATOR
;
CREATE TABLE CAPS.RELATIVE_CARE_ASSMT
(
    ID_RCA_EVENT     NUMBER(16)    NOT NULL,
    DT_LAST_UPDATE   DATE          NOT NULL,
    CD_ASSESSOR_TYPE VARCHAR2(1)   NOT NULL,
    CD_ASSMT_TYPE    VARCHAR2(1)   NOT NULL,
    CD_STATE         VARCHAR2(2)       NULL,
    CD_COUNTY        VARCHAR2(3)       NULL,
    ID_RESOURCE      NUMBER(16)        NULL,
    DT_REFERRAL      DATE              NULL,
    DT_DUE           DATE              NULL,
    DT_SCHED         DATE              NULL,
    DT_ACTUAL        DATE              NULL,
    DT_COMPLETE      DATE              NULL,
    DT_RECEIVED      DATE              NULL,
    CD_ASSMT_RESULTS VARCHAR2(3)       NULL,
    DT_DECISION      DATE              NULL,
    IND_DISCUSSION   VARCHAR2(1)       NULL,
    DT_DISCUSSION    DATE              NULL,
    IND_ACCEPT       VARCHAR2(1)       NULL,
    CD_SUPPORT       VARCHAR2(3)       NULL,
    DT_RD_REFRRAL    DATE              NULL,
    DT_AGREE_SIGNED  DATE              NULL,
    TXT_COMMENTS     VARCHAR2(300)     NULL,
    CONSTRAINT PK_RELATIVE_CARE_ASSMT
    PRIMARY KEY (ID_RCA_EVENT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.RELATIVE_CARE_ASSMT IS
'Stores information related to a relative care assessment on a family for potential or ongoing relative placement of child.'
;
COMMENT ON COLUMN CAPS.RELATIVE_CARE_ASSMT.DT_LAST_UPDATE IS
'Date of insert or last update'
;
COMMENT ON COLUMN CAPS.RELATIVE_CARE_ASSMT.CD_COUNTY IS
'County Code'
;
GRANT DELETE ON CAPS.RELATIVE_CARE_ASSMT TO CAPSBAT
;
GRANT INSERT ON CAPS.RELATIVE_CARE_ASSMT TO CAPSBAT
;
GRANT SELECT ON CAPS.RELATIVE_CARE_ASSMT TO CAPSBAT
;
GRANT UPDATE ON CAPS.RELATIVE_CARE_ASSMT TO CAPSBAT
;
GRANT DELETE ON CAPS.RELATIVE_CARE_ASSMT TO CAPSON
;
GRANT INSERT ON CAPS.RELATIVE_CARE_ASSMT TO CAPSON
;
GRANT SELECT ON CAPS.RELATIVE_CARE_ASSMT TO CAPSON
;
GRANT UPDATE ON CAPS.RELATIVE_CARE_ASSMT TO CAPSON
;
GRANT SELECT ON CAPS.RELATIVE_CARE_ASSMT TO OPERATOR
;
CREATE TABLE CAPS.RELATIVE_CARE_ASSMT_PERSON
(
    ID_RCA_PERSON  NUMBER(16)  NOT NULL,
    DT_LAST_UPDATE DATE        NOT NULL,
    ID_RCA_EVENT   NUMBER(16)  NOT NULL,
    ID_PERSON      NUMBER(16)  NOT NULL,
    CD_PERSON_TYPE VARCHAR2(3)     NULL,
    CONSTRAINT PK_REL_CARE_ASS_PERSON
    PRIMARY KEY (ID_RCA_PERSON)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.RELATIVE_CARE_ASSMT_PERSON IS
'Records persons in a home where a Relative Care Assessment takes place'
;
COMMENT ON COLUMN CAPS.RELATIVE_CARE_ASSMT_PERSON.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSBAT
;
GRANT INSERT ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSBAT
;
GRANT SELECT ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSBAT
;
GRANT UPDATE ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSBAT
;
GRANT DELETE ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSON
;
GRANT INSERT ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSON
;
GRANT SELECT ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSON
;
GRANT UPDATE ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO CAPSON
;
GRANT SELECT ON CAPS.RELATIVE_CARE_ASSMT_PERSON TO OPERATOR
;
CREATE TABLE CAPS.SP_PERSONS_RESPNSBL
(
    ID_SP_PERS_RESPNSBL NUMBER(16) NOT NULL,
    ID_SFTY_FCTR        NUMBER(16) NOT NULL,
    DT_LAST_UPDATE      DATE       NOT NULL,
    ID_PERSON           NUMBER(16) NOT NULL,
    CONSTRAINT PK_SP_PERSONS_RESPNSBL
    PRIMARY KEY (ID_SP_PERS_RESPNSBL)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.SP_PERSONS_RESPNSBL IS
'The SP_PERSONS_RESPNSBL table retains information regarding the persons responsible for the actions associated with the safety factors.'
;
COMMENT ON COLUMN CAPS.SP_PERSONS_RESPNSBL.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.SP_PERSONS_RESPNSBL TO CAPSBAT
;
GRANT INSERT ON CAPS.SP_PERSONS_RESPNSBL TO CAPSBAT
;
GRANT SELECT ON CAPS.SP_PERSONS_RESPNSBL TO CAPSBAT
;
GRANT UPDATE ON CAPS.SP_PERSONS_RESPNSBL TO CAPSBAT
;
GRANT DELETE ON CAPS.SP_PERSONS_RESPNSBL TO CAPSON
;
GRANT INSERT ON CAPS.SP_PERSONS_RESPNSBL TO CAPSON
;
GRANT SELECT ON CAPS.SP_PERSONS_RESPNSBL TO CAPSON
;
GRANT UPDATE ON CAPS.SP_PERSONS_RESPNSBL TO CAPSON
;
GRANT SELECT ON CAPS.SP_PERSONS_RESPNSBL TO OPERATOR
;
CREATE TABLE CAPS.SP_SAFETY_FACTORS
(
    ID_SFTY_FCTR             NUMBER(16)    NOT NULL,
    ID_EVENT                 NUMBER(16)    NOT NULL,
    DT_LAST_UPDATE           DATE          NOT NULL,
    TXT_SFTY_FCTR_DESC       VARCHAR2(80)      NULL,
    TXT_SFTY_FCTR_MITIGATE   VARCHAR2(80)      NULL,
    DT_COMPLTD_BY            DATE              NULL,
    TXT_DESC_ACTIONS         VARCHAR2(300)     NULL,
    TXT_SFTY_FCTR_COMMENTS   VARCHAR2(300)     NULL,
    NM_FIRST_OTHR_RESP       VARCHAR2(12)      NULL,
    NM_MIDDLE_OTHR_RESP      VARCHAR2(12)      NULL,
    NM_LAST_OTHR_RESP        VARCHAR2(22)      NULL,
    IND_ADDL_PERS_RESP_EXIST VARCHAR2(1)       NULL,
    CONSTRAINT PK_SP_SAFETY_FACTORS
    PRIMARY KEY (ID_SFTY_FCTR)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.SP_SAFETY_FACTORS IS
'The SP_SAFETY_FACTORS table retains information regarding the safety factors associated with a safety plan documented during the investigation stage.'
;
COMMENT ON COLUMN CAPS.SP_SAFETY_FACTORS.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.SP_SAFETY_FACTORS TO CAPSBAT
;
GRANT INSERT ON CAPS.SP_SAFETY_FACTORS TO CAPSBAT
;
GRANT SELECT ON CAPS.SP_SAFETY_FACTORS TO CAPSBAT
;
GRANT UPDATE ON CAPS.SP_SAFETY_FACTORS TO CAPSBAT
;
GRANT DELETE ON CAPS.SP_SAFETY_FACTORS TO CAPSON
;
GRANT INSERT ON CAPS.SP_SAFETY_FACTORS TO CAPSON
;
GRANT SELECT ON CAPS.SP_SAFETY_FACTORS TO CAPSON
;
GRANT UPDATE ON CAPS.SP_SAFETY_FACTORS TO CAPSON
;
GRANT SELECT ON CAPS.SP_SAFETY_FACTORS TO OPERATOR
;
CREATE TABLE CAPS.SP_SAFETY_PLAN
(
    ID_EVENT            NUMBER(16)  NOT NULL,
    ID_CASE             NUMBER(16)  NOT NULL,
    DT_LAST_UPDATE      DATE        NOT NULL,
    DT_DISC_WITH_CRTKR  DATE            NULL,
    IND_CRTKR_AGREES_SP VARCHAR2(1)     NULL,
    CONSTRAINT PK_SP_SAFETY_PLAN
    PRIMARY KEY (ID_EVENT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.SP_SAFETY_PLAN IS
'The SP_SAFETY_PLAN table retains basic information regarding the safety plan documented during the investigation stage.'
;
COMMENT ON COLUMN CAPS.SP_SAFETY_PLAN.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.SP_SAFETY_PLAN TO CAPSBAT
;
GRANT INSERT ON CAPS.SP_SAFETY_PLAN TO CAPSBAT
;
GRANT SELECT ON CAPS.SP_SAFETY_PLAN TO CAPSBAT
;
GRANT UPDATE ON CAPS.SP_SAFETY_PLAN TO CAPSBAT
;
GRANT DELETE ON CAPS.SP_SAFETY_PLAN TO CAPSON
;
GRANT INSERT ON CAPS.SP_SAFETY_PLAN TO CAPSON
;
GRANT SELECT ON CAPS.SP_SAFETY_PLAN TO CAPSON
;
GRANT UPDATE ON CAPS.SP_SAFETY_PLAN TO CAPSON
;
GRANT SELECT ON CAPS.SP_SAFETY_PLAN TO OPERATOR
;

-- Insert Data SQL

ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.PLACEMENT(
                           ID_PLCMT_EVENT,
                           DT_LAST_UPDATE,
                           ID_PLCMT_CHILD,
                           DT_PLCMT_END,
                           ID_CASE,
                           ID_PLCMT_ADULT,
                           ID_PLCMT_CONTRACT,
                           ID_RSRC_AGENCY,
                           ID_RSRC_FACIL,
                           ADDR_PLCMT_CITY,
                           ADDR_PLCMT_CNTY,
                           ADDR_PLCMT_LN1,
                           ADDR_PLCMT_LN2,
                           ADDR_PLCMT_ST,
                           ADDR_PLCMT_ZIP,
                           CD_PLCMT_INFO_1,
                           CD_PLCMT_INFO_2,
                           CD_PLCMT_INFO_3,
                           CD_PLCMT_INFO_4,
                           CD_PLCMT_INFO_5,
                           CD_PLCMT_INFO_6,
                           CD_PLCMT_INFO_7,
                           CD_PLCMT_LIV_ARR,
                           CD_PLCMT_REMOVAL_RSN,
                           CD_PLCMT_ACT_PLANNED,
                           CD_PLCMT_TYPE,
                           CD_PLCMT_SERVICE,
                           DT_PLCMT_CAREGVR_DISCUSS,
                           DT_PLCMT_CHILD_DISCUSS,
                           DT_PLCMT_CHILD_PLAN,
                           DT_PLCMT_EDUC_LOG,
                           DT_PLCMT_MEDDEV_HISTORY,
                           DT_PLCMT_PARENTS_NOTIF,
                           DT_PLCMT_LAST_PREBILL,
                           DT_PLCMT_PREPLACE_VISIT,
                           DT_PLCMT_SCHOOL_RECORDS,
                           DT_PLCMT_START,
                           IND_PLCMT_CONT_CNTCT,
                           IND_PLCMT_EDUC_LOG,
                           IND_PLCMT_EMERG,
                           IND_PLCMT_NOT_APPLIC,
                           IND_PLCMT_SCHOOL_DOC,
                           IND_PLCMT_WRITE_HISTORY,
                           NBR_PLCMT_PHONE_EXT,
                           NBR_PLCMT_TELEPHONE,
                           NM_PLCMT_AGENCY,
                           NM_PLCMT_CONTACT,
                           NM_PLCMT_FACIL,
                           NM_PLCMT_PERSON_FULL,
                           TXT_PLCMT_ADDR_COMMENT,
                           TXT_PLCMT_DISCUSSION,
                           TXT_PLCMT_DOCUMENTS,
                           TXT_PLCMT_REMOVAL_RSN,
                           CD_PLCMT_INFO_8,
                           CD_PLCMT_INFO_9,
                           DT_PLCMT_PERM_EFF,
                           CD_PLCMT_INFO_10,
                           CD_PLCMT_INFO_11,
                           CD_PLCMT_INFO_12,
                           CD_PLCMT_INFO_13,
                           CD_PLCMT_INFO_14,
                           CD_PLCMT_INFO_15,
                           CD_PLCMT_INFO_16,
                           CD_PLCMT_INFO_17,
                           ID_CONTACT_WRKR,
                           CD_CONTACT_METHOD,
                           CD_TEMP_TYPE,
                           TXT_TEMP_CMNTS,
                           IND_WAIVER_REQD,
                           CD_WAIVER_TYPE,
                           ID_WAIVER,
                           TXT_MATCH,
                           CD_BOARDING_CNTY,
                           IND_TRIAL_HOME,
                           DT_TRIAL_CO_START,
                           DT_TRIAL_CO_END,
                           CD_ADO_TYPE,
                           IND_PLCMT_SAFE,
                           IND_PLCMT_RESTR,
                           IND_PLCMT_FAM,
                           IND_PLCMT_APPR,
                           IND_PLCMT_PROX,
                           IND_PLCMT_SCH_DIST,
                           IND_PLCMT_CASE_PLAN,
                           TXT_PLCMT_CHECKLIST,
                           IND_PLCMT_TRAUMA,
                           TXT_PLCMT_TRAUMA,
                           IND_PLCMT_SIBLING,
                           NBR_PLCMT_SIB_CARE,
                           NBR_PLCMT_SIB_CHILD,
                           CD_PLCMT_SIBLING,
                           TXT_PLCMT_SIBLING,
                           IND_PLCMT_CCFA,
                           CD_PLCMT_CCFA,
                           TXT_PLCMT_CCFA,
                           IND_SPVSN,
                           TXT_SPVSN,
                           DT_PSY_INFO,
                           TXT_PSY_INFO_CONTACT,
                           DT_PSY_CP,
                           TXT_PSY_CP_CONTACT,
                           TXT_MED_INFO_CONTACT,
                           DT_MED_CP,
                           TXT_MED_CP_CONTACT,
                           TXT_EDU_INFO_CONTACT,
                           TXT_EDU_CP_CONTACT,
                           TXT_DOC_CMNTS,
                           IND_AFCARS_DISCHARGE,
                           DT_AFCARS_DISCHARGE,
                           CD_AFCARS_DISCHARGE
                          )
                    SELECT 
                           ID_PLCMT_EVENT,
                           DT_LAST_UPDATE,
                           ID_PLCMT_CHILD,
                           DT_PLCMT_END,
                           ID_CASE,
                           ID_PLCMT_ADULT,
                           ID_PLCMT_CONTRACT,
                           ID_RSRC_AGENCY,
                           ID_RSRC_FACIL,
                           ADDR_PLCMT_CITY,
                           ADDR_PLCMT_CNTY,
                           ADDR_PLCMT_LN1,
                           ADDR_PLCMT_LN2,
                           ADDR_PLCMT_ST,
                           ADDR_PLCMT_ZIP,
                           CD_PLCMT_INFO_1,
                           CD_PLCMT_INFO_2,
                           CD_PLCMT_INFO_3,
                           CD_PLCMT_INFO_4,
                           CD_PLCMT_INFO_5,
                           CD_PLCMT_INFO_6,
                           CD_PLCMT_INFO_7,
                           CD_PLCMT_LIV_ARR,
                           CD_PLCMT_REMOVAL_RSN,
                           CD_PLCMT_ACT_PLANNED,
                           CD_PLCMT_TYPE,
                           CD_PLCMT_SERVICE,
                           DT_PLCMT_CAREGVR_DISCUSS,
                           DT_PLCMT_CHILD_DISCUSS,
                           DT_PLCMT_CHILD_PLAN,
                           DT_PLCMT_EDUC_LOG,
                           DT_PLCMT_MEDDEV_HISTORY,
                           DT_PLCMT_PARENTS_NOTIF,
                           DT_PLCMT_LAST_PREBILL,
                           DT_PLCMT_PREPLACE_VISIT,
                           DT_PLCMT_SCHOOL_RECORDS,
                           DT_PLCMT_START,
                           IND_PLCMT_CONT_CNTCT,
                           IND_PLCMT_EDUC_LOG,
                           IND_PLCMT_EMERG,
                           IND_PLCMT_NOT_APPLIC,
                           IND_PLCMT_SCHOOL_DOC,
                           IND_PLCMT_WRITE_HISTORY,
                           NBR_PLCMT_PHONE_EXT,
                           NBR_PLCMT_TELEPHONE,
                           NM_PLCMT_AGENCY,
                           NM_PLCMT_CONTACT,
                           NM_PLCMT_FACIL,
                           NM_PLCMT_PERSON_FULL,
                           TXT_PLCMT_ADDR_COMMENT,
                           TXT_PLCMT_DISCUSSION,
                           TXT_PLCMT_DOCUMENTS,
                           TXT_PLCMT_REMOVAL_RSN,
                           CD_PLCMT_INFO_8,
                           CD_PLCMT_INFO_9,
                           DT_PLCMT_PERM_EFF,
                           CD_PLCMT_INFO_10,
                           CD_PLCMT_INFO_11,
                           CD_PLCMT_INFO_12,
                           CD_PLCMT_INFO_13,
                           CD_PLCMT_INFO_14,
                           CD_PLCMT_INFO_15,
                           CD_PLCMT_INFO_16,
                           CD_PLCMT_INFO_17,
                           1,
                           ' ',
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL,
                           NULL
                      FROM CAPS.PLACEMENT_01192007045055000 
;
COMMIT
;
ALTER TABLE CAPS.PLACEMENT LOGGING
;

-- Add Constraint SQL

ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT PK_PLACEMENT
PRIMARY KEY (ID_PLCMT_EVENT)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;

-- Add Indexes SQL

CREATE INDEX CAPS.IND_PLACEMENT_1
    ON CAPS.PLACEMENT(ID_PLCMT_CHILD)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_PLACEMENT_3
    ON CAPS.PLACEMENT(ID_PLCMT_ADULT)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_PLACEMENT_5
    ON CAPS.PLACEMENT(ID_PLCMT_CONTRACT)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_PLACEMENT_2
    ON CAPS.PLACEMENT(ID_RSRC_FACIL)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_PLACEMENT_8
    ON CAPS.PLACEMENT(DT_PLCMT_END,CD_PLCMT_TYPE,CD_PLCMT_ACT_PLANNED,ID_PLCMT_CHILD)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_PLACEMENT_7
    ON CAPS.PLACEMENT(DT_PLCMT_LAST_PREBILL)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_PLACEMENT_4
    ON CAPS.PLACEMENT(ID_CASE)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_PLACEMENT_6
    ON CAPS.PLACEMENT(ID_RSRC_AGENCY)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;

-- Add Dependencies SQL
/
DROP TRIGGER CAPS.TIBR_PLACEMENT
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_PLACEMENT
BEFORE INSERT
ON CAPS.PLACEMENT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
    dummy       NUMBER;
BEGIN
    :new.DT_LAST_UPDATE := SYSDATE;
        -- Mike Bui: 10/06/95: as requested by SUBCARE TCL
    IF (:new.DT_PLCMT_END IS NULL) THEN
                :new.DT_PLCMT_END := TO_DATE ('12/31/4712','MM/DD/YYYY');
    END IF;
    BEGIN
        SELECT  ID_CASE
        INTO        :new.ID_CASE
        FROM        EVENT
        WHERE       ID_EVENT = :new.ID_PLCMT_EVENT;
    EXCEPTION
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
                :new.ID_CASE := NULL;
            END IF;
    END;
END;
/
/
DROP TRIGGER CAPS.TUBR_PLACEMENT
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_PLACEMENT
BEFORE UPDATE
ON CAPS.PLACEMENT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    :new.DT_LAST_UPDATE := SYSDATE;
    -- 08/26/96 MED  Write a request for the entire original period
    -- if the start date changes to a date greater than the
    -- original....per Kathy Campbell.  Write request for the entire
    -- period if the facility changes.
    -- 01/06/97 Tyler Chessman TLC
    -- We only want to write a request spanning from the
    -- old start date to the new start date when the start date changes
    -- to a date greater than the original.
    -- We only want to write a request spanning from the old start date
    -- to the lesser of the current date or the placement end date when
    -- key data changes.
    -- We also want to write multiple triggers if the start date, end
    -- date, and/or key data changes simultaneously.
    IF nvl(:new.IND_PLCMT_WRITE_HISTORY,'N') = 'Y' THEN
        IF (TO_DATE(:new.DT_PLCMT_START,'MM/DD/YYYY') >
            TO_DATE(:old.DT_PLCMT_START,'MM/DD/YYYY')) THEN
            insert into ADJUSTMENT_REQUEST (
                ID_ADJ_REQ,
                ID_ADJ_REQ_EVENT,
                DT_ADJ_REQ_START,
                DT_ADJ_REQ_END,
                ID_ADJ_REQ_PERSON
            ) VALUES (
                0,
                :old.ID_PLCMT_EVENT,
                TO_DATE(:old.DT_PLCMT_START,'MM/DD/YYYY'),
                TO_DATE(:new.DT_PLCMT_START,'MM/DD/YYYY'),
                :old.ID_PLCMT_CHILD
            );
        END IF;
        IF (:new.ID_RSRC_FACIL != :old.ID_RSRC_FACIL
        OR  :new.CD_PLCMT_TYPE != :old.CD_PLCMT_TYPE) THEN
            insert into ADJUSTMENT_REQUEST (
                ID_ADJ_REQ,
                ID_ADJ_REQ_EVENT,
                DT_ADJ_REQ_START,
                DT_ADJ_REQ_END,
                ID_ADJ_REQ_PERSON
            ) VALUES (
                0,
                :old.ID_PLCMT_EVENT,
                TO_DATE(:old.DT_PLCMT_START,'MM/DD/YYYY'),
                LEAST(TO_DATE(:old.DT_PLCMT_END,'MM/DD/YYYY'),
                      TO_DATE(SYSDATE,'MM/DD/YYYY')),
                :old.ID_PLCMT_CHILD
            );
        END IF;
    -- 08/26/96 MED  Write a request that spans the difference between
    -- the current date and the new end date of the record.  The window
    -- will not set the request indicator if the new end date is still
    -- in the future.
        IF (TO_DATE(:new.DT_PLCMT_END,'MM/DD/YYYY') <
           (LEAST(TO_DATE(:old.DT_PLCMT_END,'MM/DD/YYYY'),
            TO_DATE(SYSDATE,'MM/DD/YYYY'))))  THEN
            insert into ADJUSTMENT_REQUEST (
                ID_ADJ_REQ,
                ID_ADJ_REQ_EVENT,
                DT_ADJ_REQ_START,
                DT_ADJ_REQ_END,
                ID_ADJ_REQ_PERSON
            ) VALUES (
                0,
                :old.ID_PLCMT_EVENT,
                TO_DATE(:new.DT_PLCMT_END,'MM/DD/YYYY'),
                LEAST(TO_DATE(SYSDATE,'MM/DD/YYYY'),
                TO_DATE(:old.DT_PLCMT_END,'MM/DD/YYYY')),
                :old.ID_PLCMT_CHILD
            );
        END IF;
    END IF;
END;
/


-- Add Referencing Foreign Keys SQL

ALTER TABLE CAPS.ADOPTION_SUBSIDY ADD CONSTRAINT FK_ADPT_SUBSIDY_PLCMT
FOREIGN KEY (ID_PLCMT_EVENT)
REFERENCES CAPS.PLACEMENT (ID_PLCMT_EVENT)
ENABLE
;
ALTER TABLE CAPS.FCE_REVIEW ADD CONSTRAINT FK_FCE_REVIEW_8
FOREIGN KEY (ID_PLACEMENT_RATE_EVENT)
REFERENCES CAPS.PLACEMENT (ID_PLCMT_EVENT)
ENABLE
;
ALTER TABLE CAPS.FCE_REVIEW ADD CONSTRAINT FK_FCE_REVIEW_9
FOREIGN KEY (ID_CURRENT_PLACEMENT_EVENT)
REFERENCES CAPS.PLACEMENT (ID_PLCMT_EVENT)
ENABLE
;
ALTER TABLE CAPS.DIVERSION_CONCLUSION 
    ADD CONSTRAINT FK_DIVERSION_CONCLUSION_STAGE
FOREIGN KEY (ID_STAGE)
REFERENCES CAPS.STAGE (ID_STAGE)
ENABLE
;
ALTER TABLE CAPS.DIVERSION_CONCLUSION 
    ADD CONSTRAINT FK_DIVERSION_CONCLUSION_CASE
FOREIGN KEY (ID_CASE)
REFERENCES CAPS.CAPS_CASE (ID_CASE)
ENABLE
;
ALTER TABLE CAPS.DIVERSION_CONCLUSION 
    ADD CONSTRAINT FK_DIVERSION_CONCLUSION_EVENT
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.PAYMENT_OF_CARE 
    ADD CONSTRAINT FK_POC_CM_PACK_CMP_PERSON
FOREIGN KEY (ID_CM_PACKET_COMP)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PAYMENT_OF_CARE 
    ADD CONSTRAINT FK_POC_SPV_PACK_APRV_PERSON
FOREIGN KEY (ID_SPV_PACKET_APRV)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PAYMENT_OF_CARE 
    ADD CONSTRAINT FK_POC_SO_APRV_PERSON
FOREIGN KEY (ID_SO_APRV)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PAYMENT_OF_CARE 
    ADD CONSTRAINT FK_POC_RBWO_REV_AP_PERSON
FOREIGN KEY (ID_RBWO_REV_APRV)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PAYMENT_OF_CARE 
    ADD CONSTRAINT FK_PAYMENT_OF_CARE_RESOURCE
FOREIGN KEY (ID_RESOURCE)
REFERENCES CAPS.CAPS_RESOURCE (ID_RESOURCE)
ENABLE
;
ALTER TABLE CAPS.PAYMENT_OF_CARE 
    ADD CONSTRAINT FK_PAYMT_OF_CARE_EVENT
FOREIGN KEY (ID_POC_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.PGM_LCNSRE_TYPS 
    ADD CONSTRAINT FK_PGM_LCNSRE_TYPS_LOC
FOREIGN KEY (ID_FLOC)
REFERENCES CAPS.FACILITY_LOC (ID_FLOC)
ENABLE
;
ALTER TABLE CAPS.RELATIVE_CARE_ASSMT 
    ADD CONSTRAINT FK_RELATIVE_CARE_ASS_RESOURCE
FOREIGN KEY (ID_RESOURCE)
REFERENCES CAPS.CAPS_RESOURCE (ID_RESOURCE)
ENABLE
;
ALTER TABLE CAPS.RELATIVE_CARE_ASSMT 
    ADD CONSTRAINT FK_REL_CARE_ASS_EVENT
FOREIGN KEY (ID_RCA_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.RELATIVE_CARE_ASSMT_PERSON 
    ADD CONSTRAINT FK_RCA_PERSON_PERSON
FOREIGN KEY (ID_PERSON)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.RELATIVE_CARE_ASSMT_PERSON 
    ADD CONSTRAINT FK_RCA_PERSON_EVENT
FOREIGN KEY (ID_RCA_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.SP_PERSONS_RESPNSBL 
    ADD CONSTRAINT FK_SP_PERS_RESP_PERSON
FOREIGN KEY (ID_PERSON)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.SP_PERSONS_RESPNSBL 
    ADD CONSTRAINT FK_SP_PERS_RESP_SP_SFTY_FCTR
FOREIGN KEY (ID_SFTY_FCTR)
REFERENCES CAPS.SP_SAFETY_FACTORS (ID_SFTY_FCTR)
ENABLE
;
ALTER TABLE CAPS.SP_SAFETY_FACTORS 
    ADD CONSTRAINT FK_SP_SAFETY_FACTORS_PLAN
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.SP_SAFETY_PLAN (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.SP_SAFETY_PLAN 
    ADD CONSTRAINT FK_SP_SAFETY_PLAN_CASE
FOREIGN KEY (ID_CASE)
REFERENCES CAPS.CAPS_CASE (ID_CASE)
ENABLE
;
ALTER TABLE CAPS.SP_SAFETY_PLAN 
    ADD CONSTRAINT PK_SAFETY_PLAN_EVENT
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.DILIGENT_SEARCH ADD CONSTRAINT FK_DILIGENT_SEARCH_PERS_SRCH
FOREIGN KEY (ID_PERSON_SEARCH)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.DILIGENT_SEARCH ADD CONSTRAINT FK_DILIGENT_SEARCH_PERSON_DTL
FOREIGN KEY (ID_PERSON_DETAIL)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.WTLP_PLAN ADD CONSTRAINT FK_WTLP_PLAN_YDP_PERSON
FOREIGN KEY (ID_YDP_COORD)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT FK_PLCMT_ADULT
FOREIGN KEY (ID_PLCMT_ADULT)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT FK_PLCMT_AGENCY
FOREIGN KEY (ID_RSRC_AGENCY)
REFERENCES CAPS.CAPS_RESOURCE (ID_RESOURCE)
ENABLE
;
ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT FK_PLCMT_CHILD
FOREIGN KEY (ID_PLCMT_CHILD)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT FK_PLCMT_CONTRACT
FOREIGN KEY (ID_PLCMT_CONTRACT)
REFERENCES CAPS.CONTRACT (ID_CONTRACT)
ENABLE
;
ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT FK_PLCMT_FACIL
FOREIGN KEY (ID_RSRC_FACIL)
REFERENCES CAPS.CAPS_RESOURCE (ID_RESOURCE)
ENABLE
;
ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT FK_PLACEMENT_PERSON_CONT_WKR
FOREIGN KEY (ID_CONTACT_WRKR)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.PLACEMENT ADD CONSTRAINT FK_PLACEMENT_WAIVER
FOREIGN KEY (ID_WAIVER)
REFERENCES CAPS.POLICY_WAIVER (ID_WVR_EVENT)
ENABLE
;


-- Alter Trigger SQL
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_PERSON
BEFORE UPDATE
ON CAPS.PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  --------------------------------------------------------------------------------------
  -- PURPOSE of UPDATE trigger: for most cases create a record in table PERSON_HISTORY
  --   for every update of PERSON record.  Follow these 3 criteria:
  --
  --   1. if user sets field IND_PERSON_CANCEL_HIST='Y' in UPDATE statement
  --      then do NOT create a record in table PERSON_HISTORY
  --
  --   2. if user sets field IND_PERSON_CANCEL_HIST to NULL or any value other than Y
  --      in UPDATE statement, then create a record in table PERSON_HISTORY
  --
  --   3. If user did NOT set field IND_PERSON_CANCEL_HIST at all (not in UPDATE
  --      stmt) then it is considered a NULL, and hence create a PERSON_HISTORY record
  --
  -- In anyway, field IND_PERSON_CANCEL_HIST will ALWAYS be set to NULL right before
  -- update into table PERSON regardless of what the user specifies.
  --
  -- Mike Bui: Changes 11-JAN-95
  --------------------------------------------------------------------------------------
  dummy2   NUMBER;
  v_ind_input_type person_merge_pending.ind_input_type%TYPE;
        v_id_person person_merge_pending.id_person%TYPE;
        v_id_group person_merge_pending.id_group%TYPE;
BEGIN
   :NEW.DT_LAST_UPDATE := sysdate;
   --insert into table PERSON_HISTORY if field :NEW.IND_PERSON_CANCEL_HIST is not 'Y':
   IF :NEW.IND_PERS_CANCEL_HIST <> 'Y' OR
      :NEW.IND_PERS_CANCEL_HIST IS NULL THEN

  -- 1st: set END DATE of previous record:
  UPDATE PERSON_HISTORY  PH
  SET    PH.DT_PERS_HIST_END    = :NEW.DT_LAST_UPDATE
  WHERE  PH.ID_PERS_HIST_PERSON  = :OLD.ID_PERSON
  AND    DT_PERS_HIST_END = to_date('12/31/4712','MM/DD/YYYY');

  -- 2nd: Insert new record in PERSON_HISTORY:

  -- get next sequence value:
  SELECT SEQ_PERSON_HISTORY.NEXTVAL INTO dummy2 FROM DUAL;

  -- (very similar to insert trigger above)
  INSERT  INTO  PERSON_HISTORY  (
    NBR_PERS_HIST_AGE,
    DT_PERS_HIST_DEATH,
    DT_PERS_HIST_BIRTH,
    CD_PERS_HIST_RELIGION,
    CD_PERS_HIST_CHAR,
    CD_PERS_HIST_GUARD_CNSRV,
    CD_PERS_HIST_STATUS,
    CD_PERS_HIST_DEATH,
    CD_PERS_HIST_MARITAL_STAT,
    TXT_PERS_HIST_OCCUPATION,
    IND_PERS_HIST_DOB_APPROX,
    CD_PERS_HIST_LIV_ARR,
    CD_PERS_HIST_LANGUAGE,
    CD_PERS_HIST_SEX,
    NM_PERS_HIST_FULL,
    CD_PERS_HIST_ETHNIC,
    ID_PERS_HIST_PERSON,
    ID_PERSON_HISTORY,
    DT_LAST_UPDATE,
    DT_PERS_HIST_EFFECT,
    DT_PERS_HIST_END,
    CD_DISASTER_RLF,
    TXT_CHAR_CMNTS,
    CD_PERS_HIST_NOT_YET_DIAG,
    IND_PERS_HIST_US_CITIZEN,
    CD_PERS_HIST_IMMG_STATUS,
    CD_PERS_HIST_COUNTRY_ORIGIN,
    CD_PERS_HIST_PROOF_CITIZEN,
    CD_PERS_HIST_SUFFIX,
    CD_PERS_HIST_TITLE,
    CD_PERS_HIST_MATCH_TYPE,
    TXT_PERS_HIST_OTHER_RELATIONS,
    CD_SMILE_CLIENT,
    TXT_IDS_NUMBER
  )VALUES  (
    :NEW.NBR_PERSON_AGE,
    :NEW.DT_PERSON_DEATH,
    :NEW.DT_PERSON_BIRTH,
    :NEW.CD_PERSON_RELIGION,
    :NEW.CD_PERSON_CHAR,
    :NEW.CD_PERS_GUARD_CNSRV,
    :NEW.CD_PERSON_STATUS,
    :NEW.CD_PERSON_DEATH,
    :NEW.CD_PERSON_MARITAL_STATUS,
    :NEW.TXT_PERSON_OCCUPATION,
    :NEW.IND_PERSON_DOB_APPROX,
    :NEW.CD_PERSON_LIV_ARR,
    :NEW.CD_PERSON_LANGUAGE,
    :NEW.CD_PERSON_SEX,
    :NEW.NM_PERSON_FULL,
    :NEW.CD_PERSON_ETHNIC_GROUP,
    :NEW.ID_PERSON,
    dummy2,
    sysdate,
    :NEW.DT_LAST_UPDATE,
    NULL,
    :NEW.CD_DISASTER_RLF,
    :NEW.TXT_CHAR_CMNTS,
    :NEW.CD_PERS_NOT_YET_DIAG,
    :NEW.IND_PERSON_US_CITIZEN,
    :NEW.CD_PERSON_IMMIGRATION_STATUS,
    :NEW.CD_PERSON_COUNTRY_ORIGIN,
    :NEW.CD_PERSON_PROOF_CITIZENSHIP,
    :NEW.CD_PERSON_SUFFIX,
    :NEW.CD_PERSON_TITLE,
    :NEW.CD_MATCH_TYPE,
    :NEW.TXT_PERSON_OTHER_RELATIONSHIPS,
    :NEW.CD_SMILE_CLIENT,
    :NEW.TXT_IDS_NUMBER);
   END IF;

  --Must always set this field to NULL regardless what the user enters.
  :NEW.IND_PERS_CANCEL_HIST := NULL;
  --Reason: If user specifies this field in the SET clause of UPDATE statement then
  --   :NEW.IND_PERS_CANCEL_HIST = specified value, and
  --   :OLD.IND_PERS_CANCEL_HIST = old value in database.
  --
  --But if user did NOT specify it it the UPDATE state, then
  --   :NEW.IND_PERS_CANCEL_HIST = old value in database, and
  --   :OLD.IND_PERS_CANCEL_HIST = old value in database.
  -- That's righ! both :old and :new value are the same.  This will mess up the IF
  -- statement above because the current value of that record in the database will
  -- determine the path of this IF statement instead of what we really want: if user
  -- did not specify a value for this it should be NULL.  The only way to
  -- guarantee this is to always set this field to NULL.  It is a reasonable action
  -- because the main purpose of this field is determine what to do with table
  -- PERSON_HISTORY.  It has no meaning in table PERSON, therefore it will ALWAYS be
  -- set to NULL in both BEFORE INSERT and BEFORE UPDATE trigger

  BEGIN
                SELECT  id_person, ind_input_type, id_group
                INTO    v_id_person, v_ind_input_type, v_id_group
                FROM    person_merge_pending
                WHERE   id_person=:NEW.id_person;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
                NULL;
        END;


-- SIR  15787

  IF (  (:OLD.DT_PERSON_BIRTH <> :NEW.DT_PERSON_BIRTH) OR
        (:OLD.DT_PERSON_BIRTH IS NOT NULL AND :NEW.DT_PERSON_BIRTH IS NULL)) THEN

        INSERT INTO adjustment_request
                        (ID_ADJ_REQ,
                        DT_LAST_UPDATE,
                        ID_ADJ_REQ_EVENT,
                        ID_ADJ_REQ_PERSON,
                        ID_CASE,
                        DT_ADJ_REQ_START,
                        DT_ADJ_REQ_END,
                        CD_ADJ_REQ_TYPE)
                        VALUES
                        (0,
                        SYSDATE,
                        NULL,
                        :NEW.ID_PERSON,
                        NULL,
                        :OLD.DT_PERSON_BIRTH,
                        :NEW.DT_PERSON_BIRTH,
                        'PER');

  IF v_id_person is NOT NULL THEN

   BEGIN

  IF v_ind_input_type IS NULL THEN

                        DELETE FROM person_merge_pending
                        WHERE id_person = :NEW.id_person;

         ELSIF v_ind_input_type =1 THEN

      DELETE FROM PERSON_MERGE_PENDING
        WHERE id_group = v_id_group;

  END IF;

                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                          NULL;
        END;

  END IF;
    END IF;


  IF v_id_person is NOT NULL THEN

  IF   ((:OLD.NM_PERSON_FIRST <> :NEW.NM_PERSON_FIRST) OR
    (:OLD.NM_PERSON_MIDDLE <> :NEW.NM_PERSON_MIDDLE) OR
    (:OLD.NM_PERSON_LAST <> :NEW.NM_PERSON_LAST) OR
    (:OLD.NM_PERSON_FULL <> :NEW.NM_PERSON_FULL)) THEN

    BEGIN

  IF v_ind_input_type IS NULL THEN

                        DELETE FROM person_merge_pending
                        WHERE id_person = :NEW.id_person;

        ELSIF v_ind_input_type =1 THEN

       DELETE FROM PERSON_MERGE_PENDING
                        WHERE id_group = v_id_group;

  END IF;

                        EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                                NULL;
          END;


  END IF;
  END IF;



END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_PERSON
BEFORE INSERT
ON CAPS.PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  --------------------------------------------------------------------------------------
  -- PURPOSE of INSERT trigger: for most cases create a record in table PERSON_HISTORY
  --   for every new PERSON record.  Follow these 3 criteria:
  --
  --   1. if user sets field IND_PERSON_CANCEL_HIST='Y' in Insert statement
  --      then do NOT create a record in table PERSON_HISTORY
  --
  --   2. if user sets field IND_PERSON_CANCEL_HIST to NULL or any value other than Y
  --      in Insert statement, then create a record in table PERSON_HISTORY
  --
  --   3. If user did NOT set field IND_PERSON_CANCEL_HIST at all (not in Insert
  --      stmt) then it is considered a NULL, and hence create a PERSON_HISTORY record
  --
  -- In anyway, field IND_PERSON_CANCEL_HIST will ALWAYS be set to NULL right before
  -- insertion into table PERSON regardless of what the user specifies.
  -- See reason for this decision at bottom of next UPDATE trigger.
  --
  -- Mike Bui: Changes on 11-JAN-95
  --------------------------------------------------------------------------------------
  dummy  NUMBER;
  dummy2 NUMBER;
  dummy_date DATE;
BEGIN
  :NEW.DT_LAST_UPDATE := sysdate;
  if :NEW.ID_PERSON=0 then
    SELECT SEQ_PERSON.NEXTVAL INTO dummy  FROM DUAL;
    :NEW.ID_PERSON := dummy;
  end if;

  --insert into table PERSON_HISTORY if field :NEW.IND_PERSON_CANCEL_HIST is not 'Y':
   IF nvl(:NEW.IND_PERS_CANCEL_HIST,' ') <> 'Y' THEN

  -- Get next sequence value:
  SELECT SEQ_PERSON_HISTORY.NEXTVAL INTO dummy2 FROM DUAL;

  INSERT INTO PERSON_HISTORY (
    NBR_PERS_HIST_AGE,
    DT_PERS_HIST_DEATH,
    DT_PERS_HIST_BIRTH,
    CD_PERS_HIST_RELIGION,
    CD_PERS_HIST_CHAR,
    CD_PERS_HIST_GUARD_CNSRV,
    CD_PERS_HIST_STATUS,
    CD_PERS_HIST_DEATH,
    CD_PERS_HIST_MARITAL_STAT,
    TXT_PERS_HIST_OCCUPATION,
    IND_PERS_HIST_DOB_APPROX,
    CD_PERS_HIST_LIV_ARR,
    CD_PERS_HIST_LANGUAGE,
    CD_PERS_HIST_SEX,
    NM_PERS_HIST_FULL,
    CD_PERS_HIST_ETHNIC,
    ID_PERS_HIST_PERSON,
    ID_PERSON_HISTORY,
    DT_LAST_UPDATE,
    DT_PERS_HIST_EFFECT,
    DT_PERS_HIST_END,
    CD_DISASTER_RLF,
    TXT_CHAR_CMNTS,
    CD_PERS_HIST_NOT_YET_DIAG,
    IND_PERS_HIST_US_CITIZEN,
    CD_PERS_HIST_IMMG_STATUS,
    CD_PERS_HIST_COUNTRY_ORIGIN,
    CD_PERS_HIST_PROOF_CITIZEN,
    CD_PERS_HIST_SUFFIX,
    CD_PERS_HIST_TITLE,
    CD_PERS_HIST_MATCH_TYPE,
    TXT_PERS_HIST_OTHER_RELATIONS,
    CD_SMILE_CLIENT,
    TXT_IDS_NUMBER
  )  VALUES  (
    :NEW.NBR_PERSON_AGE,
    :NEW.DT_PERSON_DEATH,
    :NEW.DT_PERSON_BIRTH,
    :NEW.CD_PERSON_RELIGION,
    :NEW.CD_PERSON_CHAR,
    :NEW.CD_PERS_GUARD_CNSRV,
    :NEW.CD_PERSON_STATUS,
    :NEW.CD_PERSON_DEATH,
    :NEW.CD_PERSON_MARITAL_STATUS,
    :NEW.TXT_PERSON_OCCUPATION,
    :NEW.IND_PERSON_DOB_APPROX,
    :NEW.CD_PERSON_LIV_ARR,
    :NEW.CD_PERSON_LANGUAGE,
    :NEW.CD_PERSON_SEX,
    :NEW.NM_PERSON_FULL,
    :NEW.CD_PERSON_ETHNIC_GROUP,
    :NEW.ID_PERSON,
    dummy2,
    sysdate,
    :NEW.DT_LAST_UPDATE,
    NULL,
    :NEW.CD_DISASTER_RLF,
    :NEW.TXT_CHAR_CMNTS,
    :NEW.CD_PERS_NOT_YET_DIAG,
    :NEW.IND_PERSON_US_CITIZEN,
    :NEW.CD_PERSON_IMMIGRATION_STATUS,
    :NEW.CD_PERSON_COUNTRY_ORIGIN,
    :NEW.CD_PERSON_PROOF_CITIZENSHIP,
    :NEW.CD_PERSON_SUFFIX,
    :NEW.CD_PERSON_TITLE,
    :NEW.CD_MATCH_TYPE,
    :NEW.TXT_PERSON_OTHER_RELATIONSHIPS,
    :NEW.CD_SMILE_CLIENT,
    :NEW.TXT_IDS_NUMBER);
   END IF;

  --Must always set this field to NULL regardless what the user enters.
  :NEW.IND_PERS_CANCEL_HIST := NULL;
    --See the bottom of UPDATE trigger below for reason.

END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_DIVERSION_CONCLUSION
BEFORE UPDATE
ON CAPS.DIVERSION_CONCLUSION
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_DIVERSION_CONCLUSION
BEFORE INSERT
ON CAPS.DIVERSION_CONCLUSION
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_PAYMENT_OF_CARE
BEFORE UPDATE
ON CAPS.PAYMENT_OF_CARE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_PAYMENT_OF_CARE
BEFORE INSERT
ON CAPS.PAYMENT_OF_CARE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_PGM_LCNSRE_TYPS
BEFORE UPDATE
ON CAPS.PGM_LCNSRE_TYPS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_PGM_LCNSRE_TYPS
BEFORE INSERT
ON CAPS.PGM_LCNSRE_TYPS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_LCNSRE_TYPS IS NULL OR :new.ID_LCNSRE_TYPS = 0) THEN
		SELECT	SEQ_PGM_LCNSRE_TYPS.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:new.ID_LCNSRE_TYPS := dummy;
	END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_RELATIVE_CARE_ASSMT
BEFORE UPDATE
ON CAPS.RELATIVE_CARE_ASSMT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_RELATIVE_CARE_ASSMT
BEFORE INSERT
ON CAPS.RELATIVE_CARE_ASSMT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_RCA_PERSON
BEFORE UPDATE
ON CAPS.RELATIVE_CARE_ASSMT_PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_RCA_PERSON
BEFORE INSERT
ON CAPS.RELATIVE_CARE_ASSMT_PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_RCA_PERSON IS NULL OR :new.ID_RCA_PERSON = 0) THEN
		SELECT	SEQ_RCA_PERSON.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:new.ID_RCA_PERSON := dummy;
	END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SP_PERSONS_RESPNSBL
BEFORE UPDATE
ON CAPS.SP_PERSONS_RESPNSBL
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SP_PERSONS_RESPNSBL
BEFORE INSERT
ON CAPS.SP_PERSONS_RESPNSBL
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_SP_PERS_RESPNSBL IS NULL OR :new.ID_SP_PERS_RESPNSBL = 0) THEN
		SELECT	SEQ_SP_PERSONS_RESPNSBL.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:new.ID_SP_PERS_RESPNSBL := dummy;
	END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SP_SAFETY_FACTORS
BEFORE UPDATE
ON CAPS.SP_SAFETY_FACTORS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SP_SAFETY_FACTORS
BEFORE INSERT
ON CAPS.SP_SAFETY_FACTORS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_SFTY_FCTR IS NULL OR :new.ID_SFTY_FCTR = 0) THEN
		SELECT	SEQ_SP_SAFETY_FACTORS.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:new.ID_SFTY_FCTR := dummy;
	END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SP_SAFETY_PLAN
BEFORE UPDATE
ON CAPS.SP_SAFETY_PLAN
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SP_SAFETY_PLAN
BEFORE INSERT
ON CAPS.SP_SAFETY_PLAN
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:new.DT_LAST_UPDATE := SYSDATE;
END;
/

-- Synonym Alter SQL

{ call dbms_utility.compile_schema('CAPS') };
{ call dbms_utility.compile_schema('CAPSBAT') };
{ call dbms_utility.compile_schema('CAPSON') };
{ call dbms_utility.compile_schema('OPERATOR') };

insert into caps.schema_version (id_schema_version, application_version, comments)
                         values (125, 'SacwisRev2', 'massive schema changes');

commit;

