
-- Role Alter SQL


-- User Alter SQL


-- Tablespace Alter SQL


-- Rollback Segment Alter SQL


-- Sequence Alter SQL

DROP SEQUENCE CAPS.SEQ_RISK_ASSMT_FMLY_STR
;
DROP SEQUENCE CAPS.SEQ_POLICY_WAIVER
;
DROP SEQUENCE CAPS.SEQ_RISK_INV_ACTIONS
;
CREATE SEQUENCE CAPS.SEQ_EMPLOYEE_AUDIT
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE SEQUENCE CAPS.SEQ_EMP_SEC_LINK_AUDIT
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE SEQUENCE CAPS.SEQ_SACWIS_AUDIT
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE SEQUENCE CAPS.SEQ_SECURITY_CLASS_AUDIT
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;


-- Dictionary Object Alter SQL


-- Standard Alter Table SQL

ALTER TABLE CAPS.EMPLOYEE ADD ID_PERSON_MODIFIED_BY NUMBER(16) DEFAULT 1 NOT NULL
;
ALTER TABLE CAPS.POLICY_WAIVER DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.POLICY_WAIVER DROP (ID_POLICY_WAIVER)
;
ALTER TABLE CAPS.POLICY_WAIVER ADD CONSTRAINT PK_POLICY_WAIVER
PRIMARY KEY (ID_WVR_EVENT)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;
ALTER TABLE CAPS.PROTECTIVE_SERVICE_ALERT DROP CONSTRAINT FK_PROTECT_SERV_ALERT_EVENT
;
ALTER TABLE CAPS.PROTECTIVE_SERVICE_ALERT DROP (ID_EVENT)
;
ALTER TABLE CAPS.RISK_ASSMT_FMLY_STR DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.RISK_ASSMT_FMLY_STR DROP (ID_RISK_ASSMT_FMLY_STR)
;
ALTER TABLE CAPS.RISK_ASSMT_FMLY_STR ADD CONSTRAINT PK_RISK_ASSMT_FMLY_STR
PRIMARY KEY (ID_EVENT)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;
ALTER TABLE CAPS.RISK_INV_ACTIONS DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.RISK_INV_ACTIONS DROP (ID_RISK_INV_ACTIONS)
;
ALTER TABLE CAPS.RISK_INV_ACTIONS ADD CONSTRAINT PK_RISK_INV_ACTIONS
PRIMARY KEY (ID_EVENT)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;

-- Drop Referencing Constraint SQL

ALTER TABLE CAPS.EMP_SEC_CLASS_LINK DROP CONSTRAINT FK_EXP_SEC_CLASS_LINK
;

-- Drop Constraint, Rename and Create Table SQL

-- DROP TABLE CAPS.IMPACT_COMMAND CASCADE CONSTRAINTS
-- ;
ALTER TABLE CAPS.EMP_SEC_CLASS_LINK DROP PRIMARY KEY DROP INDEX
;
DROP INDEX CAPS.IND_EMP_SEC_CLASS_LINK_2
;
DROP INDEX CAPS.IND_EMP_SEC_CLASS_LINK_1
;
ALTER TABLE CAPS.EMP_SEC_CLASS_LINK RENAME TO EMP_SEC_CL_08292006150744000
;
CREATE TABLE CAPS.EMP_SEC_CLASS_LINK
(
    ID_EMP_SEC_LINK        NUMBER(16)   NOT NULL,
    DT_LAST_UPDATE         DATE         NOT NULL,
    CD_SECURITY_CLASS_NAME VARCHAR2(15) NOT NULL,
    ID_PERSON              NUMBER(16)   NOT NULL,
    ID_PERSON_MODIFIED_BY  NUMBER(16)   NOT NULL
)
TABLESPACE DATA01
NOLOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 2M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
GRANT DELETE ON CAPS.EMP_SEC_CLASS_LINK TO CAPSBAT
;
GRANT INSERT ON CAPS.EMP_SEC_CLASS_LINK TO CAPSBAT
;
GRANT SELECT ON CAPS.EMP_SEC_CLASS_LINK TO CAPSBAT
;
GRANT UPDATE ON CAPS.EMP_SEC_CLASS_LINK TO CAPSBAT
;
GRANT DELETE ON CAPS.EMP_SEC_CLASS_LINK TO CAPSON
;
GRANT INSERT ON CAPS.EMP_SEC_CLASS_LINK TO CAPSON
;
GRANT SELECT ON CAPS.EMP_SEC_CLASS_LINK TO CAPSON
;
GRANT UPDATE ON CAPS.EMP_SEC_CLASS_LINK TO CAPSON
;
GRANT SELECT ON CAPS.EMP_SEC_CLASS_LINK TO OPERATOR
;
ALTER TABLE CAPS.SA_DRUG_EXPOSED_NEWBORNS DROP CONSTRAINT FK_SA_DRUG_EXP_NEWBORNS_EVENT
;
ALTER TABLE CAPS.SA_DRUG_EXPOSED_NEWBORNS DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.SA_DRUG_EXPOSED_NEWBORNS RENAME TO SA_DRUG_EX_08292006150745000
;
CREATE TABLE CAPS.SA_DRUG_EXPOSED_NEWBORNS
(
    ID_SA_DRUG_EXPOSED_NEWBORNS NUMBER(16)  NOT NULL,
    ID_EVENT                    NUMBER(16)  NOT NULL,
    DT_LAST_UPDATE              DATE        NOT NULL,
    CD_DRUG_EXP_NB              VARCHAR2(4)     NULL,
    CD_DRUG_EXP_NB_RPS          VARCHAR2(1)     NULL
)
TABLESPACE DATA01
NOLOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 1M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON COLUMN CAPS.SA_DRUG_EXPOSED_NEWBORNS.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSBAT
;
GRANT INSERT ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSBAT
;
GRANT SELECT ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSBAT
;
GRANT UPDATE ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSBAT
;
GRANT DELETE ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSON
;
GRANT INSERT ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSON
;
GRANT SELECT ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSON
;
GRANT UPDATE ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO CAPSON
;
GRANT SELECT ON CAPS.SA_DRUG_EXPOSED_NEWBORNS TO OPERATOR
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS DROP CONSTRAINT FK_SA_REASONABLE_EFFORTS_EVENT
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS DROP CONSTRAINT FK_SA_RSNABLE_EFFORTS_PERS
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS RENAME TO SA_REASONA_08292006150746000
;
CREATE TABLE CAPS.SA_REASONABLE_EFFORTS
(
    ID_SA_REASONABLE_EFFORTS NUMBER(16)   NOT NULL,
    ID_EVENT                 NUMBER(16)   NOT NULL,
    ID_PERSON_CHILD          NUMBER(16)   NOT NULL,
    DT_LAST_UPDATE           DATE         NOT NULL,
    CD_RSB_EFFORTS           VARCHAR2(5)      NULL,
    CD_RSB_EFFORTS_RPS       VARCHAR2(4)      NULL,
    TXT_COMMENTS             VARCHAR2(80)     NULL
)
TABLESPACE DATA01
NOLOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 1M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON COLUMN CAPS.SA_REASONABLE_EFFORTS.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.SA_REASONABLE_EFFORTS TO CAPSBAT
;
GRANT INSERT ON CAPS.SA_REASONABLE_EFFORTS TO CAPSBAT
;
GRANT SELECT ON CAPS.SA_REASONABLE_EFFORTS TO CAPSBAT
;
GRANT UPDATE ON CAPS.SA_REASONABLE_EFFORTS TO CAPSBAT
;
GRANT DELETE ON CAPS.SA_REASONABLE_EFFORTS TO CAPSON
;
GRANT INSERT ON CAPS.SA_REASONABLE_EFFORTS TO CAPSON
;
GRANT SELECT ON CAPS.SA_REASONABLE_EFFORTS TO CAPSON
;
GRANT UPDATE ON CAPS.SA_REASONABLE_EFFORTS TO CAPSON
;
GRANT SELECT ON CAPS.SA_REASONABLE_EFFORTS TO OPERATOR
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR DROP CONSTRAINT FK_SA_SAFETY_FACTOR_EVENT
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR DROP CONSTRAINT FK_SA_SAFETY_FACT_CARE_PERSON
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR DROP CONSTRAINT FK_SA_SAFETY_FACT_CHLD_PERS
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR RENAME TO SA_SAFETY__08292006150747000
;
CREATE TABLE CAPS.SA_SAFETY_FACTOR
(
    ID_SA_SAFETY_FACTOR NUMBER(16)  NOT NULL,
    ID_EVENT            NUMBER(16)  NOT NULL,
    ID_PERSON_CARETAKER NUMBER(16)  NOT NULL,
    ID_PERSON_CHILD     NUMBER(16)  NOT NULL,
    DT_LAST_UPDATE      DATE        NOT NULL,
    CD_SF_FACTOR        VARCHAR2(4)     NULL,
    CD_SF_FACTOR_RPS    VARCHAR2(1)     NULL
)
TABLESPACE DATA01
NOLOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 1M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON COLUMN CAPS.SA_SAFETY_FACTOR.DT_LAST_UPDATE IS
'Date of insert or last update'
;
ALTER TABLE CAPS.SECURITY_CLASS DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.SECURITY_CLASS RENAME TO SECURITY_C_08292006150748000
;
CREATE TABLE CAPS.SECURITY_CLASS
(
    CD_SECURITY_CLASS_NAME    VARCHAR2(15)  NOT NULL,
    DT_LAST_UPDATE            DATE          NOT NULL,
    TXT_SECURITY_CLASS_PROFIL VARCHAR2(100) NOT NULL,
    IND_RESTRICT              VARCHAR2(1)   DEFAULT 'N' NOT NULL,
    ID_PERSON_MODIFIED_BY     NUMBER(16)    NOT NULL
)
TABLESPACE DATA01
NOLOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 1M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
GRANT DELETE ON CAPS.SECURITY_CLASS TO CAPSBAT
;
GRANT INSERT ON CAPS.SECURITY_CLASS TO CAPSBAT
;
GRANT SELECT ON CAPS.SECURITY_CLASS TO CAPSBAT
;
GRANT UPDATE ON CAPS.SECURITY_CLASS TO CAPSBAT
;
GRANT DELETE ON CAPS.SECURITY_CLASS TO CAPSON
;
GRANT INSERT ON CAPS.SECURITY_CLASS TO CAPSON
;
GRANT SELECT ON CAPS.SECURITY_CLASS TO CAPSON
;
GRANT UPDATE ON CAPS.SECURITY_CLASS TO CAPSON
;
GRANT SELECT ON CAPS.SECURITY_CLASS TO OPERATOR
;
CREATE TABLE CAPS.EMP_SEC_CLASS_LINK_AUDIT
(
    ID_EMP_SEC_LINK_AUDIT  NUMBER(16)   NOT NULL,
    ID_EMP_SEC_LINK        NUMBER(16)   NOT NULL,
    DT_LAST_UPDATE         DATE         NOT NULL,
    CD_SECURITY_CLASS_NAME VARCHAR2(15) NOT NULL,
    ID_PERSON              NUMBER(16)   NOT NULL,
    ID_PERSON_MODIFIED_BY  NUMBER(16)   NOT NULL,
    CONSTRAINT PK_EMP_SEC_LINK_AUDIT
    PRIMARY KEY (ID_EMP_SEC_LINK_AUDIT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 2M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.EMP_SEC_CLASS_LINK_AUDIT IS
'Audit table to track all modifications to the EMP_SEC_CLASS_LINK table.'
;
GRANT DELETE ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSBAT
;
GRANT INSERT ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSBAT
;
GRANT SELECT ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSBAT
;
GRANT UPDATE ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSBAT
;
GRANT DELETE ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSON
;
GRANT INSERT ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSON
;
GRANT UPDATE ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.EMP_SEC_CLASS_LINK_AUDIT TO OPERATOR
;
CREATE TABLE CAPS.EMPLOYEE_AUDIT
(
    ID_EMPLOYEE_AUDIT        NUMBER(16)   NOT NULL,
    ID_PERSON                NUMBER(16)   NOT NULL,
    DT_LAST_UPDATE           DATE         NOT NULL,
    CD_EMPLOYEE_CLASS        VARCHAR2(6)  NOT NULL,
    DT_EMP_HIRE              DATE         NOT NULL,
    ID_EMP_JOB_HISTORY       NUMBER(16)   NOT NULL,
    NBR_EMP_ACTIVE_PCT       NUMBER(3)    NOT NULL,
    ID_EMP_OFFICE            NUMBER(16)       NULL,
    ID_EMPLOYEE_LOGON        VARCHAR2(8)      NULL,
    CD_EMP_SECURITY_CLASS_NM VARCHAR2(15)     NULL,
    CD_EMP_PROGRAM           VARCHAR2(3)      NULL,
    DT_EMP_LAST_ASSIGNED     DATE             NULL,
    DT_EMP_TERMINATION       DATE             NULL,
    IND_EMP_ACTIVE_STATUS    VARCHAR2(1)      NULL,
    IND_EMP_CONFIRMED_HRMIS  VARCHAR2(1)      NULL,
    IND_EMP_PENDING_HRMIS    VARCHAR2(1)      NULL,
    NM_EMPLOYEE_FIRST        VARCHAR2(12)     NULL,
    NM_EMPLOYEE_MIDDLE       VARCHAR2(12)     NULL,
    NM_EMPLOYEE_LAST         VARCHAR2(22)     NULL,
    CD_EMP_BJN_EMP           VARCHAR2(8)      NULL,
    IND_EMP_JOB_ASSIGN_CURR  VARCHAR2(1)      NULL,
    NM_EMP_OFFICE_NAME       VARCHAR2(15)     NULL,
    CD_EMP_OFFICE_MAIL       VARCHAR2(4)      NULL,
    NBR_EMP_UNIT_EMP_IN      VARCHAR2(2)      NULL,
    ID_EMP_UNIT              NUMBER(16)       NULL,
    CD_EMP_UNIT_REGION       VARCHAR2(3)      NULL,
    CD_EMPLOYEE_SUFFIX       VARCHAR2(2)      NULL,
    DT_LAST_LOGIN            DATE             NULL,
    ID_PERSON_MODIFIED_BY    NUMBER(16)   DEFAULT 1 NOT NULL,
    CONSTRAINT PK_EMPLOYEE_AUDIT
    PRIMARY KEY (ID_EMPLOYEE_AUDIT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 2M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.EMPLOYEE_AUDIT IS
'Audit table of activity on the Employee Table'
;
GRANT DELETE ON CAPS.EMPLOYEE_AUDIT TO CAPSBAT
;
GRANT INSERT ON CAPS.EMPLOYEE_AUDIT TO CAPSBAT
;
GRANT SELECT ON CAPS.EMPLOYEE_AUDIT TO CAPSBAT
;
GRANT UPDATE ON CAPS.EMPLOYEE_AUDIT TO CAPSBAT
;
GRANT DELETE ON CAPS.EMPLOYEE_AUDIT TO CAPSON
;
GRANT INSERT ON CAPS.EMPLOYEE_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.EMPLOYEE_AUDIT TO CAPSON
;
GRANT UPDATE ON CAPS.EMPLOYEE_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.EMPLOYEE_AUDIT TO OPERATOR
;
CREATE TABLE CAPS.SACWIS_AUDIT
(
    ID_SACWIS_AUDIT NUMBER(16)   NOT NULL,
    DT_LAST_UPDATE  DATE         NOT NULL,
    ID_PERSON       NUMBER(16)       NULL,
    TXT_IP_ADDRESS  VARCHAR2(15)     NULL,
    ID_COMMAND      NUMBER(16)       NULL,
    NBR_MESSAGE     NUMBER(6)        NULL,
    ID_CASE         NUMBER(16)       NULL,
    ID_STAGE        NUMBER(16)       NULL,
    ID_EVENT        NUMBER(16)       NULL,
    CONSTRAINT PK_SACWIS_AUDIT
    PRIMARY KEY (ID_SACWIS_AUDIT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.SACWIS_AUDIT IS
'SACWIS Audit table tracks the execution of certain commands'
;
COMMENT ON COLUMN CAPS.SACWIS_AUDIT.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.SACWIS_AUDIT TO CAPSBAT
;
GRANT INSERT ON CAPS.SACWIS_AUDIT TO CAPSBAT
;
GRANT SELECT ON CAPS.SACWIS_AUDIT TO CAPSBAT
;
GRANT UPDATE ON CAPS.SACWIS_AUDIT TO CAPSBAT
;
GRANT DELETE ON CAPS.SACWIS_AUDIT TO CAPSON
;
GRANT INSERT ON CAPS.SACWIS_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.SACWIS_AUDIT TO CAPSON
;
GRANT UPDATE ON CAPS.SACWIS_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.SACWIS_AUDIT TO OPERATOR
;
CREATE TABLE CAPS.SACWIS_COMMAND
(
    ID_COMMAND      NUMBER(16)   NOT NULL,
    DT_LAST_UPDATE  DATE         NOT NULL,
    NM_SERVLET      VARCHAR2(50) NOT NULL,
    NM_CONVERSATION VARCHAR2(50) NOT NULL,
    NM_COMMAND      VARCHAR2(50) NOT NULL,
    NM_BRANCH       VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_SACWIS_COMMAND
    PRIMARY KEY (ID_COMMAND)
    USING INDEX TABLESPACE INDEX01
                PCTFREE 10
                INITRANS 2
                MAXTRANS 255
                STORAGE(INITIAL 2M
                        NEXT 1M
                        MINEXTENTS 1
                        MAXEXTENTS UNLIMITED
                        PCTINCREASE 0
                        BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 2M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.SACWIS_COMMAND IS
'Used for on demand  application tracing only'
;
GRANT DELETE ON CAPS.SACWIS_COMMAND TO CAPSBAT
;
GRANT INSERT ON CAPS.SACWIS_COMMAND TO CAPSBAT
;
GRANT SELECT ON CAPS.SACWIS_COMMAND TO CAPSBAT
;
GRANT UPDATE ON CAPS.SACWIS_COMMAND TO CAPSBAT
;
GRANT DELETE ON CAPS.SACWIS_COMMAND TO CAPSON
;
GRANT INSERT ON CAPS.SACWIS_COMMAND TO CAPSON
;
GRANT SELECT ON CAPS.SACWIS_COMMAND TO CAPSON
;
GRANT UPDATE ON CAPS.SACWIS_COMMAND TO CAPSON
;
GRANT SELECT ON CAPS.SACWIS_COMMAND TO OPERATOR
;
CREATE TABLE CAPS.SECURITY_CLASS_AUDIT
(
    ID_SECURITY_CLASS_AUDIT   NUMBER(16)    NOT NULL,
    CD_SECURITY_CLASS_NAME    VARCHAR2(15)  NOT NULL,
    DT_LAST_UPDATE            DATE          NOT NULL,
    TXT_SECURITY_CLASS_PROFIL VARCHAR2(100) NOT NULL,
    IND_RESTRICT              VARCHAR2(1)   DEFAULT 'N' NOT NULL,
    ID_PERSON_MODIFIED_BY     NUMBER(16)    NOT NULL,
    CONSTRAINT PK476
    PRIMARY KEY (ID_SECURITY_CLASS_AUDIT)
    USING INDEX STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 1M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.SECURITY_CLASS_AUDIT IS
'Audit table for Security Class table'
;
GRANT DELETE ON CAPS.SECURITY_CLASS_AUDIT TO CAPSBAT
;
GRANT INSERT ON CAPS.SECURITY_CLASS_AUDIT TO CAPSBAT
;
GRANT SELECT ON CAPS.SECURITY_CLASS_AUDIT TO CAPSBAT
;
GRANT UPDATE ON CAPS.SECURITY_CLASS_AUDIT TO CAPSBAT
;
GRANT DELETE ON CAPS.SECURITY_CLASS_AUDIT TO CAPSON
;
GRANT INSERT ON CAPS.SECURITY_CLASS_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.SECURITY_CLASS_AUDIT TO CAPSON
;
GRANT UPDATE ON CAPS.SECURITY_CLASS_AUDIT TO CAPSON
;
GRANT SELECT ON CAPS.SECURITY_CLASS_AUDIT TO OPERATOR
;

-- Insert Data SQL

ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.EMP_SEC_CLASS_LINK(
                                    ID_EMP_SEC_LINK,
                                    DT_LAST_UPDATE,
                                    CD_SECURITY_CLASS_NAME,
                                    ID_PERSON,
                                    ID_PERSON_MODIFIED_BY
                                   )
                             SELECT 
                                    ID_EMP_SEC_LINK,
                                    DT_LAST_UPDATE,
                                    CD_SECURITY_CLASS_NAME,
                                    ID_PERSON,
                                    1
                               FROM CAPS.EMP_SEC_CL_08292006150744000 
;
COMMIT
;
ALTER TABLE CAPS.EMP_SEC_CLASS_LINK LOGGING
;
ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.SA_DRUG_EXPOSED_NEWBORNS(
                                          ID_SA_DRUG_EXPOSED_NEWBORNS,
                                          ID_EVENT,
                                          DT_LAST_UPDATE,
                                          CD_DRUG_EXP_NB,
                                          CD_DRUG_EXP_NB_RPS
                                         )
                                   SELECT 
                                          ID_SA_DRUG_EXPOSED_NEWBORNS,
                                          ID_EVENT,
                                          DT_LAST_UPDATE,
                                          CD_DRUG_EXP_NB,
                                          CD_DRUG_EXP_NB_RPS
                                     FROM CAPS.SA_DRUG_EX_08292006150745000 
;
COMMIT
;
ALTER TABLE CAPS.SA_DRUG_EXPOSED_NEWBORNS LOGGING
;
ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.SA_REASONABLE_EFFORTS(
                                       ID_SA_REASONABLE_EFFORTS,
                                       ID_EVENT,
                                       ID_PERSON_CHILD,
                                       DT_LAST_UPDATE,
                                       CD_RSB_EFFORTS,
                                       CD_RSB_EFFORTS_RPS,
                                       TXT_COMMENTS
                                      )
                                SELECT 
                                       ID_SA_REASONABLE_EFFORTS,
                                       ID_EVENT,
                                       ID_PERSON_CHILD,
                                       DT_LAST_UPDATE,
                                       CD_RSB_EFFORTS,
                                       CD_RSB_EFFORTS_RPS,
                                       TXT_COMMENTS
                                  FROM CAPS.SA_REASONA_08292006150746000 
;
COMMIT
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS LOGGING
;
ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.SA_SAFETY_FACTOR(
                                  ID_SA_SAFETY_FACTOR,
                                  ID_EVENT,
                                  ID_PERSON_CARETAKER,
                                  ID_PERSON_CHILD,
                                  DT_LAST_UPDATE,
                                  CD_SF_FACTOR,
                                  CD_SF_FACTOR_RPS
                                 )
                           SELECT 
                                  ID_SA_SAFETY_FACTOR,
                                  ID_EVENT,
                                  ID_PERSON_CARETAKER,
                                  ID_PERSON_CHILD,
                                  DT_LAST_UPDATE,
                                  CD_SF_FACTOR,
                                  CD_SF_FACTOR_RPS
                             FROM CAPS.SA_SAFETY__08292006150747000 
;
COMMIT
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR LOGGING
;
ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.SECURITY_CLASS(
                                CD_SECURITY_CLASS_NAME,
                                DT_LAST_UPDATE,
                                TXT_SECURITY_CLASS_PROFIL,
                                IND_RESTRICT,
                                ID_PERSON_MODIFIED_BY
                               )
                         SELECT 
                                CD_SECURITY_CLASS_NAME,
                                DT_LAST_UPDATE,
                                TXT_SECURITY_CLASS_PROFIL,
                                IND_RESTRICT,
                                1
                           FROM CAPS.SECURITY_C_08292006150748000 
;
COMMIT
;
ALTER TABLE CAPS.SECURITY_CLASS LOGGING
;

ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.SACWIS_COMMAND (
                                ID_COMMAND,
				DT_LAST_UPDATE,
				NM_SERVLET,
				NM_CONVERSATION,
				NM_COMMAND,
                                NM_BRANCH   
                               )
                         SELECT 
                                ID_COMMAND,
				DT_LAST_UPDATE,
				NM_SERVLET,
				NM_CONVERSATION,
				NM_COMMAND,
                                NM_BRANCH 
                         FROM CAPS.IMPACT_COMMAND 
;
COMMIT
;
ALTER TABLE CAPS.SACWIS_COMMAND LOGGING
;

-- Add Constraint SQL

ALTER TABLE CAPS.EMP_SEC_CLASS_LINK ADD CONSTRAINT PK_EXP_SEC_CLASS_LINK
PRIMARY KEY (ID_EMP_SEC_LINK)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 2M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;
ALTER TABLE CAPS.SA_DRUG_EXPOSED_NEWBORNS ADD CONSTRAINT PK_SA_DRUG_EXPOSED_NEWBORNS
PRIMARY KEY (ID_SA_DRUG_EXPOSED_NEWBORNS)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS ADD CONSTRAINT PK_SA_REASONABLE_EFFORTS
PRIMARY KEY (ID_SA_REASONABLE_EFFORTS)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR ADD CONSTRAINT PK_SA_SAFETY_FACTOR
PRIMARY KEY (ID_SA_SAFETY_FACTOR)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;
ALTER TABLE CAPS.SECURITY_CLASS ADD CONSTRAINT PK_SECURITY_CLASS
PRIMARY KEY (CD_SECURITY_CLASS_NAME)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;

-- Add Indexes SQL

CREATE INDEX CAPS.IND_EMP_SEC_CLASS_LINK_2
    ON CAPS.EMP_SEC_CLASS_LINK(CD_SECURITY_CLASS_NAME)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_EMP_SEC_CLASS_LINK_1
    ON CAPS.EMP_SEC_CLASS_LINK(ID_PERSON)
TABLESPACE INDEX01
LOGGING
PCTFREE 10
INITRANS 2
MAXTRANS 255
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;

-- Add Dependencies SQL
/
DROP TRIGGER CAPS.TIBR_EMP_SEC_CLASS_LINK
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_EMP_SEC_CLASS_LINK
BEFORE INSERT
ON CAPS.EMP_SEC_CLASS_LINK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
        dummy                       NUMBER;

BEGIN
        :NEW.DT_LAST_UPDATE := SYSDATE;

IF (:NEW.ID_EMP_SEC_LINK = 0 OR :NEW.ID_EMP_SEC_LINK IS NULL) THEN
                SELECT  SEQ_EMP_SEC_CLASS_LINK.NEXTVAL
                INTO    dummy
                FROM    DUAL;
                :NEW.ID_EMP_SEC_LINK := dummy;
        END IF;

END;
/
/
DROP TRIGGER CAPS.TUBR_EMP_SEC_CLASS_LINK
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_EMP_SEC_CLASS_LINK
BEFORE UPDATE
ON CAPS.EMP_SEC_CLASS_LINK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
        :NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
DROP TRIGGER CAPS.TIBR_SA_DRUG_EXPOSED_NEWBORNS
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SA_DRUG_EXPOSED_NEWBORNS
BEFORE INSERT
ON CAPS.SA_DRUG_EXPOSED_NEWBORNS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_SA_DRUG_EXPOSED_NEWBORNS = 0) THEN
		SELECT	SEQ_SA_DRUG_EXPOSED_NEWBORNS.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:NEW.ID_SA_DRUG_EXPOSED_NEWBORNS := dummy;
	END IF;
END;
/
/
DROP TRIGGER CAPS.TUBR_SA_DRUG_EXPOSED_NEWBORNS
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SA_DRUG_EXPOSED_NEWBORNS
BEFORE UPDATE
ON CAPS.SA_DRUG_EXPOSED_NEWBORNS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
DROP TRIGGER CAPS.TIBR_SA_REASONABLE_EFFORTS
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SA_REASONABLE_EFFORTS
BEFORE INSERT
ON CAPS.SA_REASONABLE_EFFORTS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_SA_REASONABLE_EFFORTS = 0) THEN
		SELECT	SEQ_SA_REASONABLE_EFFORTS.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:NEW.ID_SA_REASONABLE_EFFORTS := dummy;
	END IF;
END;
/
/
DROP TRIGGER CAPS.TUBR_SA_REASONABLE_EFFORTS
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SA_REASONABLE_EFFORTS
BEFORE UPDATE
ON CAPS.SA_REASONABLE_EFFORTS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
DROP TRIGGER CAPS.TIBR_SA_SAFETY_FACTOR
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SA_SAFETY_FACTOR
BEFORE INSERT
ON CAPS.SA_SAFETY_FACTOR
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_SA_SAFETY_FACTOR = 0) THEN
		SELECT	SEQ_SA_SAFETY_FACTOR.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:NEW.ID_SA_SAFETY_FACTOR := dummy;
	END IF;
END;
/
/
DROP TRIGGER CAPS.TUBR_SA_SAFETY_FACTOR
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SA_SAFETY_FACTOR
BEFORE UPDATE
ON CAPS.SA_SAFETY_FACTOR
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
DROP TRIGGER CAPS.TIBR_SECURITY_CLASS
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SECURITY_CLASS
BEFORE INSERT
ON CAPS.SECURITY_CLASS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
DROP TRIGGER CAPS.TUBR_SECURITY_CLASS
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SECURITY_CLASS
BEFORE UPDATE
ON CAPS.SECURITY_CLASS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/

-- Update Views SQL


-- Add Privileges SQL


-- Alter Index SQL


-- Add Referencing Foreign Keys SQL

ALTER TABLE CAPS.EMP_SEC_CLASS_LINK ADD CONSTRAINT FK_EXP_SEC_CLASS_LINK
FOREIGN KEY (CD_SECURITY_CLASS_NAME)
REFERENCES CAPS.SECURITY_CLASS (CD_SECURITY_CLASS_NAME)
ENABLE
;
ALTER TABLE CAPS.EMPLOYEE ADD CONSTRAINT FK_EMPLOYEE_EMPLOYEE
FOREIGN KEY (ID_PERSON_MODIFIED_BY)
REFERENCES CAPS.EMPLOYEE (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.EMP_SEC_CLASS_LINK ADD CONSTRAINT FK_EMP_SCL_EMPLOYEE
FOREIGN KEY (ID_PERSON_MODIFIED_BY)
REFERENCES CAPS.EMPLOYEE (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.SA_DRUG_EXPOSED_NEWBORNS ADD CONSTRAINT FK_SA_DRUG_EXP_NB_SAF_ASS
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.SA_SAFETY_ASSESSMENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS ADD CONSTRAINT FK_SA_RSNABLE_EFFORTS_PERS
FOREIGN KEY (ID_PERSON_CHILD)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.SA_REASONABLE_EFFORTS ADD CONSTRAINT FK_SA_REAS_EFF_SAF_ASS
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.SA_SAFETY_ASSESSMENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR ADD CONSTRAINT FK_SA_SAFETY_FACT_CARE_PERSON
FOREIGN KEY (ID_PERSON_CARETAKER)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR ADD CONSTRAINT FK_SA_SAFETY_FACT_CHLD_PERS
FOREIGN KEY (ID_PERSON_CHILD)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.SA_SAFETY_FACTOR ADD CONSTRAINT FK_SAF_FACT_SAF_ASS
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.SA_SAFETY_ASSESSMENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.SECURITY_CLASS ADD CONSTRAINT FK_SEC_CLASS_EMPLOYEE
FOREIGN KEY (ID_PERSON_MODIFIED_BY)
REFERENCES CAPS.EMPLOYEE (ID_PERSON)
ENABLE
;

-- Materialized View Alter SQL


-- Alter Procedure SQL


-- Alter Package SQL


-- Alter Oracle Object Type SQL


-- Alter Trigger SQL
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_EMP_SEC_CLASS_LINK
BEFORE UPDATE
ON CAPS.EMP_SEC_CLASS_LINK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
        :NEW.DT_LAST_UPDATE := SYSDATE;
        insert into emp_sec_class_link_audit(
          ID_EMP_SEC_LINK,
          CD_SECURITY_CLASS_NAME,
          ID_PERSON,
          ID_PERSON_MODIFIED_BY
        ) values (
          :NEW.ID_EMP_SEC_LINK,
          :NEW.CD_SECURITY_CLASS_NAME,
          :NEW.ID_PERSON,
          :NEW.ID_PERSON_MODIFIED_BY
        );
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_EMP_SEC_CLASS_LINK
BEFORE INSERT
ON CAPS.EMP_SEC_CLASS_LINK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
        dummy                       NUMBER;

BEGIN
        :NEW.DT_LAST_UPDATE := SYSDATE;

IF (:NEW.ID_EMP_SEC_LINK = 0 OR :NEW.ID_EMP_SEC_LINK IS NULL) THEN
                SELECT  SEQ_EMP_SEC_CLASS_LINK.NEXTVAL
                INTO    dummy
                FROM    DUAL;
                :NEW.ID_EMP_SEC_LINK := dummy;
        END IF;
        
        insert into emp_sec_class_link_audit(
          ID_EMP_SEC_LINK,
          CD_SECURITY_CLASS_NAME,
          ID_PERSON,
          ID_PERSON_MODIFIED_BY
        ) values (
          :NEW.ID_EMP_SEC_LINK,
          :NEW.CD_SECURITY_CLASS_NAME,
          :NEW.ID_PERSON,
          :NEW.ID_PERSON_MODIFIED_BY
        );

END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_EMPLOYEE
BEFORE UPDATE
ON CAPS.EMPLOYEE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
    ------------------------------------------------------------
    -- SIR #10495 08/27/96 GLOORJW moved update of EMPLOYEE
    -- table from EMP_JOB_HISTORY to this trigger in
    -- order to avoid circular logic.
    -- CD_EMP_BJN_EMP, CD_EMP_JOB_CLASS, and IND_EMP_JOB_ASSIG_CURR
    -- are updated from the values on the EMP_JOB_HISTORY table
    -----------------------------------------------------------
    xID_EMP_JOB_HIST    EMP_JOB_HISTORY.ID_EMP_JOB_HISTORY%TYPE;
    xCD_JOB_BJN         EMP_JOB_HISTORY.CD_JOB_BJN%TYPE;
    xCD_JOB_CLASS       EMP_JOB_HISTORY.CD_JOB_CLASS%TYPE;
    xIND_JOB_ASSIGNABLE EMP_JOB_HISTORY.IND_JOB_ASSIGNABLE%TYPE;
    xNM_OFFICE_NAME  OFFICE.NM_OFFICE_NAME%TYPE;
    xCD_OFFICE_MAIL  OFFICE.CD_OFFICE_MAIL%TYPE;
    --check for combination (ID_PERSON, ID_EMP_JOB_HISTORY) must already
    --exists in table EMP_JOB_HISTORY
    CURSOR C1 (xID_EMP_JOB_HISTORY in NUMBER, xID_PERSON in NUMBER) IS
    SELECT  ID_EMP_JOB_HISTORY,
            CD_JOB_BJN,
            CD_JOB_CLASS,
            IND_JOB_ASSIGNABLE
    FROM    EMP_JOB_HISTORY E
    WHERE   E.ID_EMP_JOB_HISTORY    = xID_EMP_JOB_HISTORY
    AND     E.ID_PERSON             = xID_PERSON;
BEGIN
    OPEN  C1 (:NEW.ID_EMP_JOB_HISTORY, :NEW.ID_PERSON);
    FETCH C1 INTO xID_EMP_JOB_HIST,
                  xCD_JOB_BJN,
                  xCD_JOB_CLASS,
                  xIND_JOB_ASSIGNABLE;
    IF C1%FOUND THEN
        :NEW.CD_EMP_BJN_EMP          := xCD_JOB_BJN;
        :NEW.CD_EMPLOYEE_CLASS       := xCD_JOB_CLASS;
        :NEW.IND_EMP_JOB_ASSIGN_CURR := xIND_JOB_ASSIGNABLE;
    ELSE
        -- The recored above must be found or it is an error
        RAISE NO_DATA_FOUND;
    END IF;
    CLOSE C1;
        :NEW.DT_LAST_UPDATE := sysdate;
    ---------------------------------------------------------------
    -- SIR #10495 08/27/96 GLOORJW Removed begin and end from around
    -- select statement, moved the population of the office name
    -- and code to within the if statement, and moved before the EXCEPTION
    -- statement
    ---------------------------------------------------------------
    ---
    --- GRD If the ID_EMP_OFFICE has changed, then get the Mail Code and
    --- Office Name and update the EMPLOYEE table
    ---
    IF (:NEW.ID_EMP_OFFICE <> :OLD.ID_EMP_OFFICE)
    THEN
        SELECT NM_OFFICE_NAME,
               CD_OFFICE_MAIL
        INTO   xNM_OFFICE_NAME,
               xCD_OFFICE_MAIL
        FROM   OFFICE
        WHERE  ID_OFFICE = :NEW.ID_EMP_OFFICE;
        :NEW.NM_EMP_OFFICE_NAME := xNM_OFFICE_NAME;
        :NEW.CD_EMP_OFFICE_MAIL := xCD_OFFICE_MAIL;
    END IF;
    
    insert into employee_audit(
      ID_PERSON,
      CD_EMPLOYEE_CLASS,
      DT_EMP_HIRE,
      ID_EMP_JOB_HISTORY,
      NBR_EMP_ACTIVE_PCT,
      ID_EMP_OFFICE,
      ID_EMPLOYEE_LOGON,
      CD_EMP_SECURITY_CLASS_NM,
      CD_EMP_PROGRAM,
      DT_EMP_LAST_ASSIGNED,
      DT_EMP_TERMINATION,
      IND_EMP_ACTIVE_STATUS,
      IND_EMP_CONFIRMED_HRMIS,
      IND_EMP_PENDING_HRMIS,
      NM_EMPLOYEE_FIRST,
      NM_EMPLOYEE_MIDDLE,
      NM_EMPLOYEE_LAST,
      CD_EMP_BJN_EMP,
      IND_EMP_JOB_ASSIGN_CURR,
      NM_EMP_OFFICE_NAME,
      CD_EMP_OFFICE_MAIL,
      NBR_EMP_UNIT_EMP_IN,
      ID_EMP_UNIT,
      CD_EMP_UNIT_REGION,
      CD_EMPLOYEE_SUFFIX,
      DT_LAST_LOGIN,
      ID_PERSON_MODIFIED_BY
    ) values (
      :NEW.ID_PERSON,
      :NEW.CD_EMPLOYEE_CLASS,
      :NEW.DT_EMP_HIRE,
      :NEW.ID_EMP_JOB_HISTORY,
      :NEW.NBR_EMP_ACTIVE_PCT,
      :NEW.ID_EMP_OFFICE,
      :NEW.ID_EMPLOYEE_LOGON,
      :NEW.CD_EMP_SECURITY_CLASS_NM,
      :NEW.CD_EMP_PROGRAM,
      :NEW.DT_EMP_LAST_ASSIGNED,
      :NEW.DT_EMP_TERMINATION,
      :NEW.IND_EMP_ACTIVE_STATUS,
      :NEW.IND_EMP_CONFIRMED_HRMIS,
      :NEW.IND_EMP_PENDING_HRMIS,
      :NEW.NM_EMPLOYEE_FIRST,
      :NEW.NM_EMPLOYEE_MIDDLE,
      :NEW.NM_EMPLOYEE_LAST,
      :NEW.CD_EMP_BJN_EMP,
      :NEW.IND_EMP_JOB_ASSIGN_CURR,
      :NEW.NM_EMP_OFFICE_NAME,
      :NEW.CD_EMP_OFFICE_MAIL,
      :NEW.NBR_EMP_UNIT_EMP_IN,
      :NEW.ID_EMP_UNIT,
      :NEW.CD_EMP_UNIT_REGION,
      :NEW.CD_EMPLOYEE_SUFFIX,
      :NEW.DT_LAST_LOGIN,
      :NEW.ID_PERSON_MODIFIED_BY
    );
EXCEPTION
        WHEN OTHERS THEN RAISE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_EMPLOYEE
BEFORE INSERT
ON CAPS.EMPLOYEE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
    ------------------------------------------------------------
    -- SIR #10495 08/27/96 GLOORJW moved update of EMPLOYEE
    -- table from EMP_JOB_HISTORY to this trigger in
    -- order to avoid circular logic.
    -- CD_EMP_BJN_EMP, CD_EMP_JOB_CLASS, and IND_EMP_JOB_ASSIG_CURR
    -- are updated from the values on the EMP_JOB_HISTORY table
    -- SIR# 22211 - Remove CD_EMP_JOB_CLASS. Same as CD_EMPLOYEE_CLASS
    -----------------------------------------------------------
    xID_EMP_JOB_HIST    EMP_JOB_HISTORY.ID_EMP_JOB_HISTORY%TYPE;
    xCD_JOB_BJN         EMP_JOB_HISTORY.CD_JOB_BJN%TYPE;
    xCD_JOB_CLASS       EMP_JOB_HISTORY.CD_JOB_CLASS%TYPE;
    xIND_JOB_ASSIGNABLE EMP_JOB_HISTORY.IND_JOB_ASSIGNABLE%TYPE;
    xNM_OFFICE_NAME  OFFICE.NM_OFFICE_NAME%TYPE;
    xCD_OFFICE_MAIL  OFFICE.CD_OFFICE_MAIL%TYPE;
    -- check for combination (ID_PERSON, ID_EMP_JOB_HISTORY) must already --exists in table EMP_JOB_HISTORY
    CURSOR C1 (xID_EMP_JOB_HISTORY in NUMBER, xID_PERSON in NUMBER) IS
    SELECT  ID_EMP_JOB_HISTORY,
            CD_JOB_BJN,
            CD_JOB_CLASS,
            IND_JOB_ASSIGNABLE
    FROM    EMP_JOB_HISTORY E
    WHERE   E.ID_EMP_JOB_HISTORY    = xID_EMP_JOB_HISTORY
    AND     E.ID_PERSON             = xID_PERSON;
BEGIN
    OPEN  C1 (:NEW.ID_EMP_JOB_HISTORY, :NEW.ID_PERSON);
    FETCH C1 INTO xID_EMP_JOB_HIST,
                  xCD_JOB_BJN,
                  xCD_JOB_CLASS,
                  xIND_JOB_ASSIGNABLE;
    IF C1%FOUND THEN
        :NEW.CD_EMP_BJN_EMP          := xCD_JOB_BJN;
        :NEW.CD_EMPLOYEE_CLASS	     := xCD_JOB_CLASS;
        :NEW.IND_EMP_JOB_ASSIGN_CURR := xIND_JOB_ASSIGNABLE;
    ELSE
        -- The recored above must be found or it is an error
        RAISE NO_DATA_FOUND;
    END IF;
    CLOSE C1;
    :NEW.DT_LAST_UPDATE := sysdate;
    ---------------------------------------------------------------
    -- SIR #10495 08/27/96 GLOORJW Removed begin and end from around
    -- select statement and moved before the EXCEPTION statement
    ---------------------------------------------------------------
    ---
    --- GRD New trigger to insert data on the denormalized EMPLOYEE table
    ---
    --- SIR# 22212 - Saravigm -  Changed CD_EMP_JOB_CLASS to
    --- CD_EMPLOYEE_CLASS and add if (
    .ID_EMP_OFFICE <> 0). This allows
    --- the termination of a new employee on the same day they are created
    -------------------------------------------------------------------
    IF (:NEW.ID_EMP_OFFICE <>  0)
    THEN
      SELECT NM_OFFICE_NAME,
             CD_OFFICE_MAIL
      INTO   xNM_OFFICE_NAME,
             xCD_OFFICE_MAIL
      FROM   OFFICE
      WHERE  ID_OFFICE = :NEW.ID_EMP_OFFICE;
      :NEW.NM_EMP_OFFICE_NAME := xNM_OFFICE_NAME;
      :NEW.CD_EMP_OFFICE_MAIL := xCD_OFFICE_MAIL;
    END IF;
    
    insert into employee_audit(
      ID_PERSON,
      CD_EMPLOYEE_CLASS,
      DT_EMP_HIRE,
      ID_EMP_JOB_HISTORY,
      NBR_EMP_ACTIVE_PCT,
      ID_EMP_OFFICE,
      ID_EMPLOYEE_LOGON,
      CD_EMP_SECURITY_CLASS_NM,
      CD_EMP_PROGRAM,
      DT_EMP_LAST_ASSIGNED,
      DT_EMP_TERMINATION,
      IND_EMP_ACTIVE_STATUS,
      IND_EMP_CONFIRMED_HRMIS,
      IND_EMP_PENDING_HRMIS,
      NM_EMPLOYEE_FIRST,
      NM_EMPLOYEE_MIDDLE,
      NM_EMPLOYEE_LAST,
      CD_EMP_BJN_EMP,
      IND_EMP_JOB_ASSIGN_CURR,
      NM_EMP_OFFICE_NAME,
      CD_EMP_OFFICE_MAIL,
      NBR_EMP_UNIT_EMP_IN,
      ID_EMP_UNIT,
      CD_EMP_UNIT_REGION,
      CD_EMPLOYEE_SUFFIX,
      DT_LAST_LOGIN,
      ID_PERSON_MODIFIED_BY
    ) values (
      :NEW.ID_PERSON,
      :NEW.CD_EMPLOYEE_CLASS,
      :NEW.DT_EMP_HIRE,
      :NEW.ID_EMP_JOB_HISTORY,
      :NEW.NBR_EMP_ACTIVE_PCT,
      :NEW.ID_EMP_OFFICE,
      :NEW.ID_EMPLOYEE_LOGON,
      :NEW.CD_EMP_SECURITY_CLASS_NM,
      :NEW.CD_EMP_PROGRAM,
      :NEW.DT_EMP_LAST_ASSIGNED,
      :NEW.DT_EMP_TERMINATION,
      :NEW.IND_EMP_ACTIVE_STATUS,
      :NEW.IND_EMP_CONFIRMED_HRMIS,
      :NEW.IND_EMP_PENDING_HRMIS,
      :NEW.NM_EMPLOYEE_FIRST,
      :NEW.NM_EMPLOYEE_MIDDLE,
      :NEW.NM_EMPLOYEE_LAST,
      :NEW.CD_EMP_BJN_EMP,
      :NEW.IND_EMP_JOB_ASSIGN_CURR,
      :NEW.NM_EMP_OFFICE_NAME,
      :NEW.CD_EMP_OFFICE_MAIL,
      :NEW.NBR_EMP_UNIT_EMP_IN,
      :NEW.ID_EMP_UNIT,
      :NEW.CD_EMP_UNIT_REGION,
      :NEW.CD_EMPLOYEE_SUFFIX,
      :NEW.DT_LAST_LOGIN,
      :NEW.ID_PERSON_MODIFIED_BY
    );
EXCEPTION
        WHEN OTHERS THEN RAISE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_PERSON
BEFORE UPDATE
ON CAPS.PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	--------------------------------------------------------------------------------------
	-- PURPOSE of UPDATE trigger: for most cases create a record in table PERSON_HISTORY
	--   for every update of PERSON record.  Follow these 3 criteria:
	--
	--   1. if user sets field IND_PERSON_CANCEL_HIST='Y' in UPDATE statement
	--      then do NOT create a record in table PERSON_HISTORY
	--
	--   2. if user sets field IND_PERSON_CANCEL_HIST to NULL or any value other than Y
	--      in UPDATE statement, then create a record in table PERSON_HISTORY
	--
	--   3. If user did NOT set field IND_PERSON_CANCEL_HIST at all (not in UPDATE
	--      stmt) then it is considered a NULL, and hence create a PERSON_HISTORY record
	--
	-- In anyway, field IND_PERSON_CANCEL_HIST will ALWAYS be set to NULL right before
	-- update into table PERSON regardless of what the user specifies.
	--
	-- Mike Bui: Changes 11-JAN-95
	--------------------------------------------------------------------------------------
	dummy2   NUMBER;
	v_ind_input_type person_merge_pending.ind_input_type%TYPE;
        v_id_person person_merge_pending.id_person%TYPE;
        v_id_group person_merge_pending.id_group%TYPE;
BEGIN
   :NEW.DT_LAST_UPDATE := sysdate;
   --insert into table PERSON_HISTORY if field :NEW.IND_PERSON_CANCEL_HIST is not 'Y':
   IF :NEW.IND_PERS_CANCEL_HIST <> 'Y' OR
      :NEW.IND_PERS_CANCEL_HIST IS NULL THEN

	-- 1st: set END DATE of previous record:
	UPDATE PERSON_HISTORY  PH
	SET    PH.DT_PERS_HIST_END    = :NEW.DT_LAST_UPDATE
	WHERE  PH.ID_PERS_HIST_PERSON	= :OLD.ID_PERSON
	AND    DT_PERS_HIST_END = to_date('12/31/4712','MM/DD/YYYY');

	-- 2nd: Insert new record in PERSON_HISTORY:

	-- get next sequence value:
	SELECT SEQ_PERSON_HISTORY.NEXTVAL INTO dummy2 FROM DUAL;

	-- (very similar to insert trigger above)
	INSERT	INTO	PERSON_HISTORY	(
		NBR_PERS_HIST_AGE,
		DT_PERS_HIST_DEATH,
		DT_PERS_HIST_BIRTH,
		CD_PERS_HIST_RELIGION,
		CD_PERS_HIST_CHAR,
		CD_PERS_HIST_GUARD_CNSRV,
		CD_PERS_HIST_STATUS,
		CD_PERS_HIST_DEATH,
		CD_PERS_HIST_MARITAL_STAT,
		TXT_PERS_HIST_OCCUPATION,
		IND_PERS_HIST_DOB_APPROX,
		CD_PERS_HIST_LIV_ARR,
		CD_PERS_HIST_LANGUAGE,
		CD_PERS_HIST_SEX,
		NM_PERS_HIST_FULL,
		CD_PERS_HIST_ETHNIC,
		ID_PERS_HIST_PERSON,
		ID_PERSON_HISTORY,
		DT_LAST_UPDATE,
		DT_PERS_HIST_EFFECT,
		DT_PERS_HIST_END,
		CD_DISASTER_RLF,
		TXT_CHAR_CMNTS,
		CD_PERS_HIST_NOT_YET_DIAG,
		IND_PERS_HIST_US_CITIZEN,
		CD_PERS_HIST_IMMG_STATUS,
		CD_PERS_HIST_COUNTRY_ORIGIN,
		CD_PERS_HIST_PROOF_CITIZEN
	)VALUES	(
		:NEW.NBR_PERSON_AGE,
		:NEW.DT_PERSON_DEATH,
		:NEW.DT_PERSON_BIRTH,
		:NEW.CD_PERSON_RELIGION,
		:NEW.CD_PERSON_CHAR,
		:NEW.CD_PERS_GUARD_CNSRV,
		:NEW.CD_PERSON_STATUS,
		:NEW.CD_PERSON_DEATH,
		:NEW.CD_PERSON_MARITAL_STATUS,
		:NEW.TXT_PERSON_OCCUPATION,
		:NEW.IND_PERSON_DOB_APPROX,
		:NEW.CD_PERSON_LIV_ARR,
		:NEW.CD_PERSON_LANGUAGE,
		:NEW.CD_PERSON_SEX,
		:NEW.NM_PERSON_FULL,
		:NEW.CD_PERSON_ETHNIC_GROUP,
		:NEW.ID_PERSON,
		dummy2,
		sysdate,
		:NEW.DT_LAST_UPDATE,
		NULL,
		:NEW.CD_DISASTER_RLF,
		:NEW.TXT_CHAR_CMNTS,
		:NEW.CD_PERS_NOT_YET_DIAG,
		:NEW.IND_PERSON_US_CITIZEN,
		:NEW.CD_PERSON_IMMIGRATION_STATUS,
		:NEW.CD_PERSON_COUNTRY_ORIGIN,
		:NEW.CD_PERSON_PROOF_CITIZENSHIP);
   END IF;

	--Must always set this field to NULL regardless what the user enters.
	:NEW.IND_PERS_CANCEL_HIST := NULL;
	--Reason: If user specifies this field in the SET clause of UPDATE statement then
	--   :NEW.IND_PERS_CANCEL_HIST = specified value, and
	--   :OLD.IND_PERS_CANCEL_HIST = old value in database.
	--
	--But if user did NOT specify it it the UPDATE state, then
	--   :NEW.IND_PERS_CANCEL_HIST = old value in database, and
	--   :OLD.IND_PERS_CANCEL_HIST = old value in database.
	-- That's righ! both :old and :new value are the same.  This will mess up the IF
	-- statement above because the current value of that record in the database will
	-- determine the path of this IF statement instead of what we really want: if user
	-- did not specify a value for this it should be NULL.  The only way to
	-- guarantee this is to always set this field to NULL.  It is a reasonable action
	-- because the main purpose of this field is determine what to do with table
	-- PERSON_HISTORY.  It has no meaning in table PERSON, therefore it will ALWAYS be
	-- set to NULL in both BEFORE INSERT and BEFORE UPDATE trigger

	BEGIN
                SELECT  id_person, ind_input_type, id_group
                INTO    v_id_person, v_ind_input_type, v_id_group
                FROM    person_merge_pending
                WHERE   id_person=:NEW.id_person;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
                NULL;
        END;


-- SIR  15787

  IF (  (:OLD.DT_PERSON_BIRTH <> :NEW.DT_PERSON_BIRTH) OR
        (:OLD.DT_PERSON_BIRTH IS NOT NULL AND :NEW.DT_PERSON_BIRTH IS NULL)) THEN

        INSERT INTO adjustment_request
                        (ID_ADJ_REQ,
                        DT_LAST_UPDATE,
                        ID_ADJ_REQ_EVENT,
                        ID_ADJ_REQ_PERSON,
                        ID_CASE,
                        DT_ADJ_REQ_START,
                        DT_ADJ_REQ_END,
                        CD_ADJ_REQ_TYPE)
                        VALUES
                        (0,
                        SYSDATE,
                        NULL,
                        :NEW.ID_PERSON,
                        NULL,
                        :OLD.DT_PERSON_BIRTH,
                        :NEW.DT_PERSON_BIRTH,
                        'PER');

	IF v_id_person is NOT NULL THEN

 	BEGIN

	IF v_ind_input_type IS NULL THEN

                        DELETE FROM person_merge_pending
                        WHERE id_person = :NEW.id_person;

         ELSIF v_ind_input_type =1 THEN

			DELETE FROM PERSON_MERGE_PENDING
  			WHERE id_group = v_id_group;

	END IF;

                	EXCEPTION
                	WHEN NO_DATA_FOUND THEN
                        	NULL;
        END;

	END IF;
  	END IF;


	IF v_id_person is NOT NULL THEN

	IF 	((:OLD.NM_PERSON_FIRST <> :NEW.NM_PERSON_FIRST) OR
		(:OLD.NM_PERSON_MIDDLE <> :NEW.NM_PERSON_MIDDLE) OR
		(:OLD.NM_PERSON_LAST <> :NEW.NM_PERSON_LAST) OR
		(:OLD.NM_PERSON_FULL <> :NEW.NM_PERSON_FULL)) THEN

		BEGIN

	IF v_ind_input_type IS NULL THEN

                        DELETE FROM person_merge_pending
                        WHERE id_person = :NEW.id_person;

        ELSIF v_ind_input_type =1 THEN

			 DELETE FROM PERSON_MERGE_PENDING
                        WHERE id_group = v_id_group;

	END IF;

                        EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                                NULL;
        	END;


	END IF;
	END IF;



END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_PERSON
BEFORE INSERT
ON CAPS.PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  --------------------------------------------------------------------------------------
  -- PURPOSE of INSERT trigger: for most cases create a record in table PERSON_HISTORY
  --   for every new PERSON record.  Follow these 3 criteria:
  --
  --   1. if user sets field IND_PERSON_CANCEL_HIST='Y' in Insert statement
  --      then do NOT create a record in table PERSON_HISTORY
  --
  --   2. if user sets field IND_PERSON_CANCEL_HIST to NULL or any value other than Y
  --      in Insert statement, then create a record in table PERSON_HISTORY
  --
  --   3. If user did NOT set field IND_PERSON_CANCEL_HIST at all (not in Insert
  --      stmt) then it is considered a NULL, and hence create a PERSON_HISTORY record
  --
  -- In anyway, field IND_PERSON_CANCEL_HIST will ALWAYS be set to NULL right before
  -- insertion into table PERSON regardless of what the user specifies.
  -- See reason for this decision at bottom of next UPDATE trigger.
  --
  -- Mike Bui: Changes on 11-JAN-95
  --------------------------------------------------------------------------------------
	dummy  NUMBER;
	dummy2 NUMBER;
	dummy_date DATE;
BEGIN
	:NEW.DT_LAST_UPDATE := sysdate;
	if :NEW.ID_PERSON=0 then
		SELECT SEQ_PERSON.NEXTVAL INTO dummy  FROM DUAL;
		:NEW.ID_PERSON := dummy;
	end if;

  --insert into table PERSON_HISTORY if field :NEW.IND_PERSON_CANCEL_HIST is not 'Y':
   IF nvl(:NEW.IND_PERS_CANCEL_HIST,' ') <> 'Y' THEN

	-- Get next sequence value:
	SELECT SEQ_PERSON_HISTORY.NEXTVAL INTO dummy2 FROM DUAL;

	INSERT INTO PERSON_HISTORY (
		NBR_PERS_HIST_AGE,
		DT_PERS_HIST_DEATH,
		DT_PERS_HIST_BIRTH,
		CD_PERS_HIST_RELIGION,
		CD_PERS_HIST_CHAR,
		CD_PERS_HIST_GUARD_CNSRV,
		CD_PERS_HIST_STATUS,
		CD_PERS_HIST_DEATH,
		CD_PERS_HIST_MARITAL_STAT,
		TXT_PERS_HIST_OCCUPATION,
		IND_PERS_HIST_DOB_APPROX,
		CD_PERS_HIST_LIV_ARR,
		CD_PERS_HIST_LANGUAGE,
		CD_PERS_HIST_SEX,
		NM_PERS_HIST_FULL,
		CD_PERS_HIST_ETHNIC,
		ID_PERS_HIST_PERSON,
		ID_PERSON_HISTORY,
		DT_LAST_UPDATE,
		DT_PERS_HIST_EFFECT,
		DT_PERS_HIST_END,
		CD_DISASTER_RLF,
		TXT_CHAR_CMNTS,
		CD_PERS_HIST_NOT_YET_DIAG,
		IND_PERS_HIST_US_CITIZEN,
		CD_PERS_HIST_IMMG_STATUS,
		CD_PERS_HIST_COUNTRY_ORIGIN,
		CD_PERS_HIST_PROOF_CITIZEN
	)	VALUES	(
		:NEW.NBR_PERSON_AGE,
		:NEW.DT_PERSON_DEATH,
		:NEW.DT_PERSON_BIRTH,
		:NEW.CD_PERSON_RELIGION,
		:NEW.CD_PERSON_CHAR,
		:NEW.CD_PERS_GUARD_CNSRV,
		:NEW.CD_PERSON_STATUS,
		:NEW.CD_PERSON_DEATH,
		:NEW.CD_PERSON_MARITAL_STATUS,
		:NEW.TXT_PERSON_OCCUPATION,
		:NEW.IND_PERSON_DOB_APPROX,
		:NEW.CD_PERSON_LIV_ARR,
		:NEW.CD_PERSON_LANGUAGE,
		:NEW.CD_PERSON_SEX,
		:NEW.NM_PERSON_FULL,
		:NEW.CD_PERSON_ETHNIC_GROUP,
		:NEW.ID_PERSON,
		dummy2,
		sysdate,
		:NEW.DT_LAST_UPDATE,
		NULL,
		:NEW.CD_DISASTER_RLF,
		:NEW.TXT_CHAR_CMNTS,
		:NEW.CD_PERS_NOT_YET_DIAG,
		:NEW.IND_PERSON_US_CITIZEN,
		:NEW.CD_PERSON_IMMIGRATION_STATUS,
		:NEW.CD_PERSON_COUNTRY_ORIGIN,
		:NEW.CD_PERSON_PROOF_CITIZENSHIP);
   END IF;

	--Must always set this field to NULL regardless what the user enters.
	:NEW.IND_PERS_CANCEL_HIST := NULL;
		--See the bottom of UPDATE trigger below for reason.

END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_POLICY_WAIVER
BEFORE INSERT
ON CAPS.POLICY_WAIVER
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_RISK_ASSMT_FMLY_STR
BEFORE INSERT
ON CAPS.RISK_ASSMT_FMLY_STR
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_RISK_INV_ACTIONS
BEFORE INSERT
ON CAPS.RISK_INV_ACTIONS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SECURITY_CLASS
BEFORE UPDATE
ON CAPS.SECURITY_CLASS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	insert into security_class_audit(
	  CD_SECURITY_CLASS_NAME,
      TXT_SECURITY_CLASS_PROFIL,
      IND_RESTRICT,
      ID_PERSON_MODIFIED_BY
    ) values (
      :NEW.CD_SECURITY_CLASS_NAME,
      :NEW.TXT_SECURITY_CLASS_PROFIL,
      :NEW.IND_RESTRICT,
      :NEW.ID_PERSON_MODIFIED_BY
    );
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SECURITY_CLASS
BEFORE INSERT
ON CAPS.SECURITY_CLASS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	insert into security_class_audit(
	  CD_SECURITY_CLASS_NAME,
      TXT_SECURITY_CLASS_PROFIL,
      IND_RESTRICT,
      ID_PERSON_MODIFIED_BY
    ) values (
      :NEW.CD_SECURITY_CLASS_NAME,
      :NEW.TXT_SECURITY_CLASS_PROFIL,
      :NEW.IND_RESTRICT,
      :NEW.ID_PERSON_MODIFIED_BY
    );
END;
/
/
DROP TRIGGER CAPS.TUBR_IMPACT_COMMAND
/
/
DROP TRIGGER CAPS.TIBR_IMPACT_COMMAND
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_EMP_SEC_LINK_AUDIT
BEFORE UPDATE
ON CAPS.EMP_SEC_CLASS_LINK_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_EMP_SEC_LINK_AUDIT
BEFORE INSERT
ON CAPS.EMP_SEC_CLASS_LINK_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_EMP_SEC_LINK_AUDIT IS NULL OR :NEW.ID_EMP_SEC_LINK_AUDIT = 0) THEN
		SELECT	SEQ_EMP_SEC_LINK_AUDIT.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:NEW.ID_EMP_SEC_LINK_AUDIT := dummy;
	END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_EMPLOYEE_AUDIT
BEFORE UPDATE
ON CAPS.EMPLOYEE_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_EMPLOYEE_AUDIT
BEFORE INSERT
ON CAPS.EMPLOYEE_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_EMPLOYEE_AUDIT IS NULL OR :NEW.ID_EMPLOYEE_AUDIT = 0) THEN
		SELECT	SEQ_EMPLOYEE_AUDIT.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:NEW.ID_EMPLOYEE_AUDIT := dummy;
	END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SACWIS_AUDIT
BEFORE UPDATE
ON CAPS.SACWIS_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SACWIS_AUDIT
BEFORE INSERT
ON CAPS.SACWIS_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_SACWIS_AUDIT IS NULL OR :NEW.ID_SACWIS_AUDIT = 0) THEN
		SELECT	SEQ_SACWIS_AUDIT.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:NEW.ID_SACWIS_AUDIT := dummy;
	END IF;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SACWIS_COMMAND
BEFORE UPDATE
ON CAPS.SACWIS_COMMAND
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SACWIS_COMMAND
BEFORE INSERT
ON CAPS.SACWIS_COMMAND
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
dummy number;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;

	IF (:NEW.id_command is null or :NEW.id_command=0) then
	    SELECT seq_impact_command.nextval INTO dummy FROM dual;
	    :NEW.id_command := dummy;
	END IF;

END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_SECURITY_CLASS_AUDIT
BEFORE UPDATE
ON CAPS.SECURITY_CLASS_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_SECURITY_CLASS_AUDIT
BEFORE INSERT
ON CAPS.SECURITY_CLASS_AUDIT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
	dummy		NUMBER;
BEGIN
	:NEW.DT_LAST_UPDATE := SYSDATE;
	IF (:NEW.ID_SECURITY_CLASS_AUDIT IS NULL OR :NEW.ID_SECURITY_CLASS_AUDIT = 0) THEN
		SELECT	SEQ_SECURITY_CLASS_AUDIT.NEXTVAL
		INTO	dummy
		FROM	DUAL;
		:NEW.ID_SECURITY_CLASS_AUDIT := dummy;
	END IF;
END;
/

-- Synonym Alter SQL
-- create synonyms for capsbat
create synonym capsbat.EMP_SEC_CLASS_LINK_AUDIT for caps.EMP_SEC_CLASS_LINK_AUDIT;
create synonym capsbat.EMPLOYEE_AUDIT for caps.EMPLOYEE_AUDIT;
create synonym capsbat.SACWIS_COMMAND for caps.SACWIS_COMMAND;
create synonym capsbat.SECURITY_CLASS_AUDIT for caps.SECURITY_CLASS_AUDIT;

-- create synonyms for capson
create synonym capson.EMP_SEC_CLASS_LINK_AUDIT for caps.EMP_SEC_CLASS_LINK_AUDIT;
create synonym capson.EMPLOYEE_AUDIT for caps.EMPLOYEE_AUDIT;
create synonym capson.SACWIS_COMMAND for caps.SACWIS_COMMAND;
create synonym capson.SECURITY_CLASS_AUDIT for caps.SECURITY_CLASS_AUDIT;

-- create synonyms for operator
create synonym operator.EMP_SEC_CLASS_LINK_AUDIT for caps.EMP_SEC_CLASS_LINK_AUDIT;
create synonym operator.EMPLOYEE_AUDIT for caps.EMPLOYEE_AUDIT;
create synonym operator.SACWIS_COMMAND for caps.SACWIS_COMMAND;
create synonym operator.SECURITY_CLASS_AUDIT for caps.SECURITY_CLASS_AUDIT;

-- drop temporary tables
DROP TABLE CAPS.IMPACT_COMMAND CASCADE CONSTRAINTS
;
DROP TABLE CAPS.EMP_SEC_CL_08292006150744000
;
DROP TABLE CAPS.SA_DRUG_EX_08292006150745000
;
DROP TABLE CAPS.SA_REASONA_08292006150746000
;
DROP TABLE CAPS.SA_SAFETY__08292006150747000
;
DROP TABLE CAPS.SECURITY_C_08292006150748000
;


-- Fix Office Mail Codes

UPDATE caps.EMPLOYEE SET CD_EMP_OFFICE_MAIL = ID_EMP_OFFICE ;
update caps.employee set CD_EMP_OFFICE_MAIL='0' || CD_EMP_OFFICE_MAIL where length(CD_EMP_OFFICE_MAIL) < 3 ; 
update caps.employee set CD_EMP_OFFICE_MAIL='0' || CD_EMP_OFFICE_MAIL where length(CD_EMP_OFFICE_MAIL) < 3 ;

-- Fix code path in Metaphor
update caps.metaphor set txt_filter_path=regexp_replace(txt_filter_path, 'org.prs.impact.architecture.metaphor.filters', 'gov.georgia.dhr.dfcs.sacwis.web.metaphor')
where txt_filter_path like 'org.prs.impact.architecture.metaphor.filters%';

{ call dbms_utility.compile_schema('CAPS') };
{ call dbms_utility.compile_schema('CAPSBAT') };
{ call dbms_utility.compile_schema('CAPSON') };
{ call dbms_utility.compile_schema('OPERATOR') };
{ call dbms_utility.compile_schema('PUBLIC') };

insert into caps.schema_version (id_schema_version, application_version, comments)
                         values (7, 'SacwisRev1', 'Add new AUDIT tables, fix keys, repair mail codes.');
                         
commit;

