
-- Standard Alter Table SQL

ALTER TABLE CAPS.EMPLOYEE MODIFY(ID_EMPLOYEE_LOGON  VARCHAR2(20))
;
ALTER TABLE CAPS.EMPLOYEE ADD ID_RACF VARCHAR2(8)     NULL
;
ALTER TABLE CAPS.FCE_AFDC_INCOME_LIMIT ADD AMT_GROSS_INCOME_CEILING NUMBER(8)     NULL
;
ALTER TABLE CAPS.FCE_AFDC_INCOME_LIMIT ADD AMT_STANDARD_OF_NEED NUMBER(8)     NULL
;
ALTER TABLE CAPS.FCE_APPLICATION RENAME COLUMN IND_EVAL_REVEIEW_EC_ES TO IND_EVAL_REVIEW_EC_ES
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD TXT_MONTHS_LIVING_REL_CUST VARCHAR2(100)     NULL
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD AMT_STANDARD_OF_NEED NUMBER(16,2)     NULL
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD AMT_GROSS_INCOME_CEILING NUMBER(16,2)     NULL
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD AMT_DEPENDENT_CARE_DEDUCT NUMBER(16,2)     NULL
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD AMT_ALLOC_ALLOWANCE NUMBER(16,2)     NULL
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD AMT_CNT_INCOME_STD_NEED NUMBER(16,2)     NULL
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD AMT_CNT_INCOME_30_ONE_THIRD NUMBER(16,2)     NULL
;
ALTER TABLE CAPS.FCE_ELIGIBILITY ADD AMT_STD_EARNED_INCOME_DEDUCT NUMBER(16,2)     NULL
;
ALTER TABLE CAPS.PERSON ADD IND_PREV_ADOPTED VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON ADD IND_PRIVATE VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON ADD IND_PUBLIC VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON ADD IND_INTRNTL VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON ADD CD_ADOPT_STATE VARCHAR2(2)     NULL
;
ALTER TABLE CAPS.PERSON ADD CD_ADOPT_COUNTY VARCHAR2(3)     NULL
;
COMMENT ON COLUMN CAPS.PERSON.CD_ADOPT_COUNTY IS
'County Code'
;
ALTER TABLE CAPS.PERSON ADD CD_ADOPT_CNTRY VARCHAR2(4)     NULL
;
ALTER TABLE CAPS.PERSON ADD IND_ADOPT_DISLUTON VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD IND_PREV_ADOPTED VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD IND_PRIVATE VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD IND_PUBLIC VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD IND_INTRNTL VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD CD_ADOPT_STATE VARCHAR2(2)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD CD_ADOPT_COUNTY VARCHAR2(3)     NULL
;
COMMENT ON COLUMN CAPS.PERSON_HISTORY.CD_ADOPT_COUNTY IS
'County Code'
;
ALTER TABLE CAPS.PERSON_HISTORY ADD CD_ADOPT_CNTRY VARCHAR2(4)     NULL
;
ALTER TABLE CAPS.PERSON_HISTORY ADD IND_ADOPT_DISLUTON VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.PLAN_PARTICIPANT MODIFY(CD_REL  VARCHAR2(20))
;
ALTER TABLE CAPS.PPT ADD IND_TRAN_PLAN_COMP VARCHAR2(1)     NULL
;
ALTER TABLE CAPS.STAGE_PERSON_LINK ADD CD_PERSON_SIDE_OF_FAMILY VARCHAR2(2)     NULL
;

-- Drop Referencing Constraint SQL


-- Drop Constraint, Rename and Create Table SQL

ALTER TABLE CAPS.FCE_EXPENDITURES DROP CONSTRAINT FK_FCE_EXP_FCE_ELG
;
ALTER TABLE CAPS.FCE_EXPENDITURES DROP CONSTRAINT FK_FCE_EXP_PERSON
;
ALTER TABLE CAPS.FCE_EXPENDITURES DROP CONSTRAINT FK_FC_EXP_FCE_PERS
;
ALTER TABLE CAPS.FCE_EXPENDITURES DROP PRIMARY KEY DROP INDEX
;
ALTER TABLE CAPS.FCE_EXPENDITURES RENAME TO FCE_EXPEND_03072007214950000
;
CREATE TABLE CAPS.FCE_EXPENDITURES
(
    ID_FCE_EXPENDITURES    NUMBER(16)   NOT NULL,
    DT_LAST_UPDATE         DATE         NOT NULL,
    ID_FCE_ELIGIBILITY     NUMBER(16)   NOT NULL,
    ID_PERSON              NUMBER(16)   NOT NULL,
    ID_PERSON_CARE_RECEIVE NUMBER(16)   NOT NULL,
    ID_FCE_PERSON          NUMBER(16)   NOT NULL,
    NM_SERVICE_PROVIDER    VARCHAR2(80)     NULL,
    AMT_PD_MONTHLY         NUMBER(13,2)     NULL
)
TABLESPACE DATA01
NOLOGGING
PCTFREE 10
INITRANS 1
MAXTRANS 255
STORAGE(INITIAL 1M
        NEXT 1M
        MINEXTENTS 1
        MAXEXTENTS UNLIMITED
        PCTINCREASE 0
        BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.FCE_EXPENDITURES IS
'Foster Care Eligibility Expenditures'
;
COMMENT ON COLUMN CAPS.FCE_EXPENDITURES.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.FCE_EXPENDITURES TO CAPSBAT
;
GRANT INSERT ON CAPS.FCE_EXPENDITURES TO CAPSBAT
;
GRANT SELECT ON CAPS.FCE_EXPENDITURES TO CAPSBAT
;
GRANT UPDATE ON CAPS.FCE_EXPENDITURES TO CAPSBAT
;
GRANT DELETE ON CAPS.FCE_EXPENDITURES TO CAPSON
;
GRANT INSERT ON CAPS.FCE_EXPENDITURES TO CAPSON
;
GRANT SELECT ON CAPS.FCE_EXPENDITURES TO CAPSON
;
GRANT UPDATE ON CAPS.FCE_EXPENDITURES TO CAPSON
;
GRANT SELECT ON CAPS.FCE_EXPENDITURES TO OPERATOR
;
CREATE TABLE CAPS.LEGAL_ACTIONS_NARRATIVE
(
    ID_EVENT             NUMBER(16) NOT NULL,
    DT_LAST_UPDATE       DATE       NOT NULL,
    ID_CASE              NUMBER(16)     NULL,
    NARRATIVE            LONG RAW       NULL,
    ID_DOCUMENT_TEMPLATE NUMBER(16)     NULL,
    CONSTRAINT PK_LEGAL_ACTIONS_NARRATIVE
    PRIMARY KEY (ID_EVENT)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;
COMMENT ON TABLE CAPS.LEGAL_ACTIONS_NARRATIVE IS
'Holds Narrative associated with Legal Action event'
;
COMMENT ON COLUMN CAPS.LEGAL_ACTIONS_NARRATIVE.DT_LAST_UPDATE IS
'Date of insert or last update'
;
GRANT DELETE ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSBAT
;
GRANT INSERT ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSBAT
;
GRANT SELECT ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSBAT
;
GRANT UPDATE ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSBAT
;
GRANT DELETE ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSON
;
GRANT INSERT ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSON
;
GRANT SELECT ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSON
;
GRANT UPDATE ON CAPS.LEGAL_ACTIONS_NARRATIVE TO CAPSON
;
GRANT SELECT ON CAPS.LEGAL_ACTIONS_NARRATIVE TO OPERATOR
;

-- Insert Data SQL

ALTER SESSION ENABLE PARALLEL DML
;
INSERT INTO CAPS.FCE_EXPENDITURES(
                                  ID_FCE_EXPENDITURES,
                                  DT_LAST_UPDATE,
                                  ID_FCE_ELIGIBILITY,
                                  ID_PERSON,
                                  ID_PERSON_CARE_RECEIVE,
                                  ID_FCE_PERSON,
                                  NM_SERVICE_PROVIDER,
                                  AMT_PD_MONTHLY
                                 )
                           SELECT 
                                  ID_FCE_EXPENDITURES,
                                  DT_LAST_UPDATE,
                                  ID_FCE_ELIGIBILITY,
                                  ID_PERSON,
                                  0,
                                  ID_FCE_PERSON,
                                  NM_SERVICE_PROVIDER,
                                  AMT_PD_MONTHLY
                             FROM CAPS.FCE_EXPEND_03072007214950000 
;
COMMIT
;
ALTER TABLE CAPS.FCE_EXPENDITURES LOGGING
;

-- Add Constraint SQL

ALTER TABLE CAPS.FCE_EXPENDITURES ADD CONSTRAINT PK_FCE_EXPENDITURES
PRIMARY KEY (ID_FCE_EXPENDITURES)
USING INDEX TABLESPACE INDEX01
            PCTFREE 10
            INITRANS 2
            MAXTRANS 255
            STORAGE(INITIAL 1M
                    NEXT 1M
                    MINEXTENTS 1
                    MAXEXTENTS UNLIMITED
                    PCTINCREASE 0
                    BUFFER_POOL DEFAULT)
    LOGGING
    ENABLE
    VALIDATE
;

-- Add Indexes SQL


-- Add Dependencies SQL
/
DROP TRIGGER CAPS.TIBR_FCE_EXPENDITURES
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_FCE_EXPENDITURES
BEFORE INSERT
ON CAPS.FCE_EXPENDITURES
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  dummy    NUMBER;
BEGIN
  :new.DT_LAST_UPDATE := SYSDATE;
  IF (:new.ID_FCE_EXPENDITURES = 0) THEN
    SELECT  SEQ_FCE_EXPENDITURES.NEXTVAL
    INTO  dummy
    FROM  DUAL;
    :new.ID_FCE_EXPENDITURES := dummy;
  END IF;
END;
/
/
DROP TRIGGER CAPS.TUBR_FCE_EXPENDITURES
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_FCE_EXPENDITURES
BEFORE UPDATE
ON CAPS.FCE_EXPENDITURES
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
  :new.DT_LAST_UPDATE := SYSDATE;
END;
/


-- Alter Index SQL

CREATE INDEX CAPS.IND_LA_OUTCOME_1
    ON CAPS.LEGAL_ACTION_OUTCOME(ID_LEGAL_ACT_EVENT)
TABLESPACE INDEX01
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_RESTRICTED_FUNDS_1
    ON CAPS.RESTRICTED_FUNDS(ID_EVENT)
TABLESPACE INDEX01
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_TCM_CLAIM_2
    ON CAPS.TCM_CLAIM(ID_STAFF)
TABLESPACE INDEX01
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_TCM_CLAIM_3
    ON CAPS.TCM_CLAIM(ID_PERSON,DT_SERVICE)
TABLESPACE INDEX01
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;
CREATE INDEX CAPS.IND_TCM_CLAIM_1
    ON CAPS.TCM_CLAIM(ID_STAGE)
TABLESPACE INDEX01
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCOMPRESS
;

-- Add Referencing Foreign Keys SQL

ALTER TABLE CAPS.LEGAL_ACTIONS_NARRATIVE 
    ADD CONSTRAINT FK_LEGAL_ACT_NARR_EVENT
FOREIGN KEY (ID_EVENT)
REFERENCES CAPS.EVENT (ID_EVENT)
ENABLE
;
ALTER TABLE CAPS.FCE_EXPENDITURES ADD CONSTRAINT FK_FCE_EXP_FCE_ELG
FOREIGN KEY (ID_FCE_ELIGIBILITY)
REFERENCES CAPS.FCE_ELIGIBILITY (ID_FCE_ELIGIBILITY)
ENABLE
;
ALTER TABLE CAPS.FCE_EXPENDITURES ADD CONSTRAINT FK_FCE_EXP_PERSON
FOREIGN KEY (ID_PERSON)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;
ALTER TABLE CAPS.FCE_EXPENDITURES ADD CONSTRAINT FK_FC_EXP_FCE_PERS
FOREIGN KEY (ID_FCE_PERSON)
REFERENCES CAPS.FCE_PERSON (ID_FCE_PERSON)
ENABLE
;
ALTER TABLE CAPS.FCE_EXPENDITURES ADD CONSTRAINT FK_FCE_EXP_CARE_REC_PERSON
FOREIGN KEY (ID_PERSON_CARE_RECEIVE)
REFERENCES CAPS.PERSON (ID_PERSON)
ENABLE
;


-- Alter Trigger SQL
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_PERSON
BEFORE UPDATE
ON CAPS.PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  --------------------------------------------------------------------------------------
  -- PURPOSE of UPDATE trigger: for most cases create a record in table PERSON_HISTORY
  --   for every update of PERSON record.  Follow these 3 criteria:
  --
  --   1. if user sets field IND_PERSON_CANCEL_HIST='Y' in UPDATE statement
  --      then do NOT create a record in table PERSON_HISTORY
  --
  --   2. if user sets field IND_PERSON_CANCEL_HIST to NULL or any value other than Y
  --      in UPDATE statement, then create a record in table PERSON_HISTORY
  --
  --   3. If user did NOT set field IND_PERSON_CANCEL_HIST at all (not in UPDATE
  --      stmt) then it is considered a NULL, and hence create a PERSON_HISTORY record
  --
  -- In anyway, field IND_PERSON_CANCEL_HIST will ALWAYS be set to NULL right before
  -- update into table PERSON regardless of what the user specifies.
  --
  -- Mike Bui: Changes 11-JAN-95
  --------------------------------------------------------------------------------------
  dummy2   NUMBER;
  v_ind_input_type person_merge_pending.ind_input_type%TYPE;
        v_id_person person_merge_pending.id_person%TYPE;
        v_id_group person_merge_pending.id_group%TYPE;
BEGIN
   :NEW.DT_LAST_UPDATE := sysdate;
   --insert into table PERSON_HISTORY if field :NEW.IND_PERSON_CANCEL_HIST is not 'Y':
   IF :NEW.IND_PERS_CANCEL_HIST <> 'Y' OR
      :NEW.IND_PERS_CANCEL_HIST IS NULL THEN

  -- 1st: set END DATE of previous record:
  UPDATE PERSON_HISTORY  PH
  SET    PH.DT_PERS_HIST_END    = :NEW.DT_LAST_UPDATE
  WHERE  PH.ID_PERS_HIST_PERSON  = :OLD.ID_PERSON
  AND    DT_PERS_HIST_END = to_date('12/31/4712','MM/DD/YYYY');

  -- 2nd: Insert new record in PERSON_HISTORY:

  -- get next sequence value:
  SELECT SEQ_PERSON_HISTORY.NEXTVAL INTO dummy2 FROM DUAL;

  -- (very similar to insert trigger above)
  INSERT  INTO  PERSON_HISTORY  (
    NBR_PERS_HIST_AGE,
    DT_PERS_HIST_DEATH,
    DT_PERS_HIST_BIRTH,
    CD_PERS_HIST_RELIGION,
    CD_PERS_HIST_CHAR,
    CD_PERS_HIST_GUARD_CNSRV,
    CD_PERS_HIST_STATUS,
    CD_PERS_HIST_DEATH,
    CD_PERS_HIST_MARITAL_STAT,
    TXT_PERS_HIST_OCCUPATION,
    IND_PERS_HIST_DOB_APPROX,
    CD_PERS_HIST_LIV_ARR,
    CD_PERS_HIST_LANGUAGE,
    CD_PERS_HIST_SEX,
    NM_PERS_HIST_FULL,
    CD_PERS_HIST_ETHNIC,
    ID_PERS_HIST_PERSON,
    ID_PERSON_HISTORY,
    DT_LAST_UPDATE,
    DT_PERS_HIST_EFFECT,
    DT_PERS_HIST_END,
    CD_DISASTER_RLF,
    TXT_CHAR_CMNTS,
    CD_PERS_HIST_NOT_YET_DIAG,
    IND_PERS_HIST_US_CITIZEN,
    CD_PERS_HIST_IMMG_STATUS,
    CD_PERS_HIST_COUNTRY_ORIGIN,
    CD_PERS_HIST_PROOF_CITIZEN,
    CD_PERS_HIST_SUFFIX,
    CD_PERS_HIST_TITLE,
    CD_PERS_HIST_MATCH_TYPE,
    TXT_PERS_HIST_OTHER_RELATIONS,
    CD_SMILE_CLIENT,
    TXT_IDS_NUMBER,
    IND_PREV_ADOPTED,
    IND_PRIVATE,
    IND_PUBLIC,
    IND_INTRNTL,
    CD_ADOPT_STATE,
    CD_ADOPT_COUNTY,
    CD_ADOPT_CNTRY,
    IND_ADOPT_DISLUTON
  )VALUES  (
    :NEW.NBR_PERSON_AGE,
    :NEW.DT_PERSON_DEATH,
    :NEW.DT_PERSON_BIRTH,
    :NEW.CD_PERSON_RELIGION,
    :NEW.CD_PERSON_CHAR,
    :NEW.CD_PERS_GUARD_CNSRV,
    :NEW.CD_PERSON_STATUS,
    :NEW.CD_PERSON_DEATH,
    :NEW.CD_PERSON_MARITAL_STATUS,
    :NEW.TXT_PERSON_OCCUPATION,
    :NEW.IND_PERSON_DOB_APPROX,
    :NEW.CD_PERSON_LIV_ARR,
    :NEW.CD_PERSON_LANGUAGE,
    :NEW.CD_PERSON_SEX,
    :NEW.NM_PERSON_FULL,
    :NEW.CD_PERSON_ETHNIC_GROUP,
    :NEW.ID_PERSON,
    dummy2,
    sysdate,
    :NEW.DT_LAST_UPDATE,
    NULL,
    :NEW.CD_DISASTER_RLF,
    :NEW.TXT_CHAR_CMNTS,
    :NEW.CD_PERS_NOT_YET_DIAG,
    :NEW.IND_PERSON_US_CITIZEN,
    :NEW.CD_PERSON_IMMIGRATION_STATUS,
    :NEW.CD_PERSON_COUNTRY_ORIGIN,
    :NEW.CD_PERSON_PROOF_CITIZENSHIP,
    :NEW.CD_PERSON_SUFFIX,
    :NEW.CD_PERSON_TITLE,
    :NEW.CD_MATCH_TYPE,
    :NEW.TXT_PERSON_OTHER_RELATIONSHIPS,
    :NEW.CD_SMILE_CLIENT,
    :NEW.TXT_IDS_NUMBER,
    :NEW.IND_PREV_ADOPTED,
    :NEW.IND_PRIVATE,
    :NEW.IND_PUBLIC,
    :NEW.IND_INTRNTL,
    :NEW.CD_ADOPT_STATE,
    :NEW.CD_ADOPT_COUNTY,
    :NEW.CD_ADOPT_CNTRY,
    :NEW.IND_ADOPT_DISLUTON);
   END IF;

  --Must always set this field to NULL regardless what the user enters.
  :NEW.IND_PERS_CANCEL_HIST := NULL;
  --Reason: If user specifies this field in the SET clause of UPDATE statement then
  --   :NEW.IND_PERS_CANCEL_HIST = specified value, and
  --   :OLD.IND_PERS_CANCEL_HIST = old value in database.
  --
  --But if user did NOT specify it it the UPDATE state, then
  --   :NEW.IND_PERS_CANCEL_HIST = old value in database, and
  --   :OLD.IND_PERS_CANCEL_HIST = old value in database.
  -- That's righ! both :old and :new value are the same.  This will mess up the IF
  -- statement above because the current value of that record in the database will
  -- determine the path of this IF statement instead of what we really want: if user
  -- did not specify a value for this it should be NULL.  The only way to
  -- guarantee this is to always set this field to NULL.  It is a reasonable action
  -- because the main purpose of this field is determine what to do with table
  -- PERSON_HISTORY.  It has no meaning in table PERSON, therefore it will ALWAYS be
  -- set to NULL in both BEFORE INSERT and BEFORE UPDATE trigger

  BEGIN
                SELECT  id_person, ind_input_type, id_group
                INTO    v_id_person, v_ind_input_type, v_id_group
                FROM    person_merge_pending
                WHERE   id_person=:NEW.id_person;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
                NULL;
        END;


-- SIR  15787

  IF (  (:OLD.DT_PERSON_BIRTH <> :NEW.DT_PERSON_BIRTH) OR
        (:OLD.DT_PERSON_BIRTH IS NOT NULL AND :NEW.DT_PERSON_BIRTH IS NULL)) THEN

        INSERT INTO adjustment_request
                        (ID_ADJ_REQ,
                        DT_LAST_UPDATE,
                        ID_ADJ_REQ_EVENT,
                        ID_ADJ_REQ_PERSON,
                        ID_CASE,
                        DT_ADJ_REQ_START,
                        DT_ADJ_REQ_END,
                        CD_ADJ_REQ_TYPE)
                        VALUES
                        (0,
                        SYSDATE,
                        NULL,
                        :NEW.ID_PERSON,
                        NULL,
                        :OLD.DT_PERSON_BIRTH,
                        :NEW.DT_PERSON_BIRTH,
                        'PER');

  IF v_id_person is NOT NULL THEN

   BEGIN

  IF v_ind_input_type IS NULL THEN

                        DELETE FROM person_merge_pending
                        WHERE id_person = :NEW.id_person;

         ELSIF v_ind_input_type =1 THEN

      DELETE FROM PERSON_MERGE_PENDING
        WHERE id_group = v_id_group;

  END IF;

                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                          NULL;
        END;

  END IF;
    END IF;


  IF v_id_person is NOT NULL THEN

  IF   ((:OLD.NM_PERSON_FIRST <> :NEW.NM_PERSON_FIRST) OR
    (:OLD.NM_PERSON_MIDDLE <> :NEW.NM_PERSON_MIDDLE) OR
    (:OLD.NM_PERSON_LAST <> :NEW.NM_PERSON_LAST) OR
    (:OLD.NM_PERSON_FULL <> :NEW.NM_PERSON_FULL)) THEN

    BEGIN

  IF v_ind_input_type IS NULL THEN

                        DELETE FROM person_merge_pending
                        WHERE id_person = :NEW.id_person;

        ELSIF v_ind_input_type =1 THEN

       DELETE FROM PERSON_MERGE_PENDING
                        WHERE id_group = v_id_group;

  END IF;

                        EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                                NULL;
          END;


  END IF;
  END IF;



END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_PERSON
BEFORE INSERT
ON CAPS.PERSON
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  --------------------------------------------------------------------------------------
  -- PURPOSE of INSERT trigger: for most cases create a record in table PERSON_HISTORY
  --   for every new PERSON record.  Follow these 3 criteria:
  --
  --   1. if user sets field IND_PERSON_CANCEL_HIST='Y' in Insert statement
  --      then do NOT create a record in table PERSON_HISTORY
  --
  --   2. if user sets field IND_PERSON_CANCEL_HIST to NULL or any value other than Y
  --      in Insert statement, then create a record in table PERSON_HISTORY
  --
  --   3. If user did NOT set field IND_PERSON_CANCEL_HIST at all (not in Insert
  --      stmt) then it is considered a NULL, and hence create a PERSON_HISTORY record
  --
  -- In anyway, field IND_PERSON_CANCEL_HIST will ALWAYS be set to NULL right before
  -- insertion into table PERSON regardless of what the user specifies.
  -- See reason for this decision at bottom of next UPDATE trigger.
  --
  -- Mike Bui: Changes on 11-JAN-95
  --------------------------------------------------------------------------------------
  dummy  NUMBER;
  dummy2 NUMBER;
  dummy_date DATE;
BEGIN
  :NEW.DT_LAST_UPDATE := sysdate;
  if :NEW.ID_PERSON=0 then
    SELECT SEQ_PERSON.NEXTVAL INTO dummy  FROM DUAL;
    :NEW.ID_PERSON := dummy;
  end if;

  --insert into table PERSON_HISTORY if field :NEW.IND_PERSON_CANCEL_HIST is not 'Y':
   IF nvl(:NEW.IND_PERS_CANCEL_HIST,' ') <> 'Y' THEN

  -- Get next sequence value:
  SELECT SEQ_PERSON_HISTORY.NEXTVAL INTO dummy2 FROM DUAL;

  INSERT INTO PERSON_HISTORY (
    NBR_PERS_HIST_AGE,
    DT_PERS_HIST_DEATH,
    DT_PERS_HIST_BIRTH,
    CD_PERS_HIST_RELIGION,
    CD_PERS_HIST_CHAR,
    CD_PERS_HIST_GUARD_CNSRV,
    CD_PERS_HIST_STATUS,
    CD_PERS_HIST_DEATH,
    CD_PERS_HIST_MARITAL_STAT,
    TXT_PERS_HIST_OCCUPATION,
    IND_PERS_HIST_DOB_APPROX,
    CD_PERS_HIST_LIV_ARR,
    CD_PERS_HIST_LANGUAGE,
    CD_PERS_HIST_SEX,
    NM_PERS_HIST_FULL,
    CD_PERS_HIST_ETHNIC,
    ID_PERS_HIST_PERSON,
    ID_PERSON_HISTORY,
    DT_LAST_UPDATE,
    DT_PERS_HIST_EFFECT,
    DT_PERS_HIST_END,
    CD_DISASTER_RLF,
    TXT_CHAR_CMNTS,
    CD_PERS_HIST_NOT_YET_DIAG,
    IND_PERS_HIST_US_CITIZEN,
    CD_PERS_HIST_IMMG_STATUS,
    CD_PERS_HIST_COUNTRY_ORIGIN,
    CD_PERS_HIST_PROOF_CITIZEN,
    CD_PERS_HIST_SUFFIX,
    CD_PERS_HIST_TITLE,
    CD_PERS_HIST_MATCH_TYPE,
    TXT_PERS_HIST_OTHER_RELATIONS,
    CD_SMILE_CLIENT,
    TXT_IDS_NUMBER,
    IND_PREV_ADOPTED,
    IND_PRIVATE,
    IND_PUBLIC,
    IND_INTRNTL,
    CD_ADOPT_STATE,
    CD_ADOPT_COUNTY,
    CD_ADOPT_CNTRY,
    IND_ADOPT_DISLUTON
  )  VALUES  (
    :NEW.NBR_PERSON_AGE,
    :NEW.DT_PERSON_DEATH,
    :NEW.DT_PERSON_BIRTH,
    :NEW.CD_PERSON_RELIGION,
    :NEW.CD_PERSON_CHAR,
    :NEW.CD_PERS_GUARD_CNSRV,
    :NEW.CD_PERSON_STATUS,
    :NEW.CD_PERSON_DEATH,
    :NEW.CD_PERSON_MARITAL_STATUS,
    :NEW.TXT_PERSON_OCCUPATION,
    :NEW.IND_PERSON_DOB_APPROX,
    :NEW.CD_PERSON_LIV_ARR,
    :NEW.CD_PERSON_LANGUAGE,
    :NEW.CD_PERSON_SEX,
    :NEW.NM_PERSON_FULL,
    :NEW.CD_PERSON_ETHNIC_GROUP,
    :NEW.ID_PERSON,
    dummy2,
    sysdate,
    :NEW.DT_LAST_UPDATE,
    NULL,
    :NEW.CD_DISASTER_RLF,
    :NEW.TXT_CHAR_CMNTS,
    :NEW.CD_PERS_NOT_YET_DIAG,
    :NEW.IND_PERSON_US_CITIZEN,
    :NEW.CD_PERSON_IMMIGRATION_STATUS,
    :NEW.CD_PERSON_COUNTRY_ORIGIN,
    :NEW.CD_PERSON_PROOF_CITIZENSHIP,
    :NEW.CD_PERSON_SUFFIX,
    :NEW.CD_PERSON_TITLE,
    :NEW.CD_MATCH_TYPE,
    :NEW.TXT_PERSON_OTHER_RELATIONSHIPS,
    :NEW.CD_SMILE_CLIENT,
    :NEW.TXT_IDS_NUMBER,
    :NEW.IND_PREV_ADOPTED,
    :NEW.IND_PRIVATE,
    :NEW.IND_PUBLIC,
    :NEW.IND_INTRNTL,
    :NEW.CD_ADOPT_STATE,
    :NEW.CD_ADOPT_COUNTY,
    :NEW.CD_ADOPT_CNTRY,
    :NEW.IND_ADOPT_DISLUTON
    );
   END IF;

  --Must always set this field to NULL regardless what the user enters.
  :NEW.IND_PERS_CANCEL_HIST := NULL;
    --See the bottom of UPDATE trigger below for reason.

END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TUBR_LEGAL_ACTIONS_NARR
BEFORE UPDATE
ON CAPS.LEGAL_ACTIONS_NARRATIVE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
  :new.DT_LAST_UPDATE := SYSDATE;
END;
/
/
CREATE OR REPLACE TRIGGER CAPS.TIBR_LEGAL_ACTIONS_NARR
BEFORE INSERT
ON CAPS.LEGAL_ACTIONS_NARRATIVE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
  :new.DT_LAST_UPDATE := SYSDATE;
  SELECT  ID_CASE
  INTO    :new.ID_CASE
  FROM    EVENT
  WHERE    ID_EVENT = :new.ID_EVENT;
EXCEPTION
  WHEN OTHERS THEN
    IF SQL%NOTFOUND THEN
      :new.ID_CASE := NULL;
    END IF;
END;
/

-- This table is for High Availability of EJB Timers
CREATE TABLE CAPS.EJB__TIMER__TBL (
    CREATIONTIMERAW      NUMBER(19)    NOT NULL,
    BLOB                 BLOB          NULL,
    TIMERID              VARCHAR(256)  NOT NULL,
    CONTAINERID          NUMBER(19)    NOT NULL,
    OWNERID              VARCHAR(256)  NULL,
    STATE                INTEGER NOT   NULL,
    PKHASHCODE           INTEGER NOT   NULL,
    INTERVALDURATION     NUMBER(19)    NOT NULL,
    INITIALEXPIRATIONRAW NUMBER(19)    NOT NULL,
    LASTEXPIRATIONRAW    NUMBER(19)    NOT NULL,
    CONSTRAINT PK_EJB__TIMER__TBL PRIMARY KEY (TIMERID)
    USING INDEX TABLESPACE INDEX01
                STORAGE(BUFFER_POOL DEFAULT)
    ENABLE
    VALIDATE
)
TABLESPACE DATA01
LOGGING
STORAGE(BUFFER_POOL DEFAULT)
NOPARALLEL
NOCACHE
;

-- Synonym Alter SQL
{ call dbms_utility.compile_schema('CAPS') };
{ call dbms_utility.compile_schema('CAPSBAT') };
{ call dbms_utility.compile_schema('CAPSON') };
{ call dbms_utility.compile_schema('OPERATOR') };

-- change STGAP00001620
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'APTC', 'Physician Taking Child into Custody');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'ATCM', 'TCM');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'APVC', 'Parent/Child Visit');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'AINQ', 'Inquiry Follow Up');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'DPTC', 'Physician Taking Child into Custody');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'DTCM', 'TCM');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'DPVC', 'Parent/Child Visit');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'DINQ', 'Inquiry Follow Up');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'KPTC', 'Physician Taking Child into Custody');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'KTCM', 'TCM');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'KPVC', 'Parent/Child Visit');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTCTYP', 'KINQ', 'Inquiry Follow Up');

INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BACS', 'Adoption - Child Specific Interview');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'CMC', 'Case Manager Child Visit');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BDSR', 'Diligent Search for Runaway');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BFBF', 'Foster Parent/Biological Family');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BINP', 'Initial Placement');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'IPO', 'Invited person to orientation (Inquiry follow up only)');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BMON', 'Monitoring');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BSIA', 'SI - Administrative Review Packet');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BSIB', 'Sibling Visit');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'BSRE', 'Safety Resource');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DACS', 'Adoption - Child Specific Interview');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DSR', 'Diligent Search for Runaway');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DFBF', 'Foster Parent/Biological Family');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DINP', 'Initial Placement');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DMON', 'Monitoring');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DSIA', 'SI - Administrative Review Packet');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DSIB', 'Sibling Visit');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'DSRE', 'Safety Resource');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KACS', 'Adoption - Child Specific Interview');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KDSR', 'Diligent Search for Runaway');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KFBF', 'Foster Parent/Biological Family');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KINP', 'Initial Placement');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KMON', 'Monitoring');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KSIA', 'SI - Administrative Review Packet');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KSIB', 'Sibling Visit');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTPURP', 'KSRE', 'Safety Resource');
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTPURP' AND CT.CODE='HOM' AND CT.DECODE='Home Visit';
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTPURP' AND CT.CODE='SCS' AND CT.DECODE='School Visit';

INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'ATF', 'Announced Face to Face');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'EMA', 'E-mail');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'INA', 'N/A (Inquiry follow up only)');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'ISC', 'Interested/Still Considering (Inquiry follow up only)');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'LEM', 'Left message (Inquiry follow up only)');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'NOA', 'No answer (Inquiry follow up only)');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'NOI', 'Not Interested (Inquiry follow up only)');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'PHD', 'Phone disconnected (Inquiry follow up only)');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNTMETH', 'UTF', 'Unannounced Face to Face');
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTMETH' AND CT.CODE='AVH' AND CT.DECODE='Announced Home Visit';
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTMETH' AND CT.CODE='UHV' AND CT.DECODE='Unannounced Home Visit';
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTMETH' AND CT.CODE='FV' AND CT.DECODE='Field Visit';
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTMETH' AND CT.CODE='OV' AND CT.DECODE='Office Visit';
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTMETH' AND CT.CODE='CLC' AND CT.DECODE='Collateral Contact';
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTMETH' AND CT.CODE='FHV' AND CT.DECODE='Foster Home Field Visit';
UPDATE CAPS.CODES_TABLES CT SET CT.DT_END = SYSDATE WHERE CT.CODE_TYPE='CCNTMETH' AND CT.CODE='SV' AND CT.DECODE='School Visit';

INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'BHED', 'Health Department');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'BLRA', 'Landlord/Rental Agency');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'BNEI', 'Neighbor');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'BOTR', 'Other relative');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'BUSP', 'U.S.P.S');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'DHED', 'Health Department');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'DLRA', 'Landlord/Rental Agency');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'DNEI', 'Neighbor');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'DOTR', 'Other relative');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'DUSP', 'U.S.P.S');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'KHED', 'Health Department');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'KLRA', 'Landlord/Rental Agency');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'KNEI', 'Neighbor');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'KOTR', 'Other relative');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('COTHCNCT', 'KUSP', 'U.S.P.S');
UPDATE CAPS.CODES_TABLES CT SET CT.DECODE='Bureau of Indian Affairs' WHERE CT.CODE='BSOI' AND CT.CODE_TYPE='COTHCNCT';
UPDATE CAPS.CODES_TABLES CT SET CT.DECODE='Bureau of Indian Affairs' WHERE CT.CODE='DSOI' AND CT.CODE_TYPE='COTHCNCT';
UPDATE CAPS.CODES_TABLES CT SET CT.DECODE='Bureau of Indian Affairs' WHERE CT.CODE='KSOI' AND CT.CODE_TYPE='COTHCNCT';

INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNCTLOC', 'ADO', 'Adoptive Home');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES('CCNCTLOC', 'FIE', 'Field');

-- change STGAP00001628
INSERT INTO CAPS.TASK VALUES(9520,sysdate,'','ADO','','','ADO','CPS','','',1,1,'',1,'',1,0,0,1,'','Adoption Info','CASE_CASESEARCH','CHILD_PLANS_EVENTLIST','ADOPTION_INFORMATION','/subcare/AdoptionInformation/displayAdoption',3,1,0,0);
INSERT INTO CAPS.METAPHOR VALUES(1530,'/workload/EventSearch/displayEventList','ADOPTION_INFORMATION','Adoption Info','','','',sysdate);

--change STGAP00001639
INSERT INTO CAPS.MESSAGE (ID_MESSAGE, DT_LAST_UPDATE, NBR_MESSAGE, TXT_MESSAGE_NAME, TXT_MESSAGE, CD_SOURCE, CD_PRESENTATION, IND_BATCH) VALUES ('', TO_DATE('02/26/2007', 'MM/DD/YYYY'), '30100', 'MSG_ARC_CONSTR_NOVELL_USERNAME', 'Please enter a username that contains between 5 and 20 characters.', '720', '500', 'N');

-- change STGAP00001644
UPDATE CAPS.METAPHOR
SET txt_filter_path='gov.georgia.dhr.dfcs.sacwis.web.metaphor.RestrictedFundsShowTab'
WHERE id_tab=1520;

-- change STGAP00001647
UPDATE CAPS.MESSAGE SET txt_message = 'The Start Date must be before or the same as the End Date'
WHERE nbr_message = 7061;

-- change STGAP00001649
UPDATE CAPS.MESSAGE SET txt_message = 'No Addr/Ph exists for professional. It can be entered in Person Detail.'
WHERE nbr_message = 4030;

-- change STGAP00001650
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES ('CARSAPPT', 'PRQ', 'Pregnancy Verification');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES ('CARSAPPT', 'EPS', 'EPSDT/GA Health Check');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES ('CARSAPPT', 'DEA', 'Developmental Assessment');
INSERT INTO CAPS.CODES_TABLES (CODE_TYPE, CODE, DECODE) VALUES ('CARSAPPT', 'DES', 'Developmental Screen');

-- Ended following Code for Health Detail
UPDATE CAPS.CODES_TABLES SET DT_END = TO_DATE('02/28/2007', 'MM/DD/YYYY') WHERE CODE_TYPE = 'CARSAPPT' AND CODE = 'DEV';

-- change STGAP00001661
insert into CAPS.MESSAGE(NBR_MESSAGE, TXT_MESSAGE_NAME, TXT_MESSAGE, CD_SOURCE, CD_PRESENTATION, IND_BATCH) values (60184, 'MSG_FROM_DT_BEF_TO_DT', 'WTLP Date From must be before WTLP Date To.', 500, 700, 'N');

-- change STGAP00001662
update caps.codes_tables set decode='RBWO' where code='MAT' and code_type='CMEETTYP';
update caps.codes_tables set decode='RBWO Review Meeting' where code='URM' and code_type='CMEETTYP';

-- change STGAP00001663
INSERT INTO CAPS.TASK ( CD_TASK, CD_TASK_EVENT_STATUS, CD_TASK_EVENT_TYPE,
CD_TASK_LIST_WINDOW, CD_TASK_PRIOR, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, CD_TASK_TOP_WINDOW,
IND_TASK_DETAIL_ENABLE, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_LIST_ENABLE,
IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_ENABLE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE,
IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, IND_TASK_TODO_ENABLE, TXT_TASK_DECODE,
TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL, IND_TASK_CODE_PREFER,
IND_TASK_NEW_CASE_TODO_ENABLE, IND_TASK_FORCE_EVENT_LINK,
IND_STAGE_CLOSURE ) VALUES ( 
'5930', 'COMP', 'PPT'
, 'CCMN51W', NULL, 'PFC', 'CPS', 'CSUB06C', NULL, '1', '1', NULL, '1', NULL, '0', '0'
, '0', '1', NULL, 'Team Meetings/Reviews', 'CASE_CASESEARCH', 'CHILD_PLANS_EVENTLIST'
, 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT', 3, '1', '0'
, '0'); 

INSERT INTO CAPS.TASK ( CD_TASK, CD_TASK_EVENT_STATUS, CD_TASK_EVENT_TYPE,
CD_TASK_LIST_WINDOW, CD_TASK_PRIOR, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, CD_TASK_TOP_WINDOW,
IND_TASK_DETAIL_ENABLE, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_LIST_ENABLE,
IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_ENABLE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE,
IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, IND_TASK_TODO_ENABLE, TXT_TASK_DECODE,
TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL, IND_TASK_CODE_PREFER,
IND_TASK_NEW_CASE_TODO_ENABLE, IND_TASK_FORCE_EVENT_LINK,
IND_STAGE_CLOSURE ) VALUES ( 
'5940', 'COMP', 'PPT'
, 'CCMN51W', NULL, 'FPR', 'CPS', 'CSUB06C', NULL, '1', '1', NULL, '1', NULL, '0', '0'
, '0', '1', NULL, 'Team Meetings/Reviews', 'CASE_CASESEARCH', 'FAMILY_PLANS_EVENTLIST'
, 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT', 3, '1', '0'
, '0'); 

INSERT INTO CAPS.TASK ( CD_TASK, CD_TASK_EVENT_STATUS, CD_TASK_EVENT_TYPE,
CD_TASK_LIST_WINDOW, CD_TASK_PRIOR, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, CD_TASK_TOP_WINDOW,
IND_TASK_DETAIL_ENABLE, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_LIST_ENABLE,
IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_ENABLE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE,
IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, IND_TASK_TODO_ENABLE, TXT_TASK_DECODE,
TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL, IND_TASK_CODE_PREFER,
IND_TASK_NEW_CASE_TODO_ENABLE, IND_TASK_FORCE_EVENT_LINK,
IND_STAGE_CLOSURE ) VALUES ( 
'5950', 'COMP', 'PPT'
, 'CCMN51W', NULL, 'INV', 'CPS', 'CSUB06C', NULL, '1', '1', NULL, '1', NULL, '0', '0'
, '0', '1', NULL, 'Team Meetings/Reviews', 'CASE_CASESEARCH', 'RISK_ASSESSMENT_RISKASSMT'
, 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT', 3, '1', '0'
, '0'); 

INSERT INTO CAPS.TASK ( CD_TASK, CD_TASK_EVENT_STATUS, CD_TASK_EVENT_TYPE,
CD_TASK_LIST_WINDOW, CD_TASK_PRIOR, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, CD_TASK_TOP_WINDOW,
IND_TASK_DETAIL_ENABLE, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_LIST_ENABLE,
IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_ENABLE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE,
IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, IND_TASK_TODO_ENABLE, TXT_TASK_DECODE,
TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL, IND_TASK_CODE_PREFER,
IND_TASK_NEW_CASE_TODO_ENABLE, IND_TASK_FORCE_EVENT_LINK,
IND_STAGE_CLOSURE ) VALUES ( 
'5960', 'COMP', 'PPT'
, 'CCMN51W', NULL, 'FSU', 'CPS', 'CSUB06C', NULL, '1', '1', NULL, '1', NULL, '0', '0'
, '0', '1', NULL, 'Team Meetings/Reviews', 'CASE_CASESEARCH', 'FAMILY_PLANS_EVENTLIST'
, 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT', 3, '1', '0'
, '0'); 

-- change STGAP00001667
insert into CAPS.CODES_TABLES(code_type,code,DECODE,dt_last_update) values ('CSECATTR', 'FD', 'Adoption View Access', sysdate);

-- change STGAP00001669
INSERT INTO CAPS.MESSAGE(NBR_MESSAGE, TXT_MESSAGE_NAME, TXT_MESSAGE, CD_SOURCE, CD_PRESENTATION, IND_BATCH) VALUES (60185, 'MSG_FCE_DATE_DEP_CHANGE', 'Removal Household and Deprivation information has been changed as compared to the Initial Application.  Please enter the Effective Date of Deprivation Change.', 700, 500, 'N');

-- change STGAP00001671
UPDATE CAPS.METAPHOR SET txt_tab_url = '/workload/StageClosure/displayServiceDlvryClosure' 
WHERE id_tab = 280;

-- change STGAP00001673
UPDATE CAPS.CODES_TABLES SET DECODE = 'Public Assistance- TANF, Medicaid, SSI, Food Stamps, etc.'
WHERE code = '64' AND code_type = 'CCT';

-- change STGAP00001676
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 435, AMT_STANDARD_OF_NEED = 235 WHERE ID_FCE_AFDC_INCOME_LIMIT = 1;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 649, AMT_STANDARD_OF_NEED = 356 WHERE ID_FCE_AFDC_INCOME_LIMIT = 2;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 784, AMT_STANDARD_OF_NEED = 424 WHERE ID_FCE_AFDC_INCOME_LIMIT = 3;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 925, AMT_STANDARD_OF_NEED = 500 WHERE ID_FCE_AFDC_INCOME_LIMIT = 4;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1060, AMT_STANDARD_OF_NEED = 573 WHERE ID_FCE_AFDC_INCOME_LIMIT = 5;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1149, AMT_STANDARD_OF_NEED = 621 WHERE ID_FCE_AFDC_INCOME_LIMIT = 6;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1243, AMT_STANDARD_OF_NEED = 672 WHERE ID_FCE_AFDC_INCOME_LIMIT = 7;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1319, AMT_STANDARD_OF_NEED = 713 WHERE ID_FCE_AFDC_INCOME_LIMIT = 8;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1389, AMT_STANDARD_OF_NEED = 751 WHERE ID_FCE_AFDC_INCOME_LIMIT = 9;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1487, AMT_STANDARD_OF_NEED = 804 WHERE ID_FCE_AFDC_INCOME_LIMIT = 10;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1591, AMT_STANDARD_OF_NEED = 860 WHERE ID_FCE_AFDC_INCOME_LIMIT = 11;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1635, AMT_STANDARD_OF_NEED = 884 WHERE ID_FCE_AFDC_INCOME_LIMIT = 12;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1679, AMT_STANDARD_OF_NEED = 908 WHERE ID_FCE_AFDC_INCOME_LIMIT = 13;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1723, AMT_STANDARD_OF_NEED = 932 WHERE ID_FCE_AFDC_INCOME_LIMIT = 14;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1767, AMT_STANDARD_OF_NEED = 956 WHERE ID_FCE_AFDC_INCOME_LIMIT = 15;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1811, AMT_STANDARD_OF_NEED = 980 WHERE ID_FCE_AFDC_INCOME_LIMIT = 16;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1855, AMT_STANDARD_OF_NEED = 1004 WHERE ID_FCE_AFDC_INCOME_LIMIT = 17;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1899, AMT_STANDARD_OF_NEED = 1028 WHERE ID_FCE_AFDC_INCOME_LIMIT = 18;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1943, AMT_STANDARD_OF_NEED = 1052 WHERE ID_FCE_AFDC_INCOME_LIMIT = 19;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 1987, AMT_STANDARD_OF_NEED = 1076 WHERE ID_FCE_AFDC_INCOME_LIMIT = 20;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2031, AMT_STANDARD_OF_NEED = 1100 WHERE ID_FCE_AFDC_INCOME_LIMIT = 21;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2075, AMT_STANDARD_OF_NEED = 1124 WHERE ID_FCE_AFDC_INCOME_LIMIT = 22;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2119, AMT_STANDARD_OF_NEED = 1148 WHERE ID_FCE_AFDC_INCOME_LIMIT = 23;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2163, AMT_STANDARD_OF_NEED = 1172 WHERE ID_FCE_AFDC_INCOME_LIMIT = 24;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2207, AMT_STANDARD_OF_NEED = 1196 WHERE ID_FCE_AFDC_INCOME_LIMIT = 25;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2251, AMT_STANDARD_OF_NEED = 1220 WHERE ID_FCE_AFDC_INCOME_LIMIT = 26;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2295, AMT_STANDARD_OF_NEED = 1244 WHERE ID_FCE_AFDC_INCOME_LIMIT = 27;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2339, AMT_STANDARD_OF_NEED = 1268 WHERE ID_FCE_AFDC_INCOME_LIMIT = 28;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2383, AMT_STANDARD_OF_NEED = 1292 WHERE ID_FCE_AFDC_INCOME_LIMIT = 29;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2427, AMT_STANDARD_OF_NEED = 1316 WHERE ID_FCE_AFDC_INCOME_LIMIT = 30;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2471, AMT_STANDARD_OF_NEED = 1340 WHERE ID_FCE_AFDC_INCOME_LIMIT = 31;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2515, AMT_STANDARD_OF_NEED = 1364 WHERE ID_FCE_AFDC_INCOME_LIMIT = 32;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2559, AMT_STANDARD_OF_NEED = 1388 WHERE ID_FCE_AFDC_INCOME_LIMIT = 33;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2603, AMT_STANDARD_OF_NEED = 1412 WHERE ID_FCE_AFDC_INCOME_LIMIT = 34;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2647, AMT_STANDARD_OF_NEED = 1436 WHERE ID_FCE_AFDC_INCOME_LIMIT = 35;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2691, AMT_STANDARD_OF_NEED = 1460 WHERE ID_FCE_AFDC_INCOME_LIMIT = 36;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2735, AMT_STANDARD_OF_NEED = 1484 WHERE ID_FCE_AFDC_INCOME_LIMIT = 37;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2779, AMT_STANDARD_OF_NEED = 1508 WHERE ID_FCE_AFDC_INCOME_LIMIT = 38;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2823, AMT_STANDARD_OF_NEED = 1532 WHERE ID_FCE_AFDC_INCOME_LIMIT = 39;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2867, AMT_STANDARD_OF_NEED = 1556 WHERE ID_FCE_AFDC_INCOME_LIMIT = 40;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2911, AMT_STANDARD_OF_NEED = 1580 WHERE ID_FCE_AFDC_INCOME_LIMIT = 41;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2955, AMT_STANDARD_OF_NEED = 1604 WHERE ID_FCE_AFDC_INCOME_LIMIT = 42;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 2999, AMT_STANDARD_OF_NEED = 1628 WHERE ID_FCE_AFDC_INCOME_LIMIT = 43;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3043, AMT_STANDARD_OF_NEED = 1652 WHERE ID_FCE_AFDC_INCOME_LIMIT = 44;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3087, AMT_STANDARD_OF_NEED = 1676 WHERE ID_FCE_AFDC_INCOME_LIMIT = 45;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3131, AMT_STANDARD_OF_NEED = 1700 WHERE ID_FCE_AFDC_INCOME_LIMIT = 46;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3175, AMT_STANDARD_OF_NEED = 1724 WHERE ID_FCE_AFDC_INCOME_LIMIT = 47;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3219, AMT_STANDARD_OF_NEED = 1748 WHERE ID_FCE_AFDC_INCOME_LIMIT = 48;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3263, AMT_STANDARD_OF_NEED = 1772 WHERE ID_FCE_AFDC_INCOME_LIMIT = 49;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3307, AMT_STANDARD_OF_NEED = 1796 WHERE ID_FCE_AFDC_INCOME_LIMIT = 50;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3351, AMT_STANDARD_OF_NEED = 1820 WHERE ID_FCE_AFDC_INCOME_LIMIT = 51;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3395, AMT_STANDARD_OF_NEED = 1844 WHERE ID_FCE_AFDC_INCOME_LIMIT = 52;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3439, AMT_STANDARD_OF_NEED = 1868 WHERE ID_FCE_AFDC_INCOME_LIMIT = 53;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3483, AMT_STANDARD_OF_NEED = 1892 WHERE ID_FCE_AFDC_INCOME_LIMIT = 54;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3527, AMT_STANDARD_OF_NEED = 1916 WHERE ID_FCE_AFDC_INCOME_LIMIT = 55;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3571, AMT_STANDARD_OF_NEED = 1940 WHERE ID_FCE_AFDC_INCOME_LIMIT = 56;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3615, AMT_STANDARD_OF_NEED = 1964 WHERE ID_FCE_AFDC_INCOME_LIMIT = 57;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3659, AMT_STANDARD_OF_NEED = 1988 WHERE ID_FCE_AFDC_INCOME_LIMIT = 58;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3703, AMT_STANDARD_OF_NEED = 2012 WHERE ID_FCE_AFDC_INCOME_LIMIT = 59;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3747, AMT_STANDARD_OF_NEED = 2036 WHERE ID_FCE_AFDC_INCOME_LIMIT = 60;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3791, AMT_STANDARD_OF_NEED = 2060 WHERE ID_FCE_AFDC_INCOME_LIMIT = 61;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3835, AMT_STANDARD_OF_NEED = 2084 WHERE ID_FCE_AFDC_INCOME_LIMIT = 62;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3879, AMT_STANDARD_OF_NEED = 2108 WHERE ID_FCE_AFDC_INCOME_LIMIT = 63;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3923, AMT_STANDARD_OF_NEED = 2132 WHERE ID_FCE_AFDC_INCOME_LIMIT = 64;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 3967, AMT_STANDARD_OF_NEED = 2156 WHERE ID_FCE_AFDC_INCOME_LIMIT = 65;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4011, AMT_STANDARD_OF_NEED = 2180 WHERE ID_FCE_AFDC_INCOME_LIMIT = 66;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4055, AMT_STANDARD_OF_NEED = 2204 WHERE ID_FCE_AFDC_INCOME_LIMIT = 67;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4099, AMT_STANDARD_OF_NEED = 2228 WHERE ID_FCE_AFDC_INCOME_LIMIT = 68;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4143, AMT_STANDARD_OF_NEED = 2252 WHERE ID_FCE_AFDC_INCOME_LIMIT = 69;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4187, AMT_STANDARD_OF_NEED = 2276 WHERE ID_FCE_AFDC_INCOME_LIMIT = 70;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4231, AMT_STANDARD_OF_NEED = 2300 WHERE ID_FCE_AFDC_INCOME_LIMIT = 71;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4275, AMT_STANDARD_OF_NEED = 2324 WHERE ID_FCE_AFDC_INCOME_LIMIT = 72;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4319, AMT_STANDARD_OF_NEED = 2348 WHERE ID_FCE_AFDC_INCOME_LIMIT = 73;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4363, AMT_STANDARD_OF_NEED = 2372 WHERE ID_FCE_AFDC_INCOME_LIMIT = 74;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4407, AMT_STANDARD_OF_NEED = 2396 WHERE ID_FCE_AFDC_INCOME_LIMIT = 75;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4451, AMT_STANDARD_OF_NEED = 2420 WHERE ID_FCE_AFDC_INCOME_LIMIT = 76;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4495, AMT_STANDARD_OF_NEED = 2444 WHERE ID_FCE_AFDC_INCOME_LIMIT = 77;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4539, AMT_STANDARD_OF_NEED = 2468 WHERE ID_FCE_AFDC_INCOME_LIMIT = 78;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4583, AMT_STANDARD_OF_NEED = 2492 WHERE ID_FCE_AFDC_INCOME_LIMIT = 79;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4627, AMT_STANDARD_OF_NEED = 2516 WHERE ID_FCE_AFDC_INCOME_LIMIT = 80;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4671, AMT_STANDARD_OF_NEED = 2540 WHERE ID_FCE_AFDC_INCOME_LIMIT = 81;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4715, AMT_STANDARD_OF_NEED = 2564 WHERE ID_FCE_AFDC_INCOME_LIMIT = 82;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4759, AMT_STANDARD_OF_NEED = 2588 WHERE ID_FCE_AFDC_INCOME_LIMIT = 83;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4803, AMT_STANDARD_OF_NEED = 2612 WHERE ID_FCE_AFDC_INCOME_LIMIT = 84;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4847, AMT_STANDARD_OF_NEED = 2636 WHERE ID_FCE_AFDC_INCOME_LIMIT = 85;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4891, AMT_STANDARD_OF_NEED = 2660 WHERE ID_FCE_AFDC_INCOME_LIMIT = 86;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4935, AMT_STANDARD_OF_NEED = 2684 WHERE ID_FCE_AFDC_INCOME_LIMIT = 87;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 4979, AMT_STANDARD_OF_NEED = 2708 WHERE ID_FCE_AFDC_INCOME_LIMIT = 88;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5023, AMT_STANDARD_OF_NEED = 2732 WHERE ID_FCE_AFDC_INCOME_LIMIT = 89;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5067, AMT_STANDARD_OF_NEED = 2756 WHERE ID_FCE_AFDC_INCOME_LIMIT = 90;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5111, AMT_STANDARD_OF_NEED = 2780 WHERE ID_FCE_AFDC_INCOME_LIMIT = 91;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5155, AMT_STANDARD_OF_NEED = 2804 WHERE ID_FCE_AFDC_INCOME_LIMIT = 92;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5199, AMT_STANDARD_OF_NEED = 2828 WHERE ID_FCE_AFDC_INCOME_LIMIT = 93;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5243, AMT_STANDARD_OF_NEED = 2852 WHERE ID_FCE_AFDC_INCOME_LIMIT = 94;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5287, AMT_STANDARD_OF_NEED = 2876 WHERE ID_FCE_AFDC_INCOME_LIMIT = 95;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5331, AMT_STANDARD_OF_NEED = 2900 WHERE ID_FCE_AFDC_INCOME_LIMIT = 96;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5375, AMT_STANDARD_OF_NEED = 2924 WHERE ID_FCE_AFDC_INCOME_LIMIT = 97;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5419, AMT_STANDARD_OF_NEED = 2948 WHERE ID_FCE_AFDC_INCOME_LIMIT = 98;
UPDATE CAPS.FCE_AFDC_INCOME_LIMIT SET AMT_GROSS_INCOME_CEILING = 5463, AMT_STANDARD_OF_NEED = 2972 WHERE ID_FCE_AFDC_INCOME_LIMIT = 99;

-- change STGAP00001679
UPDATE CAPS.CODES_TABLES SET DECODE='The child is 18 years of age or older.' WHERE code_type='CFCERNE' AND code='A01'; 
UPDATE CAPS.CODES_TABLES SET DECODE='The child is not a U.S. Citizen, Other Qualified Alien, or Permanent Resident.' WHERE code_type='CFCERNE' AND code='A02'; 
UPDATE CAPS.CODES_TABLES SET DECODE='Deprivation does not exist in the Removal Home.' WHERE code_type='CFCERNE' AND code='A03'; 
UPDATE CAPS.CODES_TABLES SET DECODE='The child does not meet the specified relative criteria.' WHERE code_type='CFCERNE' AND code='A04';
UPDATE CAPS.CODES_TABLES SET DECODE='The Assistance Unit''s Income is greater than the AFDC Gross Income Limit.' WHERE code_type='CFCERNE' AND code='A05';
UPDATE CAPS.CODES_TABLES SET DECODE='A court order did not give DFCS custody.' WHERE code_type='CFCERNE' AND code='A10';
INSERT INTO CAPS.CODES_TABLES(code_type,code,DECODE,dt_last_update) VALUES('CFCERNE','A11','The Assistance Unit''s Income (minus deductions) is greater than or equal to the AFDC Standard of Need Income Limit for this Assistance Unit (based on Standard of Need Test).',SYSDATE); 
INSERT INTO CAPS.CODES_TABLES(code_type,code,DECODE,dt_last_update) VALUES('CFCERNE','A12','TThe Assistance Unit''s Income (minus deductions) is greater than or equal to the AFDC Standard of Need Income Limit for this Assistance Unit (based on $30 and 1/3 Test).',SYSDATE); 

-- change STGAP00001680
Insert into CAPS.TASK
   (CD_TASK, CD_TASK_EVENT_TYPE, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE, IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, TXT_TASK_DECODE, TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL)
 Values
   ('9450', 'APP', 'FPR', 'CPS', '0', '1', '1', '0', '0', '0', '0', 'Approve Team Meetings/Reviews', 'CASE_CASESEARCH', 'FAMILY_PLANS_EVENTLIST', 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT');
Insert into CAPS.TASK
   (CD_TASK, CD_TASK_EVENT_TYPE, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE, IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, TXT_TASK_DECODE, TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL)
 Values
   ('9420', 'APP', 'PFC', 'CPS', '0', '1', '1', '0', '0', '0', '0', 'Approve Team Meetings/Reviews', 'CASE_CASESEARCH', 'CHILD_PLANS_EVENTLIST', 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT');
Insert into CAPS.TASK
   (CD_TASK, CD_TASK_EVENT_TYPE, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE, IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, TXT_TASK_DECODE, TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL)
 Values
   ('9430', 'APP', 'INV', 'CPS', '0', '1', '1', '0', '0', '0', '0', 'Approve Team Meetings/Reviews', 'CASE_CASESEARCH', 'RISK_ASSESSMENT_RISKASSMT', 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT');
Insert into CAPS.TASK
   (CD_TASK, CD_TASK_EVENT_TYPE, CD_TASK_STAGE, CD_TASK_STAGE_PROGRAM, IND_TASK_EVENT_CREATE, IND_TASK_EVENT_NAVIG, IND_TASK_MULTIPLE_INSTANCE, IND_TASK_NEW_USING, IND_TASK_NU_ACROSS_CASE, IND_TASK_RTRV_PRIOR_STAGE, IND_TASK_SHOW_IN_LIST, TXT_TASK_DECODE, TXT_1ST_TAB, TXT_2ND_TAB, TXT_3RD_TAB, TXT_EVENT_DETAIL_URL)
 Values
   ('9440', 'APP', 'FSU', 'CPS', '0', '1', '1', '0', '0', '0', '0', 'Approve Team Meetings/Reviews', 'CASE_CASESEARCH', 'FAMILY_PLANS_EVENTLIST', 'PERMANENCY_PLANNING_REVIEW_PPT_EVENTLIST', '/subcare/PPT/displayPPT');


insert into caps.schema_version (id_schema_version, application_version, comments)
                         values (135, 'SacwisRev2', 'static updates, new legal action narrative table, other field changes');
 
commit;
