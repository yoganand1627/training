package gov.georgia.dhr.dfcs.sacwis.core.pagination;

import java.io.Serializable;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import org.grnds.facility.log.GrndsTrace;

/**
 * This class contains important details for requests and results of searches. It should be attached to all classes that
 * extend the BasePaginationValueBean class, whether they be a request for data or the results of a search.   A
 * DatabaseResultDetails object will be created with the request bean at the web tier and transferred to the result bean
 * in a data access class, where data is added to it about the results.  Upon being returned and the results being
 * posted to a JSP page the object will be made available for garbage collection.
 * <p/>
 * <pre>
 * Change History:
 *  Date        User      Description
 *  ----------  --------  --------------------------------------------------
 *  11/26/03    dejuanr   SIR 19870 - Added new obtainNumberOfResults function
 *  07/20/04    gerryc    SIR 15533 - added orderBy and orderByDirection to
 *                        the list of parameters that should be excluded from
 *                        the URL parameters.  They are already correctly
 *                        generated in the value bean helper, depending on if a
 *                        page has reloaded itself or if a new page is loading.
 * </pre>
 *
 * @author Randy O'Neil
 * @author October 12
 * @author 2001
 */
public class DatabaseResultDetails implements Serializable {
  public static final String RESULTS_PER_PAGE_NAME = "resultsPerPage";
  //private static final String FORM_VALIDATION_FLAG = "FormValidationFlag";
  //private static final String FORM_VALIDATION_URL = "FormValidationUrl";
  private static final String TRACE_TAG = "DatabaseResultDetails"; //for tracing

  private static int DEFAULT_FETCH_SIZE = 25;
  // instance variables
  private int numberOfResults; //For Tuxedo Services, Set this to (resultsPerPage * requestedPage) + 1 if bMoreDataInd is true.
  private int resultsPerPage;
  private int requestedPage;
  private String orderBy;
  private String orderByDirection;
  private Map<String, String> requestParameters = new HashMap<String, String>();
  private String url;

  /**
   * This method returns the number of results of a search.  It is used by the ResultsPaginationTag to display the total
   * number of results.  It is also used to generate the number of pages of results.
   *
   * @return int the number of results to this search
   */
  public int getNumberOfResults() {
    return this.numberOfResults;
  }

  // SIR 19870 - Added new function to deal with TYPE_FORWARD resultSets
  public void readUpToFirstResult(ResultSet resultSet)
          throws SQLException {
    // From the details object, get the first result and last result to return on this page
    int firstResult = this.getFirstResultRequested();

    // Go to one row before the first result requested. The while loop we're about to
    // go through will increment us to the first row requested. Unfortunately,
    // resultSet.absolute(0) won't work, so we'll have to use resultSet.beforeFirst()
    // whenever the first result requested is at row 1.
    if (firstResult > 1) {
      int fetchSize = resultsPerPage;
      if (fetchSize <= 0) {
        fetchSize = DEFAULT_FETCH_SIZE;
      }
      resultSet.setFetchSize(fetchSize);
      resultSet.next();
      while (resultSet.getRow() < (firstResult - 1)) {
        resultSet.next();
      }
    }
  }

  public void obtainNumberOfResults(ResultSet resultSet) throws SQLException {
    // Navigate to the last record; store its row number in the details object,
    // indicating the total number of results
    resultSet.last();
    this.setNumberOfResults(resultSet.getRow());

    // From the details object, get the first result and last result to return on this page
    int firstResult = this.getFirstResultRequested();

    // Go to one row before the first result requested. The while loop we're about to
    // go through will increment us to the first row requested. Unfortunately,
    // resultSet.absolute(0) won't work, so we'll have to use resultSet.beforeFirst()
    // whenever the first result requested is at row 1.
    if (firstResult > 1) {
      resultSet.absolute(firstResult - 1);
    } else {
      resultSet.beforeFirst();
    } // end if else
  }

  /**
   * This returns the number of pages of results from a search.  This is generated by dividing the number of results by
   * the number of results to display per page and rounding up.
   *
   * @return int the number of result pages for this search
   */
  public int getNumberOfResultPages() {
    GrndsTrace.enterScope(DatabaseResultDetails.TRACE_TAG + ".getNumberOfResultPages");
    //Use the mod operator to see if the division was not even
    int resultPages = (this.numberOfResults / this.resultsPerPage);
    int remainder = (this.numberOfResults % this.resultsPerPage);

    //If these division did not occur evenly, add an extra page for the remaining results
    if (remainder > 0) {
      resultPages++;
    }
    GrndsTrace.exitScope(resultPages);
    return resultPages;

  }

  /**
   * This method returns the first result that should be retrieved to get the results needed in order to display this
   * specific page.  For instance, if this is page 2 and each page has 25 results we'll want to have the first result be
   * #26)
   *
   * @return int the first result to get from the ResultSet
   */
  public int getFirstResultRequested() {
    return (this.getRequestedPage() - 1) * this.getResultsPerPage() + 1;
  }

  /**
   * This method returns the last result to be retrieved to display the page the user requested.  For instance, if this
   * is page 2 and each page displays 25 results it would be 50 (or alternatively, the last result in the ResultSet
   * should there be less than 50).
   *
   * @return int the last result to get from the ResultSet
   */
  public int getLastResultRequested() {
    int tempLastResult = this.getRequestedPage() * this.getResultsPerPage();
    // if we're on the last page it may be less:
    return Math.min(tempLastResult, this.getNumberOfResults());
  }

  /**
   * This returns the number of results to display per page
   *
   * @return int the number of results to display per page
   */
  public int getResultsPerPage() {
    return this.resultsPerPage;
  }

  /**
   * This method sets the number of results that should be on each page.  This is set automatically by the
   * DataSearchRequestProcessor from the HttpServletRequest.
   *
   * @param resultsPerPage the number of results to show per page
   */
  public void setResultsPerPage(int resultsPerPage) {
    this.resultsPerPage = resultsPerPage;
  }

  /**
   * This method returns the page number the user has requested.
   *
   * @return int the requested page
   */
  public int getRequestedPage() {
    return this.requestedPage;
  }

  /**
   * This method sets the page number the user has requested.  It should be set automatically by the
   * DataSearchRequestProcessor from the HttpServletRequest.
   *
   * @param requestedPage the requested page
   */
  public void setRequestedPage(int requestedPage) {
    this.requestedPage = requestedPage;
  }

  /**
   * This method will return the column name to sort the results by.  This value should be used in the creation of the
   * SQL select statement.
   *
   * @return String The orderBy value.
   */
  public String getOrderBy() {
    return this.orderBy;
  }

  /**
   * This method will set the orderBy value.
   *
   * @param orderBy The orderBy value.
   */
  public void setOrderBy(String orderBy) {
    if (orderBy != null && orderBy.length() > 0) {
      this.orderBy = orderBy;
    }
  }

  /**
   * This method will set the direction to sort the results by
   *
   * @return String The direction to implement the orderBy value.
   */
  public String getOrderByDirection() {
    return this.orderByDirection;
  }

  /**
   * This method will return the direction to sort the results by
   *
   * @param orderByDirection The direction to implement the orderBy value.
   */
  public void setOrderByDirection(String orderByDirection) {
    if (orderByDirection != null && orderByDirection.length() > 0) {
      this.orderByDirection = orderByDirection;
    }
  }

  /**
   * This method returns the parameters that were retrieved from the request.
   *
   * @return HashMap the parameters from the request.
   */
  public Map getUrlParameters() {
    return this.requestParameters;
  }

  /**
   * This method will be used by the SortableColumnTag to get the complete URL with parameters.
   *
   * @return String The complete URL with all search parameters
   */
  public String getUrlWithRequestParameters() {
    return this.url;
  }

  public void setUrlParameters(Map<String, String> parameters) {
    this.requestParameters = parameters;
  }

  /**
   * This method is used by the ResultsPaginationTag to share the URL information in order to allow the creation of
   * sorting links on the tables that display the results.
   */
  public void createUrl(String url) {
    this.url = url;
  }

  /**
   * This method sets the number of results for a search.
   *
   * @param numberOfResults The number of results generated
   */
  public void setNumberOfResults(int numberOfResults) {
    this.numberOfResults = numberOfResults;
  }

  public String toString() {
    return "getNumberOfResultPages:" + this.getNumberOfResultPages()
           + " getNumberOfResults:" + this.getNumberOfResults()
           + " getRequestedPage:" + this.getRequestedPage();
  }
}
