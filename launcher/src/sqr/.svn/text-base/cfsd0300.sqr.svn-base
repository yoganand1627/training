!*****************************************************************************
!  CONTACT LOG REPORT                                                        *
!*****************************************************************************  

!*****************************************************************************
!                                                                            *
! PROGRAM NAME:         cfsd0300.sqr                                         *
!                                                                            *
! PROGRAM LOCATION:     /caps/users/mccleabg/work/sqr                        *
!                                                                            *
!                                                                            *
! DATE:                  9/13/95                                             *
!                                                                            *
! PROGRAMMER NAME:      Brad McCleary                                        *
!                                                                            *
! PROGRAM DESCRIPTION:  The Contact Log Report is on-demand and is used to   *
!                       record contacts at any stage during a specified      * 
!                       time period.  Each person addressed in a contact is  *  
!                       listed by name.                                      *
!*****************************************************************************

!*****************************************************************************
!                                                                            *
! PROGRAM MODIFICATION SECTION                                               *
! ----------------------------                                               *
!                                                                            *
!   DATE     PROGRAMMER                       MODIFICATION                   *
! --------   ----------   -------------------------------------------------  *
! 10/13/95   SOOLEYAG     SIR #1771 - Updated to correct report formatting   *
!                                 problems.                              *
!                                                                            *
! 10/20/95   SOOLEYAG     SIR #1878 - Updated the SELECT statement to only   *
!                         select contact information for contacts that where *
!                         the corresponding cd_event_status on EVENT table   *
!                         is not = 'NEW'.                                    *
!                                                                            *
! 01/11/96   SOOLEYAG     SIR #2549 - Added required logic to handle null    *
!                         dates (i.e., '') passed in as parameters.          *
!                                                                            *
! 03/20/96   B. McCleary  SIR 5135 - Added a condition in order to retrieve  *
!                         the worker with a name date end of MAXDATE         *
!                                                                            *
! 05/09/96   B. McCleary  SIR 20957 - Added condition to print statement and *
!            &  K. Cys    a new procedure to allow for printing of client    *
!                         names and entities (like Law Enforcement) when a   *
!                         contact type is 'Notification'                     *
! 05/22/96   B. McCleary  SIR 5345 - Changed the evaluate statements to skip *
!                         lines according to total contact AND other names in*
!                         case both or neither exist; added a line to        *
!                         separate each log.                                 *
! 06/17/97   T. Yantis    SIR 13774 - Don't want to print time anymore for   *
!                         CPS or CCL contacts where the time is 12:00 AM     *
!*****************************************************************************

!*****************************************************************************
!                                                                            *
! REPORT PROCESSING SECTION                                                  *
!                                                                            *
!       This procedure defines the beginning and end of the report proc-     *
!       essing. Housekeeping initializes all report values, Processing       *
!       processes the body of the report, and Wrap-Up prints the end of re-  *
!       port message and other wrap up functions.                            *
!                                                                            *
!*****************************************************************************

BEGIN-REPORT

    do HOUSEKEEPING

    do PROCESS-REPORT        

    do WRAP-UP

END-REPORT

!*****************************************************************************
!  SETUP-SECTION                                                             *
!                                                                            *
!       This section sets up common parameters including page size and       *
!       printer as well as input parameters                                  *
!                                                                            *
!*****************************************************************************

BEGIN-SETUP

    #ifdef ORACLE                       !compiler directive
        ask dbname 'Database Name'
        use {dbname}
    #endif

    #INCLUDE 'setup02b.sqc'             ! control codes for Portrait 
                                        ! On Demand Reports              

    ask ID_STAGE                        ! input parameter
    ask SCR_SEARCH_DATE_FROM            ! input parameter 
    ask SCR_SEARCH_DATE_TO              ! input parameter 
                                       

END-SETUP

!*****************************************************************************
!                                                                            *
! HEADER                                                                     *
!                                                                            *
!       These commands will be processed every time SQR writes a page. They  *
!       include the report title, date, time, page number, report id, and    *
!       column headers. XXX lines are reserved to print the heading at the   *
!       top of each page. This includes blank lines. A common setup header   *
!       has been created called XXXXXXXXXXXXXXXXXXX for landscape or portrait*
!       reports.                                                             *
!                                                                            *
!*****************************************************************************

BEGIN-HEADING 8 

  #INCLUDE 'header04.sqc'               !Include file with Header Information
                                !Specific to portrait on demand reports

  print 'LOG OF CONTACTS'                     (+2) center

  print 'Date From: '                         (+3,7)

  if      $input_begin_date <> '01/01/0001'
    print   $input_begin_date                 (+0,18)
  end-if          

  print 'Date To: '                           (+0,45)

  if      $input_end_date    <> '12/31/4712'
    print   $input_end_date                   (+0,54)
  end-if          

END-HEADING

!*****************************************************************************
!                                                                            *
! FOOTER                                                                     *
!                                                                            *
!       These commands will be processed every time SQR writes a page. They  *
!       include a footer that must be in place in all pages of some reports  *
!                                                                            *
!*****************************************************************************

BEGIN-FOOTING 2

  #INCLUDE 'footer04.sqc'       ! Include file with footer information
                            ! specific to portrait on demand report

END-FOOTING

!****************************************************************************
!                                                                           *
!   HOUSEKEEPING                                                            *
!                                                                           *
!       Set environment variables, initialize report id, initialize title   *
!       id, initialize date and time, initialize variables, and define      *
!       constants                                                           *
!                                                                           *
!       CALLED BY: BEGIN-REPORT                                             *
!       CALLS:     GET-CASE-NAME-NUMBER                                     * 
!****************************************************************************

BEGIN-PROCEDURE HOUSEKEEPING

   #INCLUDE 'setenv.sqc'       !Set printer environment

   move  {ID_STAGE}                 to #input_id_stage
   move '{SCR_SEARCH_DATE_FROM}'    to $input_begin_date
   move '{SCR_SEARCH_DATE_TO}'      to $input_end_date

   !***********************************************************************
   ! SIR #2549 - Need to handle null dates                                *
   !***********************************************************************
   let $input_begin_date = ltrim($input_begin_date,' ')
   let $input_end_date = ltrim($input_end_date,' ')

   if rtrim($input_begin_date,'') = ''
      move '01/01/0001' to $input_begin_date
   end-if
   
   if rtrim($input_end_date,'') = ''
      move '12/31/4712' to $input_end_date
   end-if
   
   do GET-CASE-NAME-NUMBER

  !************************************************
  ! Variables and Constants                       *
  !************************************************
   move 'NEW'           to $NEW

END-PROCEDURE HOUSEKEEPING

!****************************************************************************
!                                                                           *
!   PROCESS-REPORT                                                          *
!                                                                           *
!      This procedure includes the main processing logic of the report.     *
!                                                                           *
!       CALLED BY  : BEGIN-REPORT                                           *
!       CALLS      : GET-CONTACT-INFO                                       *
!****************************************************************************

BEGIN-PROCEDURE PROCESS-REPORT 

    do GET-CONTACT-INFO

END-PROCEDURE PROCESS-REPORT                   

!****************************************************************************
!                                                                           *
!   GET-CASE-NAME-NUMBER                                                    *
!                                                                           *
!       This procedure will get the case name and case number using the     *
!       id_stage asked for.                                                 *
!                                                                           * 
!       CALLED BY  : HOUSEKEEPING                                           *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-CASE-NAME-NUMBER

BEGIN-SELECT ON-ERROR=SqlErrorHandle

A.NM_CASE                   
    move &A.NM_CASE     to $Case_Name         
                
A.ID_CASE
    move &A.ID_CASE     to #Case_Number           

FROM  CAPS_CASE         A,
      STAGE             B

WHERE A.ID_CASE  = B.ID_CASE            
AND   B.ID_STAGE = #input_id_stage

END-SELECT
    
END-PROCEDURE GET-CASE-NAME-NUMBER


!****************************************************************************
!                                                                           *
!   GET-CONTACT-INFO                                                        *
!                                                                           *
!       This procedure will get all the information for a contact including *
!       the worker name, but excluding the persons related to the contract. *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : FIRST-CONTACT-PRINT, GET-CONTACT-NAMES, GET-OTHERS,    *
!                    PRINT-CONTACT-LOG                                      * 
!****************************************************************************

BEGIN-PROCEDURE GET-CONTACT-INFO 

    move 0      to #count_1             ! initialize the counter

BEGIN-SELECT ON-ERROR=SqlErrorHandle

CCNTCTYP.DECODE
    move &CCNTCTYP.DECODE               to $contact_type
    
CCNTPURP.DECODE
    move &CCNTPURP.DECODE               to $contact_purpose
    
CCNTMETH.DECODE
    move &CCNTMETH.DECODE               to $contact_method
    
CCNCTLOC.DECODE
    move &CCNCTLOC.DECODE               to $contact_location
    
CON.ID_EVENT
    move &CON.ID_EVENT                  to #id_event
    
CON.IND_CONTACT_ATTEMPTED
    move &CON.IND_CONTACT_ATTEMPTED     to $contact_attempted
    
to_char(CON.DT_CONTACT_OCCURRED, 'MM/DD/YYYY HH:MI AM') &date
    move &date                          to $contact_date_time

    let $contact_date = substr($contact_date_time, 1, 10)
    let $contact_time = substr($contact_date_time, 12, 8)

NM.NM_NAME_FIRST
    move &NM.NM_NAME_FIRST              to $worker_first_name
    
NM.NM_NAME_MIDDLE
    move &NM.NM_NAME_MIDDLE             to $worker_middle_name
    
NM.NM_NAME_LAST
    move &NM.NM_NAME_LAST               to $worker_last_name

CSUFFIX2.decode
    move &CSUFFIX2.decode               to $worker_suffix_name

nvl(NARR.ID_EVENT, 0)  &event
    move &event                         to #id_narr_event
   
ST.CD_STAGE_PROGRAM
    move &ST.CD_STAGE_PROGRAM               to $program  !***SIR 13774***
    
    let #count_1 = #count_1 +1 

    if #count_1 = 1
        do FIRST-CONTACT-PRINT
        do GET-OTHERS     !***SIR 20957***
        do GET-CONTACT-NAMES

        evaluate #name_count  !***SIR 5345***
          when = 1
            print ''              (+5)
            break
          when = 2
            print ''              (+4)
            break
          when = 3
            print ''              (+3)
            break
          when = 4
            print ''              (+2)
            break
          when = 5
            print ''              (+1)
            break
          when-other
            break
        end-evaluate

    else    
        do PRINT-CONTACT-LOG 
        do GET-OTHERS     !***SIR 20957***
        do GET-CONTACT-NAMES

        evaluate #name_count  !***SIR 5345***
          when = 1
            print ''              (+5)
            break
          when = 2
            print ''              (+4)
            break
          when = 3
            print ''              (+3)
            break
          when = 4
            print ''              (+2)
            break
          when = 5
            print ''              (+1)
            break
          when-other
            break
        end-evaluate

    end-if    


FROM    CCNTCTYP                CCNTCTYP,
        CCNTPURP                CCNTPURP,
        CCNTMETH                CCNTMETH,
        CCNCTLOC                CCNCTLOC,
  CSUFFIX2                CSUFFIX2,
        CONTACT_NARRATIVE       NARR,
        CONTACT                 CON,
        NAME                    NM,
        EVENT                   EVT,
        STAGE                   ST  !***SIR 13774***
        
WHERE       CON.ID_CONTACT_STAGE  =  #input_id_stage
AND         ST.ID_STAGE           =  CON.ID_CONTACT_STAGE
AND         EVT.ID_EVENT          =  CON.ID_EVENT
AND         EVT.CD_EVENT_STATUS   <> $NEW
AND         trunc(CON.DT_CONTACT_OCCURRED) 
            between $input_begin_date
            AND     $input_end_date
AND         CON.ID_CONTACT_WORKER =  NM.ID_PERSON
AND         NM.IND_NAME_INVALID = 'N'
AND         NM.IND_NAME_PRIMARY = 'Y'
AND         NM.DT_NAME_END_DATE = '12/31/4712'     !***SIR 5135***
AND         CSUFFIX2.CODE (+) = NM.CD_NAME_SUFFIX
AND         CCNTCTYP.CODE (+) = CON.CD_CONTACT_TYPE
AND         CCNTPURP.CODE (+) = CON.CD_CONTACT_PURPOSE
AND         CCNTMETH.CODE (+) = CON.CD_CONTACT_METHOD
AND         CCNCTLOC.CODE (+) = CON.CD_CONTACT_LOCATION
AND         NARR.ID_EVENT (+) = CON.ID_EVENT

ORDER BY    CON.DT_CONTACT_OCCURRED

END-SELECT    

END-PROCEDURE GET-CONTACT-INFO 

!****************************************************************************
!                                                                           *
!   GET-CONTACT-NAMES                                                       *
!                                                                           *
!       This procedure retrieves the contact names from the database.       *
!                                                                           * 
!       CALLED BY  : GET-CONTACT-INFO                                       *
!       CALLS      : PRINT-CONTACT-NAME                                     *
!****************************************************************************

BEGIN-PROCEDURE GET-CONTACT-NAMES

    move 0        to #count_2

BEGIN-SELECT ON-ERROR=SqlErrorHandle
    
NM1.NM_NAME_FIRST
    move &NM1.NM_NAME_FIRST             to $contact_first_name
        
NM1.NM_NAME_MIDDLE
    move &NM1.NM_NAME_MIDDLE            to $contact_middle_name
      
NM1.NM_NAME_LAST 
    move &NM1.NM_NAME_LAST              to $contact_last_name

CSUFFIX2A.decode
    move &CSUFFIX2A.decode              to $contact_suffix_name
    
    let #count_2 = #count_2 +1
    let #name_count =  #name_count + 1

    do PRINT-CONTACT-NAME

FROM        NAME               NM1,
      CSUFFIX2           CSUFFIX2A,
            EVENT_PERSON_LINK  EPL
            
WHERE       EPL.ID_EVENT  = #id_event
AND         EPL.ID_PERSON = NM1.ID_PERSON
AND         NM1.IND_NAME_INVALID = 'N'
AND         NM1.IND_NAME_PRIMARY = 'Y'
AND         NM1.DT_NAME_END_DATE = '12/31/4712'
AND         NM1.CD_NAME_SUFFIX   = CSUFFIX2A.CODE(+)

ORDER BY    EPL.ID_PERSON DESC 
    
END-SELECT   

if #count_2 = 0 and #other_count <> 0
    next-column at-end=newline
    do PRINT-CONTACT-NAME
end-if

END-PROCEDURE GET-CONTACT-NAMES

!****************************************************************************
!                                                                           *
!   GET-OTHERS                                                              *
!                                                                           *
!       This procedure gets the decode for other contact names that can     *
!       occur log of contacts for APS, AFC, and CPS.                        *
!                                                                           * 
!       CALLED BY  : GET-CONTACT-INFO                                       *
!       CALLS      : PRINT-OTHERS                                           *
!****************************************************************************

BEGIN-PROCEDURE GET-OTHERS 

  move 0        to #other_count
  move 0        to #name_count

BEGIN-SELECT ON-ERROR=SqlErrorHandle

COTHCNCT.DECODE
    move &COTHCNCT.DECODE               to $contact_other

    let #other_count = #other_count + 1
    let #name_count =  #name_count + 1

FROM        COTHCNCT           COTHCNCT,
            CONTACT            CON
            
WHERE       CON.ID_EVENT  = #id_event
AND         COTHCNCT.CODE = CON.CD_CONTACT_OTHERS

END-SELECT

END-PROCEDURE GET-OTHERS

!****************************************************************************
!                                                                           *
!   FIRST-CONTACT-PRINT                                                     *
!                                                                           *
!       This procedure prints the contact id field the first time.          *
!                                                                           * 
!       CALLED BY  : GET-CONTACT-INFO                                       *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE FIRST-CONTACT-PRINT

 columns 1
print '_'           (+1,1,77) fill !***SIR 5345***
print 'Contact ID: '                        (+2,6)
print #id_event                             (+0,18) edit 8888888888888888

print 'Narrative: '                         (+0,43)
if #id_narr_event > 0
  print 'Y'                                 (+0,55)
else
  print 'N'                                 (+0,55) 
end-if

print 'Date Occurred: '                     (+1,3)
if      $contact_date     <> '01/01/0001'
  print   $contact_date                     (+0,18)
end-if          

print 'Contacted By: '                      (+0,40)   
if $worker_suffix_name <> '' !***ENH***
   let $wkr_suffix = ', ' || $worker_suffix_name
end-if
if $worker_middle_name = ''
   let $full_worker_name = $worker_first_name || ' ' || $worker_last_name || $wkr_suffix
else
   let     $full_worker_name = $worker_first_name  ||' '||
                               $worker_middle_name ||' '||
                               $worker_last_name || $wkr_suffix
end-if
print   $full_worker_name                   (+0,55)           wrap 23  4

move '' to $wkr_suffix !***ENH***

print 'Time Occurred: '                     (+1,3)
if ($program <> 'CPS' or $program <> 'CCL') and $contact_time <> '12:00 AM' !***SIR 13774***
print $contact_time                         (+0,18)
end-if

 next-listing skiplines=1 need=7 no-advance 

 columns 7 18 47 55

 next-column at-end=newline
 next-column at-end=newline
print 'Names: '                             (0,1)
 next-column at-end=newline
 next-column at-end=newline
print '     Type: '                         (0,1)
 next-column at-end=newline
print $contact_type                         (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print 'Attempted: '                         (0,1)
 next-column at-end=newline
print $contact_attempted                    (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print '   Method: '                         (0,1)
 next-column at-end=newline
print $contact_method                       (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print '  Purpose: '                         (0,1)
 next-column at-end=newline
print $contact_purpose                      (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print ' Location: '                         (0,1)
 next-column at-end=newline
print $contact_location                     (0,1)
 next-column at-end=newline
 

END-PROCEDURE FIRST-CONTACT-PRINT

!****************************************************************************
!                                                                           *
!   PRINT-CONTACT-LOG                                                       *
!                                                                           *
!       This procedure prints the contact log.                              *
!                                                                           * 
!       CALLED BY  : GET-CONTACT-INFO                                       *
!       CALLS      : NONE                                                   *
!****************************************************************************


BEGIN-PROCEDURE PRINT-CONTACT-LOG

next-listing need=7 no-advance 

 columns 1
print '_'           (+1,1,77) fill !***SIR 5345***
print 'Contact ID: '                        (+2,6)
print #id_event                             (+0,18) edit 8888888888888888

print 'Narrative: '                         (+0,43)
if #id_narr_event > 0
  print 'Y'                                 (+0,55)
else
  print 'N'                                 (+0,55) 
end-if

print 'Date Occurred: '                     (+1,3)
if      $contact_date     <> '00/00/0000'
  print   $contact_date                     (+0,18)
end-if          

print 'Contacted By: '                      (+0,40)
if $worker_suffix_name <> '' !***ENH***
   let $wkr_suffix = ', ' || $worker_suffix_name
end-if
if $worker_middle_name = ''
   let $full_worker_name = $worker_first_name || ' ' || $worker_last_name || $wkr_suffix
else
   let $full_worker_name = $worker_first_name  ||' '||
                           $worker_middle_name ||' '||
                           $worker_last_name || $wkr_suffix
end-if
print   $full_worker_name                   (+0,55)

move '' to $wkr_suffix !***ENH***

print 'Time Occurred: '                     (+1,3)
if ($program <> 'CPS' or $program <> 'CCL') and $contact_time <> '12:00 AM'  !***SIR 13774***
print $contact_time                         (+0,18)
end-if

 next-listing skiplines=1 need=7 no-advance 

 columns 7 18 47 55

 next-column at-end=newline
 next-column at-end=newline
print 'Names: '                             (0,1)
 next-column at-end=newline
 next-column at-end=newline
print '     Type: '                         (0,1)
 next-column at-end=newline
print $contact_type                         (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print 'Attempted: '                         (0,1)
 next-column at-end=newline
print $contact_attempted                    (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print '   Method: '                         (0,1)
 next-column at-end=newline
print $contact_method                       (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print '  Purpose: '                         (0,1)
 next-column at-end=newline
print $contact_purpose                      (0,1)
 next-column at-end=newline
 next-column at-end=newline
 next-column at-end=newline
print ' Location: '                         (0,1)
 next-column at-end=newline
print $contact_location                     (0,1)
 next-column goto-top=0 at-end=newline

END-PROCEDURE PRINT-CONTACT-LOG

!****************************************************************************
!                                                                           *
!   PRINT-CONTACT-NAME                                                      *
!                                                                           *
!       This procedure prints the contact log contact name.                 *
!                                                                           * 
!       CALLED BY  : GET-CONTACT-INFO                                       *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE PRINT-CONTACT-NAME


if $contact_suffix_name <> '' !***ENH***
   let $con_suffix = ', ' || $contact_suffix_name
end-if
if $contact_middle_name = ''
   let $full_contact_name = $contact_first_name || ' ' || $contact_last_name || $con_suffix
else
   let $full_contact_name = $contact_first_name||' '||
                            $contact_middle_name||' '||
                            $contact_last_name || $con_suffix
end-if

if #count_2 = 1
    next-column goto-top=0 at-end=newline
    print   $full_contact_name              (-5,1)  wrap 23   4

    !***SIR 20957***
    if $contact_other <> ''
        print $contact_other                (+1,1)  wrap 23   4   
    end-if

else
    !***SIR 20957***
    if $full_contact_name <> '  '
        print   $full_contact_name          (+1,1)  wrap 23   4
    end-if

    if #other_count = 1 and #count_2 = 0
        print $contact_other                (-5,1)  wrap 23   4
    else
        if $contact_other <> '' 
            print $contact_other            (+1,1)  wrap 23   4
        end-if
    end-if

end-if

  move ''           to $contact_first_name
  move ''           to $contact_middle_name
  move ''           to $contact_last_name
  move ''           to $contact_suffix_name
  move ''           to $contact_other
  move ''           to $con_suffix !***ENH***

END-PROCEDURE PRINT-CONTACT-NAME 

!****************************************************************************
!                                                                           *
!   WRAP-UP                                                                 *
!                                                                           *
!       This procedure prints the messages for the end of the report as well*
!       as over all totals.                                                 *
!                                                                           * 
!       CALLED BY  : BEGIN-REPORT                                           *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE WRAP-UP

   NEW-PAGE

END-PROCEDURE WRAP-UP


!***********************************************************************
!                                                                      *
! SqlErrorHandle                                                       *
!                                                                      *
!      This section handles formatting of messages for SQL errors.     *
!      When an SQL error is encounterd, the program will write to      *                                                                      
!      the log file, program processing does not stop for SQL errors.  *
!                                                                      *
!  CALLS:  None                                                        *
!                                                                      *
!***********************************************************************

BEGIN-PROCEDURE SqlErrorHandle 

  print 'SQL error - Processing Terminated'               (+1,2)
  print $error                                            (+1,2)
  print 'ERROR: SQL error halted loader processing'       (+0)
  print $error                                            (+1,2)
  print 'SQL Error: '                                     (+0)
  print $sql-error                                        (+0)
  print $error                                            (+1,2)
  print 'SQL Status: '                                    (+0)
  print #sql-status                                       (+0)

  STOP

END-PROCEDURE SqlErrorHandle


!****************************************************************************
!                                                                           *
!                                INCLUDE SECTION                            *
!                                                                           *
!   Include all files that contain common modules or procedures that        *
!   will be used in the report                                      *
!****************************************************************************


#INCLUDE 'cfpstamp.sqc'
