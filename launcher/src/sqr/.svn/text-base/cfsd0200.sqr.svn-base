!*****************************************************************************
!  Outcome Matrix Report                                                     *
!*****************************************************************************  

!*****************************************************************************
!                                                                            *
! PROGRAM NAME:         cfsd0200.sqr                                         *
!                                                                            *
! PROGRAM LOCATION:     /caps/users/mccleabg/work/sqr                        *
!                                                                            *
!                                                                            *
! DATE:                 09/08/95                                             *
!                                                                            *
! PROGRAMMER NAME:      Brad McCleary                                        *
!                                                                            *
! PROGRAM DESCRIPTION:  The Outcome Matrix Report is on-demand for caseworker* 
!                       and supervisor and may be printed as part of the case* 
!                       record for an external source.  The report contains  *
!                       the problems, actions, and outcomes for each case.   *
!                                                                            *
!*****************************************************************************
!*****************************************************************************
!                                                                            *
! PROGRAM MODIFICATION SECTION                                               *
! ----------------------------                                               *
!                                                                            *
!   DATE     PROGRAMMER                       MODIFICATION                   *
! --------   ----------   -------------------------------------------------  *
! 11/20/96   K. Cys       ENH - Modified code for Name Person Full.          *
!                                                                            *
!*****************************************************************************

!*****************************************************************************
!                                                                            *
! REPORT PROCESSING SECTION                                                  *
!                                                                            *
!       This procedure defines the beginning and end of the report proc-     *
!       essing. Housekeeping initializes all report values, Processing       *
!       processes the body of the report, and Wrap-Up prints the end of re-  *
!       port message and other wrap up functions.                            *
!                                                                            *
!*****************************************************************************

BEGIN-REPORT

    do HOUSEKEEPING

    do PROCESS-REPORT        

    do WRAP-UP

END-REPORT

!*****************************************************************************
!  SETUP-SECTION                                                             *
!                                                                            *
!       This section sets up common parameters including page size and       *
!       printer as well as input parameters                                  *
!                                                                            *
!*****************************************************************************
BEGIN-SETUP

    #ifdef ORACLE                           !compiler directive
        ask dbname 'Database Name'
        use {dbname}
    #endif

    #INCLUDE 'setup02b.sqc'            ! control codes for Portrait 
                       ! On Demand Reports              

    ask ID_STAGE                       !Input parameter. Service 
                                       !Delivery Stage of Service

END-SETUP

!*****************************************************************************
!                                                                            *
! HEADER                                                                     *
!                                                                            *
!       These commands will be processed every time SQR writes a page. They  *
!       include the report title, date, time, page number, report id, and    *
!       column headers. XXX lines are reserved to print the heading at the   *
!       top of each page. This includes blank lines. A common setup header   *
!       has been created called XXXXXXXXXXXXXXXXXXX for landscape or portrait*
!       reports.                                                             *
!                                                                            *
!*****************************************************************************

BEGIN-HEADING 5 

  #INCLUDE 'header04.sqc'               !Include file with Header Information
                    !Specific to portrait on demand reports

  print 'OUTCOME MATRIX'                (+2) center
                           
END-HEADING

!*****************************************************************************
!                                                                            *
! FOOTER                                                                     *
!                                                                            *
!       These commands will be processed every time SQR writes a page. They  *
!       include a footer that must be in place in all pages of some reports  *
!                                                                            *
!*****************************************************************************

BEGIN-FOOTING 2

  #INCLUDE 'footer04.sqc'       ! Include file with footer information
                    ! specific to portrait on demand report
       
       
END-FOOTING
       
!****************************************************************************
!                                                                           *
!   HOUSEKEEPING                                                            *
!                                                                           *
!       Set environment variables, initialize report id, initialize title   *
!       id, initialize date and time, initialize variables, and define      *
!       constants                                                           *
!                                                                           *
!       CALLED BY: BEGIN-REPORT                                             *
!                                                                           * 
!****************************************************************************

BEGIN-PROCEDURE HOUSEKEEPING

   #INCLUDE 'setenv.sqc'       !Set printer environment

   move {ID_STAGE}          to #input_id_stage

   do GET-CASE-NAME-NUMBER

  !************************************************
  ! Variables and Constants                       *
  !************************************************
   move 0                   to #variable_1     !Initialize Report Variables
   move 0                   to #variable_2
   move '****END OF REPORT****' to $end_of_report   ! Initialize Working
                            ! Storage constants

END-PROCEDURE HOUSEKEEPING

!****************************************************************************
!                                                                           *
!   PROCESS-REPORT                                                          *
!                                                                           *
!      This procedure includes the main processing logic of the report.     *
!                                                                           *
!       CALLED BY  : BEGIN-REPORT                                           *
!       CALLS      : EXAMPLE-PROCEDURE-1                                    *
!       CALLS      : EXAMPLE-PROCEDURE-2                                    *
!****************************************************************************

BEGIN-PROCEDURE PROCESS-REPORT 

    do GET-WORKER-NAME      

    do GET-ID-EVENT          

    do GET-OUTCOME-MATRIX
    
    do GET-OUTCOME-MATRIX-CARE

END-PROCEDURE PROCESS-REPORT                   


!****************************************************************************
!                                                                           *
!   PRINT-WORKER-NAME                                                       *
!                                                                           *
!       This procedure prints the actual name of the worker selected.       *
!                                                                           * 
!       CALLED BY  : GET-WORKER-NAME                                        *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE PRINT-WORKER-NAME      

print 'Worker Name: '   (+1,1)
if $worker_suffix <> '' !***ENH***
   let $worker_name_suff = ', ' || $worker_suffix
end-if
if $worker_middle = ''
   let $worker_full_name = $worker_first || ' ' || $worker_last || $worker_name_suff
else
   let $worker_full_name = $worker_first || ' ' || $worker_middle || ' ' || $worker_last || $worker_name_suff
end-if
print $worker_full_name        (+0,14)

move '' to $worker_name_suff  !***ENH***

END-PROCEDURE PRINT-WORKER-NAME      


!****************************************************************************
!                                                                           *
!   WRAP-UP                                                                 *
!                                                                           *
!       This procedure prints the messages for the end of the report as well*
!       as over all totals.                                                 *
!                                                                           * 
!       CALLED BY  : BEGIN-REPORT                                           *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE WRAP-UP

   NEW-PAGE

END-PROCEDURE WRAP-UP


!****************************************************************************
!                                                                           *
!   GET-CASE-NAME-NUMBER                                                    *
!                                                                           *
!       This procedure will get the case name and case number using the     *
!       id_stage asked for.                                                 *
!                                                                           * 
!       CALLED BY  : HOUSEKEEPING                                           *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-CASE-NAME-NUMBER

BEGIN-SELECT ON-ERROR=SqlErrorHandle

A.NM_CASE                   
    move &A.NM_CASE     to $Case_Name         
                
A.ID_CASE
    move &A.ID_CASE     to #Case_Number           

FROM  CAPS_CASE         A,
      STAGE             B

WHERE A.ID_CASE = B.ID_CASE            
AND   B.ID_STAGE = #input_id_stage

END-SELECT
    
END-PROCEDURE GET-CASE-NAME-NUMBER


!****************************************************************************
!                                                                           *
!   GET-WORKER-NAME                                                         *
!                                                                           *
!       This procedure will select the Worker Name from the person table    *
!       with the id_person for the primary worker of a case.                *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : PRINT-WORKER-NAME                                      *
!****************************************************************************

BEGIN-PROCEDURE GET-WORKER-NAME    

BEGIN-SELECT ON-ERROR=SqlErrorHandle

N.NM_NAME_FIRST &worker_first !***ENH***
    move &worker_first to $worker_first

N.NM_NAME_MIDDLE &worker_middle
    move &worker_middle to $worker_middle

N.NM_NAME_LAST &worker_last
    move &worker_last   to $worker_last

CSUFFIX2.decode
    move &CSUFFIX2.decode to $worker_suffix

       show $worker_suffix

                        
       do PRINT-WORKER-NAME     


FROM  NAME              N,
      CSUFFIX2          CSUFFIX2,
      PERSON            C,
      STAGE_PERSON_LINK D

WHERE N.ID_PERSON = C.ID_PERSON !***ENH***
AND   N.IND_NAME_PRIMARY = 'Y'
AND   N.DT_NAME_END_DATE = '12/31/4712'
AND   CSUFFIX2.CODE(+) = N.CD_NAME_SUFFIX
AND   D.ID_PERSON = C.ID_PERSON         
AND   D.ID_STAGE  = #input_id_stage
AND   D.CD_STAGE_PERS_TYPE = 'STF'
AND  (D.CD_STAGE_PERS_ROLE = 'PR'
OR    D.CD_STAGE_PERS_ROLE = 'HP')

END-SELECT

END-PROCEDURE GET-WORKER-NAME    


!****************************************************************************
!                                                                           *
!   GET-ID-EVENT                                                            *
!                                                                           *
!       This procedure will get the ID_EVENT for the stage in question      *
!       where the task is outcome matrix.                                   *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-ID-EVENT           

BEGIN-SELECT ON-ERROR=SqlErrorHandle

ID_EVENT                      
    move &ID_EVENT      to #id_event                                          

FROM  EVENT                

WHERE ID_EVENT_STAGE  = #input_id_stage
AND   CD_TASK         in ('6070','2090','5030') !SIR 3090. Added new task code
AND   CD_EVENT_TYPE  = 'PLN'

END-SELECT

END-PROCEDURE GET-ID-EVENT


!****************************************************************************
!                                                                           *
!   GET-OUTCOME-MATRIX                                                      *
!                                                                           *
!       This procedure will retrieve all factors with their actions and     *
!       outcomes for the outcome matrix event.                              *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : PRINT-OUTCOME-MATRIX                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-OUTCOME-MATRIX  

BEGIN-SELECT ON-ERROR=SqlErrorHandle

CPROCATG.decode
    move &CPROCATG.decode                 to $problem_category

CPROBTYP.decode
    move &CPROBTYP.decode                 to $problem_sub_category

ACF.DT_LAST_UPDATE
    move &ACF.DT_LAST_UPDATE              to $problem_date    

ACF.TXT_APS_CLT_FACTOR_CMNTS
    move &ACF.TXT_APS_CLT_FACTOR_CMNTS    to $problem_comments
    
CACTCATG.decode
    move &CACTCATG.decode                 to $action_category

CACTITYP.decode           
    move &CACTITYP.decode                 to $action_sub_category

AOM.DT_APS_OUTCOME_ACTION 
    move &AOM.DT_APS_OUTCOME_ACTION       to $action_date

AOM.TXT_APS_OUTCOME_ACTION
    move &AOM.TXT_APS_OUTCOME_ACTION      to $action_comments

OUT.decode                  
    move &COUTCTYP.decode                 to $outcome_sub_category

AOM.DT_APS_OUTCOME_RECORD
    move &AOM.DT_APS_OUTCOME_RECORD       to $outcome_date

AOM.TXT_APS_OUTCOME_RESULT
    move &AOM.TXT_APS_OUTCOME_RESULT     to $outcome_comments
    

       do PRINT-OUTCOME-MATRIX($problem_category,
       												 $problem_sub_category,
       												 $problem_date,
       												 $problem_comments,
       												 $action_category,
       												 $action_sub_category,
       												 $action_date,
       												 $action_comments,
       												 $outcome_sub_category,
       												 $outcome_date,
       												 $outcome_comments)

FROM  APS_CLIENT_FACTORS ACF,
      APS_OUTCOME_MATRIX AOM,
      CPROCATG           CPROCATG,
      CPROBTYP           CPROBTYP,
      CACTCATG           CACTCATG,
      CACTITYP           CACTITYP,
      COUTCTYP           OUT

WHERE AOM.ID_APS_OUTCOME_EVENT 				= #id_event                  
AND   AOM.ID_APS_CLT_FACTOR 				  = ACF.ID_APS_CLT_FACTOR
AND   ACF.CD_APS_CLT_FACTOR_CATEG 		= CPROCATG.code(+) 
AND   ACF.CD_APS_CLIENT_FACTOR    		= CPROBTYP.code(+)
AND   AOM.CD_APS_OUTCOME_ACTN_CATEG		= CACTCATG.code(+)
AND   AOM.CD_APS_OUTCOME_ACTION    		= CACTITYP.code(+)
AND   AOM.CD_APS_OUTCOME_RESULT    		= OUT.code(+)

ORDER BY ACF.CD_APS_CLIENT_FACTOR

END-SELECT

END-PROCEDURE GET-OUTCOME-MATRIX 

!****************************************************************************
!                                                                           *
!   GET-OUTCOME-MATRIX-CARE                                                 *
!                                                                           *
!       This procedure will retrieve all factors with their actions and     *
!       outcomes for the outcome matrix event.                              *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : PRINT-OUTCOME-MATRIX                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-OUTCOME-MATRIX-CARE  

BEGIN-SELECT ON-ERROR=SqlErrorHandle

CCAREFAC.decode
    move &CCAREFAC.decode                 to $problem_sub_category

CCARECAT.decode
    move &CCARECAT.decode                 to $problem_category

CFL.TXT_FACTOR
		move &CFL.TXT_FACTOR									to $txt_factor

CF.DT_LAST_UPDATE
    move &CF.DT_LAST_UPDATE               to $problem_date    
    
CACTCTG2.decode
    move &CACTCTG2.decode                 to $action_category

CACTITP2.decode           
    move &CACTITP2.decode                 to $action_sub_category

AOMCARE.DT_APS_OUTCOME_ACTION 
    move &AOMCARE.DT_APS_OUTCOME_ACTION   to $action_date

COUTCTYP.decode                  
    move &COUTCTYP.decode                 to $outcome_sub_category

AOMCARE.DT_APS_OUTCOME_RECORD
    move &AOM.DT_APS_OUTCOME_RECORD       to $outcome_date

to_char(AOMCARE.DT_APS_OUTCOME_RECORD, 'MM/DD/YYYY') &date1
    move &date1														to $outcome_date
    
to_char(CF.DT_LAST_UPDATE, 'MM/DD/YYYY') &date2
    move &date2													  to $problem_date
    
to_char(DT_APS_OUTCOME_ACTION, 'MM/DD/YYYY') &date3
    move &date3   												to $action_date 
    
       do PRINT-OUTCOME-MATRIX($problem_category,
       												 $problem_sub_category,
       												 $problem_date,
       												 $problem_comments,
       												 $action_category,
       												 $action_sub_category,
       												 $action_date,
       												 $action_comments,
       												 $outcome_sub_category,
       												 $outcome_date,
       												 $outcome_comments)  

				  FROM   
          CARE_FACTOR CF,    
          CARE_CATEGORY CC,    
          APS_OUTCOME_MATRIX AOMCARE,    
          CCARECAT CCARECAT,    
          CACTCTG2 CACTCTG2,    
          CACTITP2 CACTITP2,    
          COUTCTYP COUTCTYP,   
          CCAREFAC CCAREFAC,
          CARE_FACTOR_LOOKUP CFL
    WHERE AOMCARE.ID_APS_OUTCOME_EVENT = #id_event                   
    AND   AOMCARE.ID_APS_CLT_FACTOR = CF.ID_CARE_FACTOR    
    AND   CF.ID_CARE_CATEGORY = CC.ID_CARE_CATEGORY 
    AND   CD_CARE_FACTOR_RESPONSE IN ('M','H')
    AND   CF.CD_CARE_FACTOR = CFL.CD_FACTOR(+) 
    AND   CC.CD_CARE_CATEGORY = CCARECAT.code(+)     
    AND   CF.CD_CARE_FACTOR    = CCAREFAC.code(+)    
    AND   AOMCARE.CD_APS_OUTCOME_ACTN_CATEG = CACTCTG2.code(+)    
    AND   AOMCARE.CD_APS_OUTCOME_ACTION    = CACTITP2.code(+)    
    AND   AOMCARE.CD_APS_OUTCOME_RESULT    = COUTCTYP.code(+)    

ORDER BY TXT_FACTOR ASC

END-SELECT

END-PROCEDURE GET-OUTCOME-MATRIX-CARE

!****************************************************************************
!                                                                           *
!   PRINT-OUTCOME-MATRIX                                                    *
!                                                                           *
!       This procedure prints the outcome matrix selected.                  *
!                                                                           * 
!       CALLED BY  : GET-OUTCOME-MATRIX                                     *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE PRINT-OUTCOME-MATRIX($problem_category,
       												 			 $problem_sub_category,
       												 			 $problem_date,
       												 			 $problem_comments,
       												 			 $action_category,
       															 $action_sub_category,
       															 $action_date,
       															 $action_comments,
       															 $outcome_sub_category,
       															 $outcome_date,
       															 $outcome_comments)   

print 'PROBLEM: '           (+2,1)
print $problem_category     (+0,11,29)
print $problem_sub_category (+0,41,26) wrap 25 10
if $problem_date = '12/31/4712' or $problem_date = '12/31/3500'
	let $problem_date = ''
end-if
print $problem_date         (+0,68)
print 'COMMENTS: '          (+1,1)
print $problem_comments     (+0,11)  wrap 67   5
print 'ACTION: '            (+1,1)
print $action_category      (+0,11,29)
print $action_sub_category  (+0,41,26)
if $action_date = '12/31/4712' or $action_date = '12/31/3500'
	let $action_date = ''
end-if
print $action_date          (+0,68)
print 'COMMENTS: '          (+1,1)
print $action_comments      (+0,11)  wrap 67   5
print 'OUTCOME: '           (+1,1)
print $outcome_sub_category (+0,11)
if $outcome_date = '12/31/4712' or $outcome_date = '12/31/3500' 
  let $outcome_date = ''  
end-if
print $outcome_date         (+0,68)
print 'COMMENTS: '          (+1,1)
print $outcome_comments     (+0,11)  wrap 67   5

END-PROCEDURE PRINT-OUTCOME-MATRIX 


!***********************************************************************
!                                                                      *
! SqlErrorHandle                                                       *
!                                                                      *
!      This section handles formatting of messages for SQL errors.     *
!      When an SQL error is encounterd, the program will write to      *                                                                      
!      the log file, program processing does not stop for SQL errors.  *
!                                                                      *
!  CALLS:  None                                                        *
!                                                                      *
!***********************************************************************

BEGIN-PROCEDURE SqlErrorHandle 


  print 'SQL error - Processing Terminated'               (+1,2)
  print $error                                            (+1,2)
  print 'ERROR: SQL error halted loader processing'       (+0)
  print $error                                            (+1,2)
  print 'SQL Error: '                                     (+0)
  print $sql-error                                        (+0)
  print $error                                            (+1,2)
  print 'SQL Status: '                                    (+0)
  print #sql-status                                       (+0)

  STOP

END-PROCEDURE SqlErrorHandle


!****************************************************************************
!                                                                           *
!                                INCLUDE SECTION                            *
!                                                                           *
!   Include all files that contain common modules or procedures that        *
!   will be used in the report                                              *
!****************************************************************************


#INCLUDE 'cfpstamp.sqc'
