!*****************************************************************************
!  TRAINING LOG REPORT                                                       *
!*****************************************************************************  

!*****************************************************************************
!                                                                            *
! PROGRAM NAME:         cfa10o00.sqr                                         *
!                                                                            *
! PROGRAM LOCATION:     /caps/users/mccleabg/work/sqr                        *
!                                                                            *
! DATE:                 11/06/95                                             *
!                                                                            *
! PROGRAMMER NAME:      Brad McCleary                                        *
!                                                                            *
! PROGRAM DESCRIPTION:  The Foster/Adoptive Training Log is created to list  *
!                       the training received by the members of the home.    * 
!                       The report will show the training hours for the home,*
!                       broken down by member, since the home's approval or  *
!                       the last reverification date.                        *  
!*****************************************************************************

!*****************************************************************************
!                                                                            *
! PROGRAM MODIFICATION SECTION                                               *
! ----------------------------                                               *
!                                                                            *
!   DATE     PROGRAMMER                       MODIFICATION                   *
! --------   ----------   -------------------------------------------------  *
! 11/06/95   B. McCleary  Initial Programming                                *
! 02/15/96   B. McCleary  SIR 3175 - Removed date input; now selects the most*
!                         recent date event occurred for the reverification  *
!                         date.                                              *
! 02/28/96   B. McCleary  SIR 3468 - Allows for reverification date not found*
!                         Added outer join in case person not in person dtl. *
! 03/21/96   B. McCleary  SIR 4117 - Gets the approval date from the event   *
!                         table when the reverification date does not exist. *
! 04/08/96   B. McCleary  SIR 20242 - Report was retrieving same info for all*
!                         aliases of the same person.  Added primary name    *
!                         and name end date MAXDATE conditions to prevent    *
!                         this from occurring.                               *
! 11/05/96   K. Cys       ENH - Added code for Name Person Full Enhancement. *
! 03/20/97   K.Cys        SIR 13349 -- NPF code broke logic that             *
!                         differentiated home members.  Moved logic to       *
!                         GET-TRAIN-INFO procedure to correct problem.       *
!                         Also discovered that design was interpreted        *
!                         incorrectly to get approval date from EVENT table  *
!                         if RVF date was not present.  Date in GET          *
!                         -APPROVAL-DATE should actually come from APPROVERS *
!                         table to more accurately reflect the apprv. date   *
!                         of an FA Home.                                     *
!*****************************************************************************

!*****************************************************************************
!                                                                            *
! REPORT PROCESSING SECTION                                                  *
!                                                                            *
!       This procedure defines the beginning and end of the report proc-     *
!       essing. Housekeeping initializes all report values, Processing       *
!       processes the body of the report, and Wrap-Up prints the end of re-  *
!       port message and other wrap up functions.                            *
!                                                                            *
!*****************************************************************************

BEGIN-REPORT

    do HOUSEKEEPING

    do PROCESS-REPORT        

    do WRAP-UP

END-REPORT

!*****************************************************************************
!  SETUP-SECTION                                                             *
!                                                                            *
!       This section sets up common parameters including page size and       *
!       printer as well as input parameters                                  *
!                                                                            *
!*****************************************************************************
BEGIN-SETUP

    #ifdef ORACLE                       !compiler directive
        ask dbname 'Database Name'
        use {dbname}
    #endif

    #INCLUDE 'setup02a.sqc'             ! control codes for Landscape
                                        ! On Demand Reports              

    ask ID_STAGE                                
    
END-SETUP

!*****************************************************************************
!                                                                            *
! HEADER                                                                     *
!                                                                            *
!       These commands will be processed every time SQR writes a page. They  *
!       include the report title, date, time, page number, report id, and    *
!       column headers. XXX lines are reserved to print the heading at the   *
!       top of each page. This includes blank lines. A common setup header   *
!       has been created called XXXXXXXXXXXXXXXXXXX for landscape or portrait*
!       reports.                                                             *
!                                                                            *
!*****************************************************************************

BEGIN-HEADING 7 

print 'F/A HOME NAME: '                         (1,50)
print $res_name                                 (+0,65)
print 'FACILITY #: '                            (+1,53)
print #res_id                                   (+0,65) edit 8888888888888888
print 'CASE #: '                                (+1,57)
print #id_case                                  (+0,65) edit 8888888888888888

print 'F/A HOME TRAINING LOG REPORT'            (+2) center

print 'APPROVAL/RE-EVALUATION DATE: '           (+2,1)

if $rev_date <> '01/01/0001'
  print $rev_date                               (+0,31)
end-if

END-HEADING

!*****************************************************************************
!                                                                            *
! FOOTER                                                                     *
!                                                                            *
!       These commands will be processed every time SQR writes a page. They  *
!       include a footer that must be in place in all pages of some reports  *
!                                                                            *
!*****************************************************************************

BEGIN-FOOTING 2

  #INCLUDE 'footer03.sqc'       ! Include file with footer information
                                ! specific to landscape on demand report

END-FOOTING

!****************************************************************************
!                                                                           *
!   HOUSEKEEPING                                                            *
!                                                                           *
!       Set environment variables, initialize report id, initialize title   *
!       id, initialize date and time, initialize variables, and define      *
!       constants                                                           *
!                                                                           *
!       CALLED BY: BEGIN-REPORT                                             *
!       CALLS:     GET-CASE-NAME-NUMBER                                     * 
!****************************************************************************

BEGIN-PROCEDURE HOUSEKEEPING

   #INCLUDE 'setenv.sqc'       !Set printer environment

    move  {ID_STAGE}                      to #input_id_stage    
    
    move 'PRN'                            to $PRN       
    move 'FAD'                            to $FAD       
    move 'RVF'                            to $RVF       

END-PROCEDURE HOUSEKEEPING

!****************************************************************************
!                                                                           *
!   PROCESS-REPORT                                                          *
!                                                                           *
!      This procedure includes the main processing logic of the report.     *
!                                                                           *
!       CALLED BY  : BEGIN-REPORT                                           *
!       CALLS      : GET-HEAD-INFO, GET-TRAIN-INFO, PRINT-LAST-TOTAL        *
!****************************************************************************

BEGIN-PROCEDURE PROCESS-REPORT 
                      !*****************************************************
    do GET-REV-DATE   !SIR 3175 - added to obtain the most recent date event
		      !           occurred instead of inputting the date.
                      !*****************************************************

    if $rev_date = ''        !**********************************************
	do GET-FA-EVENT      !SIR 4117 - Added SQL to get approval date when
        do GET-APPROVAL-DATE !the rev date is not selected
    end-if                   !**********************************************

    do GET-HEAD-INFO 
    do GET-TRAIN-INFO
    do PRINT-LAST-TOTAL

END-PROCEDURE PROCESS-REPORT                   

!****************************************************************************
!                                                                           *
!   GET-REV-DATE                                                            *
!                                                                           *
!       This procedure will get all of the base caller information that     *
!       is to be printed.  It also makes the report new-page and resets the *
!       counters if the worker name changes.                                *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-REV-DATE  

BEGIN-SELECT ON-ERROR=SqlErrorHandle

E.ID_EVENT
    move &E.ID_EVENT                                to #id_event

E.DT_EVENT_OCCURRED
    move &E.DT_EVENT_OCCURRED                       to $rev_date


FROM    EVENT           E,
        STAGE           S
        
WHERE   E.ID_EVENT_STAGE = #input_id_stage
AND     E.ID_EVENT_STAGE = S.ID_STAGE      
AND     S.CD_STAGE =       $FAD                   
AND     E.CD_EVENT_TYPE =  $RVF

ORDER BY DT_EVENT_OCCURRED ASC

END-SELECT    
  
END-PROCEDURE GET-REV-DATE  

!****************************************************************************
!                                                                           *
!   GET-FA-EVENT                                                            *
!                                                                           *
!       This procedure will get all of the base caller information that     *
!       is to be printed.  It also makes the report new-page and resets the *
!       counters if the worker name changes.                                *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-FA-EVENT  

BEGIN-SELECT ON-ERROR=SqlErrorHandle

AL.ID_APPROVAL
    move &AL.ID_APPROVAL                         to #id_approval


FROM    RESOURCE_HISTORY	R,
        APPROVAL_EVENT_LINK  	AL

WHERE   R.ID_RSHS_FA_HOME_EVENT = AL.ID_EVENT
AND     R.DT_RSHS_EFFECTIVE = 
	       (SELECT MIN(DT_RSHS_EFFECTIVE)
		FROM	RESOURCE_HISTORY	R1
		WHERE 	R1.ID_RSHS_FA_HOME_STAGE = #input_id_stage
		AND	R1.CD_RSHS_FA_HOME_STATUS = '040')

END-SELECT    
  
END-PROCEDURE GET-FA-EVENT  

!****************************************************************************
!                                                                           *
!   GET-APPROVAL-DATE                                                       *
!                                                                           *
!       This procedure will get all of the base caller information that     *
!       is to be printed.  It also makes the report new-page and resets the *
!       counters if the worker name changes.                                *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-APPROVAL-DATE

    move 0      to #count1             ! initialize the counter

BEGIN-SELECT ON-ERROR=SqlErrorHandle

A.DT_APPROVERS_DETERMINATION &dt_occurred
    move &dt_occurred             		to $rev_date


  let #count1 = #count1 + 1

FROM    APPROVERS A                        !***SIR 13349***
                                           ! Approval date should actually
WHERE   A.ID_APPROVAL = #id_approval       ! come from APPROVERS table

END-SELECT    
  
  !SIR 3468 - When the date is not selected, this moves a MINDATE value to
  !the host variable so that it may be compared to the date event occurred
  !in the next call's conditions

  if #count1 = 0
      move '01/01/0001'                             to $rev_date
  end-if 

END-PROCEDURE GET-APPROVAL-DATE

!****************************************************************************
!                                                                           *
!   GET-HEAD-INFO                                                           *
!                                                                           *
!       This procedure will get all of the base caller information that     *
!       is to be printed.  It also makes the report new-page and resets the *
!       counters if the worker name changes.                                *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-HEAD-INFO 

    move 0      to #count1             ! initialize the counter

BEGIN-SELECT ON-ERROR=SqlErrorHandle
                   
A.NM_RESOURCE
    move &A.NM_RESOURCE                             to $res_name
    
A.ID_RESOURCE
    move &A.ID_RESOURCE                             to #res_id
    
B.ID_CASE
    move &B.ID_CASE                                 to #id_case

FROM    CAPS_RESOURCE   A,
        STAGE           B
        
WHERE   B.ID_STAGE = #input_id_stage
AND     B.ID_STAGE = A.ID_RSRC_FA_HOME_STAGE

END-SELECT    

END-PROCEDURE GET-HEAD-INFO 

!****************************************************************************
!                                                                           *
!   GET-TRAIN-INFO                                                          *
!                                                                           *
!       This procedure will get all of the base caller information that     *
!       is to be printed.  It also makes the report new-page and resets the *
!       counters if the worker name changes.                                *
!                                                                           * 
!       CALLED BY  : PROCESS REPORT                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE GET-TRAIN-INFO 

    move 0      to #count2             ! initialize the counter

BEGIN-SELECT ON-ERROR=SqlErrorHandle
                   
to_char(A.DT_INDIV_TRN, 'MM/DD/YYYY') &date1
    move &date1                                 to $train_date
    
CFATRAIN.decode     
    move &CFATRAIN.decode                       to $train_type
    
A.TXT_INDIV_TRN_TITLE
    move &A.TXT_INDIV_TRN_TITLE                 to $train_title
    
A.NBR_INDIV_TRN_SESSION
    move &A.NBR_INDIV_TRN_SESSION               to #session_num
    
A.NBR_INDIV_TRN_HRS    
    move &A.NBR_INDIV_TRN_HRS                   to #train_hrs
    
A.IND_INDIV_TRN_EC
    move &A.IND_INDIV_TRN_EC                    to $train_ec
    
B.NM_NAME_FIRST &member_first                   !***ENH***
    move &member_first                          to $member_first

B.NM_NAME_MIDDLE &member_middle
    move &member_middle                         to $member_middle

B.NM_NAME_LAST &member_last
    move &member_last                           to $member_last

CSUFFIX2.decode                                 !***ENH***
    move &CSUFFIX2.decode                       to $mem_suff
    
CFAHROLS.decode             
    move &CFAHROLS.decode                       to $member_role

    let #count2 = #count2 + 1

    if $mem_suff <> '' !***ENH*** !***SIR 13349***
       let $mem_name_suff = ', ' || $mem_suff
    end-if
    if $member_middle = ''
       let $member = $member_first || ' ' || $member_last || $mem_name_suff
    else
       let $member = $member_first || ' ' || $member_middle || ' ' || $member_last || $mem_name_suff
    end-if

    if #count2 = 1
        do PRINT-MEMBER-INFO
        do PRINT-TRAIN-INFO
    let #tot_mem_hrs = #tot_mem_hrs + #train_hrs 
    
    else
    	if $new_member <> $member
        	do PRINT-TOTALS
        	NEW-PAGE
    	let #tot_home_hrs = #tot_home_hrs + #tot_mem_hrs
    	let #tot_mem_hrs = #train_hrs                  
    	let #tot_ec_hrs = 0                           
        	do PRINT-MEMBER-INFO
        	do PRINT-TRAIN-INFO
    
    	else
    		let #tot_mem_hrs = #tot_mem_hrs + #train_hrs 
        	do PRINT-TRAIN-INFO
    	end-if
    end-if

    move $member to $new_member

    move '' to $mem_name_suff !***ENH***

FROM    FA_INDIV_TRAINING  A,
        NAME               B,
        PERSON_DTL         C,
        CFAHROLS           CFAHROLS,
        CFATRAIN           CFATRAIN,
	CSUFFIX2           CSUFFIX2 !***ENH***
        
WHERE   A.ID_PERSON IN
    (SELECT     ID_PERSON
     FROM       STAGE_PERSON_LINK
     WHERE      CD_STAGE_PERS_TYPE = $PRN
     AND        ID_STAGE = #input_id_stage)
AND     A.DT_INDIV_TRN >= $rev_date 
AND     B.ID_PERSON = A.ID_PERSON
AND     B.IND_NAME_PRIMARY = 'Y'         !SIR 20242 - Gets only the primary name
AND     B.DT_NAME_END_DATE = '12/31/4712'  !  with MAXDATE for name end date
AND     C.ID_PERSON(+) = A.ID_PERSON    !SIR 3468 - Still passes when person not
                                        !           not in person detail
AND     CFAHROLS.CODE(+) = C.CD_PERSON_FA_HOME_ROLE
AND     CFATRAIN.CODE(+) = A.CD_INDIV_TRN_TYPE
AND     CSUFFIX2.CODE(+) = B.CD_NAME_SUFFIX !***ENH***

END-SELECT    

    let #tot_home_hrs = #tot_home_hrs + #tot_mem_hrs
        do PRINT-TOTALS

END-PROCEDURE GET-TRAIN-INFO 

!****************************************************************************
!                                                                           *
!   PRINT-MEMBER-INFO                                                       *
!                                                                           *
!       This procedure prints the caller information and determines which   *
!       print procedure to call according to the stage classification.      *
!                                                                           * 
!       CALLED BY  : GET-TRAIN-INFO                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE PRINT-MEMBER-INFO 

next-listing need = 6

print 'HOME MEMBER: '                           (+1,1)
print $member                                   (+0,14)
print 'ROLE: '                                  (+0,46)
print $member_role                              (+0,55)

END-PROCEDURE PRINT-MEMBER-INFO 

!****************************************************************************
!                                                                           *
!   PRINT-TRAIN-INFO                                                        *
!                                                                           *
!       This procedure prints the caller information and determines which   *
!       print procedure to call according to the stage classification.      *
!                                                                           * 
!       CALLED BY  : GET-TRAIN-INFO                                         *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE PRINT-TRAIN-INFO 

next-listing  need = 4

print 'DATE: '                              (+2,1)
print $train_date                           (+0,14)
print 'TYPE: '                              (+0,46)
print $train_type                           (+0,53)
print 'HOURS: '                             (+0,83)
print #train_hrs                            (+0,90) edit 888888.8
print 'TITLE: '                             (+1,1)
print $train_title                          (+0,14)
print 'SESSION #: '                         (+1,1)
print #session_num                          (+0,14) edit B8 

    if $train_ec = 'Y'
        print 'EVALUATION COMPONENT'        (+0,46)
    let #tot_ec_hrs = #tot_ec_hrs + #train_hrs
    end-if

END-PROCEDURE PRINT-TRAIN-INFO 

!****************************************************************************
!                                                                           *
!   PRINT-TOTALS                                                            *
!                                                                           *
!       This procedure prints the program and request type field if the     *
!       stage classification is SPC.                                        *
!                                                                           * 
!       CALLED BY  : PRINT-CALLER-INFO                                      *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE PRINT-TOTALS

print 'TOTAL MEMBER HOURS: '                    (+2,70)
print #tot_mem_hrs                              (+0,90) edit 999999.9
print 'TOTAL MEMBER HRS W/EVAL COMP: '          (+2,60)
print #tot_ec_hrs                               (+0,90) edit 999999.9

END-PROCEDURE PRINT-TOTALS

!****************************************************************************
!                                                                           *
!   PRINT-LAST-TOTAL                                                        *
!                                                                           *
!       This procedure prints the allegation, priority, program, and case   *
!       county fields if the stage classification is neither I&R nor SPC.   *
!                                                                           * 
!       CALLED BY  : PRINT-CALLER-INFO                                      *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE PRINT-LAST-TOTAL

NEW-PAGE

print 'TOTAL HOME HRS: '                                (+1,60)
print #tot_home_hrs                                     (+0,90) edit 999999.9

END-PROCEDURE PRINT-LAST-TOTAL

!****************************************************************************
!                                                                           *
!   WRAP-UP                                                                 *
!                                                                           *
!       This procedure prints the messages for the end of the report as well*
!       as over all totals.                                                 *
!                                                                           * 
!       CALLED BY  : BEGIN-REPORT                                           *
!       CALLS      : NONE                                                   *
!****************************************************************************

BEGIN-PROCEDURE WRAP-UP

   NEW-PAGE

END-PROCEDURE WRAP-UP


!***********************************************************************
!                                                                      *
! SqlErrorHandle                                                       *
!                                                                      *
!      This section handles formatting of messages for SQL errors.     *
!      When an SQL error is encounterd, the program will write to      *   
!      the log file, program processing does not stop for SQL errors.  *
!                                                                      *
!  CALLS:  None                                                        *
!                                                                      *
!***********************************************************************

BEGIN-PROCEDURE SqlErrorHandle 

  print 'SQL error - Processing Terminated'               (+1,2)
  print $error                                            (+1,2)
  print 'SQL Error: '                                     (+0)
  print $sql-error                                        (+0)
  print $error                                            (+1,2)
  print 'SQL Status: '                                    (+0)
  print #sql-status                                       (+0)

  STOP

END-PROCEDURE SqlErrorHandle


!****************************************************************************
!                                                                           *
!                                INCLUDE SECTION                            *
!                                                                           *
!   Include all files that contain common modules or procedures that        *
!   will be used in the report                                              *
!****************************************************************************
#INCLUDE 'cfpstamp.sqc'
